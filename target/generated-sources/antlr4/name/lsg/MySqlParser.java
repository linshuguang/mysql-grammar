// Generated from name\lsg\MySqlParser.g4 by ANTLR 4.3
package name.lsg;



  import java.util.regex.Pattern;
  import java.util.*;
  import name.lsg.grammar.*;
  import name.lsg.grammar.statement.*;
  import name.lsg.grammar.id.*;
  import name.lsg.grammar.definition.*;
  import name.lsg.grammar.constraint.*;
  import name.lsg.grammar.engine.*;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WARNINGS=538, FORMAT=700, FEDERATED=610, UNINSTALL=526, UNDOFILE=524, 
		LOG10=752, REVERSE_QUOTE_SYMB=955, FLOOR=699, MASTER_SSL_CA=383, YEAR=184, 
		AND_ASSIGN=925, PARTITION=109, LEFT=82, STOP=506, DAYOFYEAR=680, DES_DECRYPT=683, 
		PLUS_ASSIGN=920, ERROR_RECONGNIGION=973, RESTRICT=123, RELEASE=118, WHERE=163, 
		SQLWARNING=138, ST_ISSIMPLE=861, HP8=586, AS=10, AT=250, DATABASE=33, 
		TIS620=598, RELAY_LOG_POS=454, ASYMMETRIC_VERIFY=645, ST_LINEFROMTEXT=862, 
		CURDATE=229, ENCODE=688, WEIGHT_STRING=914, CHANGED=266, DOUBLE_QUOTE_SYMB=954, 
		SET=131, MASTER_SSL_CAPATH=384, MERGE=399, ST_GEOMCOLLFROMWKB=847, X_FUNCTION=918, 
		ST_SYMDIFFERENCE=880, CONSTRAINT=26, DIVIDE=929, ST_GEOMCOLLFROMTEXT=845, 
		BY=15, STRAIGHT_JOIN=144, CHARACTER=21, CROSSES=674, VAR_ASSIGN=919, ST_ISEMPTY=860, 
		AUTHORS=251, MIGRATE=401, CONTINUE=27, CONSISTENT=284, DIV=934, SUSPEND=512, 
		SECURITY=478, GEOMETRYFROMTEXT=709, FAST=324, TRUNCATE=522, CURSOR=32, 
		MASTER_SSL_CERT=385, GEOMETRYFROMWKB=710, LPAD=755, DO=301, SHA=815, MASTER_RETRY_COUNT=381, 
		UUID_SHORT=908, AREA=635, BLACKHOLE=608, ONE_DECIMAL=951, LOW_PRIORITY=90, 
		INET6_NTOA=724, ESCAPED=49, DISABLE=298, SQL_BIG_RESULT=139, PORT=437, 
		MAKETIME=758, MASTER_TLS_VERSION=390, FOR=55, MINUSMINUS=932, ADDTIME=632, 
		COERCIBILITY=659, USING=160, IFNULL=722, SIN=819, REBUILD=448, LIST=367, 
		UNDO=152, WITHIN=915, NCHAR=409, UNCOMPRESS=901, KEY_BLOCK_SIZE=361, SCHEMA=128, 
		COLUMNS=274, SUBPARTITION=510, WEEKDAY=912, XOR_ASSIGN=926, BIN=649, BIT_OR_OP=941, 
		COMPRESSION=281, BIT=258, SYSDATE=239, WITH=165, ACTION=245, ST_OVERLAPS=870, 
		REDUNDANT=451, UPGRADE=529, ISNULL=732, START=500, ISSIMPLE=733, TEMPTABLE=517, 
		ST_AREA=828, SHA2=817, LESS_SYMBOL=938, CHARACTER_LENGTH=656, OCT=787, 
		PROFILES=444, ERRORS=312, MULTIPOLYGONFROMWKB=781, SHA1=816, ST_GEOMFROMTEXT=854, 
		LEAVES=364, UNDEFINED=523, KOI8U=589, EVERY=317, NULLIF=783, MBRTOUCHES=766, 
		MULTILINESTRINGFROMTEXT=776, FLUSH=331, MIN_ROWS=402, CEIL=653, ID=968, 
		IF=64, BIT_LENGTH=651, MAX_USER_CONNECTIONS=397, FIELDS=326, IN=66, IO=355, 
		DISTINCT=42, DOT=944, BTREE=262, ASBINARY=636, IS=74, MASTER_BIND=91, 
		HASH=341, LCASE=741, FORCE=56, ASWKT=640, ROTATE=472, EVEN=314, EXIT=51, 
		MASTER=371, COLLATION=660, ST_GEOMETRYCOLLECTIONFROMWKB=849, ENCRYPTION=306, 
		MAX=215, CASCADE=17, TRANSACTION=520, IGNORE=65, MAX_QUERIES_PER_HOUR=393, 
		COMMENT=276, BIT_XOR=212, QUICK=447, DUPLICATE=303, USAGE=158, UPDATE=157, 
		WAIT=537, REQUIRE=122, ST_DIMENSION=838, COMMA=947, USA=546, DES_KEY_FILE=296, 
		ENGINES=310, TO_SECONDS=899, DISTINCTROW=43, USE=159, RETURNS=469, EXCLAMATION_SYMBOL=939, 
		MASTER_USER=391, SOCKET=488, MASTER_DELAY=374, UCS2=599, FIRST=329, SELECT=130, 
		CLIENT=270, ONLINE=420, TRADITIONAL=519, TABLES=558, OUTFILE=108, STDDEV=218, 
		GREATEST=718, DATAFILE=291, UTC_DATE=241, KOI8R=588, ISEMPTY=731, INVOKER=354, 
		ST_POLYFROMTEXT=874, LOCAL_ID=971, MD5=768, CURRENT_USER=31, LN=748, ST_SRID=878, 
		TRIGGERS=521, COLUMN=24, MODE=403, UNIX_TIMESTAMP=904, DECIMAL=178, LR_BRACKET=945, 
		RESET=467, PERFOMANCE_SCHEMA=617, EVENT=315, COMPRESS=661, COALESCE=272, 
		STATUS=505, START_NATIONAL_STRING_LITERAL=959, DIMENSION=685, WRAPPER=541, 
		REVERSE_QUOTE_ID=969, TIMESTAMP=182, ACOS=630, PARTITIONS=431, SUBSTR=237, 
		POLYFROMWKB=798, GREATER_SYMBOL=937, INPLACE=350, CREATE_ASYMMETRIC_PUB_KEY=671, 
		SQL=135, PRIVILEGES=566, READ=114, EXTRACTVALUE=696, HEBREW=585, POINTFROMWKB=795, 
		REAL=175, LESS=365, REDO_BUFFER_SIZE=450, NO=412, FLOAT=177, CURRENT_TIMESTAMP=227, 
		ROUTINE=559, ASWKB=639, ROLLBACK=470, SWE7=597, SHARED=482, ST_TOUCHES=881, 
		CHANGE=20, OJ=417, ST_Y=885, ST_X=884, ON=100, OR=104, EQUALS=692, SJIS=596, 
		PRIMARY=110, MBRDISJOINT=762, SSL=142, ST_ASBINARY=829, MAX_CONNECTIONS_PER_HOUR=392, 
		DAYOFWEEK=679, DEGREES=682, PI=793, SECOND=556, UNKNOWN=527, HOUR_SECOND=203, 
		POINT=627, REFERENCES=116, ROWS=474, SPATIAL=134, STD=217, SLEEP=820, 
		POLYGON=628, CREATE=29, TRIGGER=150, LEAST=742, BETWEEN=13, MLINEFROMWKB=770, 
		CONTEXT=286, MASTER_CONNECT_RETRY=373, CREATE_ASYMMETRIC_PRIV_KEY=670, 
		GLOBAL_ID=972, CONVERT=28, POSITION=236, FOUND_ROWS=701, POINTFROMTEXT=794, 
		DISCARD=299, PREV=441, RECOVER=449, PROCESS=562, SINGLE_QUOTE_SYMB=953, 
		ERROR=311, DECODE=681, DEALLOCATE=292, OLD_PASSWORD=418, INNER=69, EACH=45, 
		MACROMAN=595, OPTIONALLY=103, REPLICATE_IGNORE_TABLE=462, SLOW=486, MID=400, 
		BIGINT=174, SUM=221, OPTIONS=424, ST_DISJOINT=839, MIN=216, ST_POLYFROMWKB=875, 
		VARCHAR=186, LTRIM=756, KEY=77, CALL=16, RELOAD=563, STRING_USER_NAME=970, 
		ONE=419, ST_DIFFERENCE=837, ST_CONTAINS=835, DELAY_KEY_WRITE=295, RLIKE=127, 
		GROUP=61, GEOMCOLLFROMWKB=706, TIMESTAMPDIFF=893, UJIS=600, OFFSET=416, 
		TEMPORARY=516, VARIANCE=224, ST_INTERSECTION=857, SNAPSHOT=487, SECOND_MICROSECOND=205, 
		COMMITTED=619, DELAYED=37, SUBJECT=509, TO=148, STARTPOINT=825, UNION=153, 
		INDEXES=348, AES_DECRYPT=633, TIMEDIFF=891, VIEW=536, LINES=86, ST_GEOMETRYFROMWKB=851, 
		ACCOUNT=244, ARCHIVE=607, REVERSE=808, REPLACE=121, CURRENT_TIME=226, 
		INTEGER=173, GET_LOCK=716, EXTERIORRING=695, MAX_SIZE=395, UNIQUE=154, 
		TRAILING=149, PAGE=427, ST_NUMPOINTS=869, STR_TO_DATE=827, FULL=334, NAME=407, 
		ROW_COUNT=810, LAST=363, CEILING=654, MAXVALUE=94, AUTOCOMMIT=252, MULTILINESTRINGFROMWKB=777, 
		MULTIPOLYGONFROMTEXT=780, SUBDATE=886, ORD=789, QUOTE=803, RPAD=811, LOCALTIME=228, 
		KEYBCS2=587, CONTAINS=285, GENERAL=336, GBK=582, REGEXP=117, SIGNED=483, 
		EQUAL_SYMBOL=936, SERVER=479, WEEKOFYEAR=913, NEXT=411, LEAVE=81, ENDS=308, 
		GLOBAL=337, RADIANS=804, SHOW=133, SHUTDOWN=564, ST_ASTEXT=830, MASTER_PORT=380, 
		MOD=935, EXISTS=50, XA=543, TIME=181, GREEK=584, MYISAM=614, DATETIME=183, 
		BOOL=260, DIRECTORY=297, NAME_CONST=782, FALSE=53, ST_POINTN=873, FILE_BLOCK_SIZE=327, 
		MASTER_SSL_KEY=389, NULL_SPEC_LITERAL=964, MASTER_PASSWORD=379, MBRWITHIN=767, 
		SHARE=481, MULTIPOLYGON=626, WHEN=162, STDDEV_SAMP=220, NUMPOINTS=786, 
		PERIOD_DIFF=792, LOCAL=368, EXCHANGE=318, ST_ISCLOSED=859, Y_FUNCTION=917, 
		GRANTS=338, LONGBLOB=192, DAY_MINUTE=200, CP932=577, CAST=19, SQL_CACHE=497, 
		FIELD=697, INSTANCE=353, ST_GEOMFROMWKB=855, TOUCHES=896, LEADING=80, 
		MODIFIES=95, FUNCTION=335, CASE=18, OUT=106, ASYMMETRIC_ENCRYPT=643, OPTIMIZE=101, 
		OVERLAPS=790, GEOMFROMWKB=714, COUNT=213, GEOMETRYCOLLECTIONFROMWKB=708, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=848, NAMES=408, UNSIGNED=156, LENGTH=743, 
		CHAR=185, BIG5=569, BEGIN=256, REPLICATE_REWRITE_DB=463, WRITE=166, MAX_ROWS=394, 
		ORDER=105, SQL_CALC_FOUND_ROWS=140, ISOLATION=358, REPLICATION=466, REAL_LITERAL=963, 
		ENVELOPE=691, REMOVE=456, STATS_AUTO_RECALC=502, YEARWEEK=916, COLLATE=23, 
		MODIFY=404, UNCOMMITTED=620, ST_DISTANCE=840, REPEATABLE=618, INTERIORRINGN=728, 
		COMPLETION=279, CONCAT_WS=663, KILL=79, DECIMAL_LITERAL=961, TAN=890, 
		SUBSTRING=238, POLYFROMTEXT=797, EUCJPMS=579, ISCLOSED=730, DATE_SUB=232, 
		UUID=907, LOAD_FILE=749, BOTH=14, ST_ENDPOINT=841, EXPIRE=320, SOUNDEX=821, 
		ENABLE=305, IS_IPV4_COMPAT=736, HOSTS=344, NUMGEOMETRIES=784, DAY_SECOND=201, 
		GEOMETRYCOLLECTIONFROMTEXT=707, REORGANIZE=457, MPOLYFROMWKB=775, ST_ENVELOPE=842, 
		INET6_ATON=723, RESUME=468, INT=172, MASTER_POS_WAIT=760, STATS_PERSISTENT=503, 
		NODEGROUP=413, PARTITIONING=430, BIT_AND=210, UTF16LE=602, ST_EXTERIORRING=844, 
		SUPER=565, COMMIT=277, MULTIPOINTFROMTEXT=778, DETERMINISTIC=41, SAVEPOINT=476, 
		UNTIL=528, USER=530, DISJOINT=686, MPOINTFROMWKB=773, CHARSET=657, MEDIUMBLOB=191, 
		CROSS=30, XML=544, SMALLINT=170, ENDPOINT=690, IPC=357, VALIDATE_PASSWORD_STRENGTH=909, 
		RAND=805, PURGE=112, TRIM=240, VAR_POP=222, MBRCONTAINS=761, TIME_FORMAT=894, 
		ARMSCII8=567, MINUS=933, DEFAULT_AUTH=293, EXTENT_SIZE=323, LINESTRINGFROMWKB=747, 
		EXPLAIN=52, BINLOG=257, HOUR_MINUTE=202, GEOMETRYCOLLECTION=622, STORAGE=507, 
		PARSER=428, POINTN=796, MEDIUM=398, USE_FRM=531, SEC_TO_TIME=813, MASTER_HEARTBEAT_PERIOD=375, 
		SUBPARTITIONS=511, MLINEFROMTEXT=769, TO_DAYS=898, GTID_SUBTRACT=720, 
		QUERY=446, FROM_BASE64=702, XOR=167, RELEASE_LOCK=807, ALTER=7, MONTHNAME=771, 
		EXPORT_SET=694, ST_NUMGEOMETRIES=866, ST_GEOMETRYN=852, SPACE=1, UPPER=906, 
		REPAIR=458, ABS=629, MASTER_SSL_CIPHER=386, ST_ASWKT=832, OCTET_LENGTH=788, 
		TINYINT=169, INTERVAL=72, ISO=548, ENGINE=309, MASTER_SSL_VERIFY_SERVER_CERT=92, 
		POWER=802, NDBCLUSTER=616, CONNECTION=283, COMPACT=278, CIPHER=269, COMMENT_INPUT=3, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=911, TWO_DECIMAL=952, VARBINARY=188, 
		SIMPLE=484, REPLICATE_WILD_IGNORE_TABLE=465, VARIABLES=535, ST_ASWKB=831, 
		ADD=5, LINEFROMTEXT=744, MBRINTERSECTS=764, ST_EQUALS=843, DEC8=578, PLUGIN_DIR=435, 
		ASCII=568, ELT=687, SQL_THREAD=499, GLENGTH=717, INDEX=67, FOUND=333, 
		EXTRACT=233, REPLICATE_DO_TABLE=460, CP1257=573, LATIN2=591, LATIN1=590, 
		IS_USED_LOCK=739, FIXED=330, ITERATE=75, CACHE=263, DES_ENCRYPT=684, LATIN7=593, 
		CP1251=571, END=307, CP1250=570, LATIN5=592, ST_STARTPOINT=879, ENCRYPT=689, 
		CP1256=572, GEOMFROMTEXT=713, PRESERVE=440, SQL_BUFFER_RESULT=496, LOAD=87, 
		TERMINATED=146, CRC32=669, BINARY=187, ASIN=637, JSON=360, ST_NUMINTERIORRINGS=868, 
		SOME=489, LAST_INSERT_ID=740, FOLLOWS=332, OUTER=107, INFILE=68, RENAME=119, 
		EXCLUSIVE=319, FILTER=328, MYSQL=406, IDENTIFIED=345, GRANT=60, MOD_ASSIGN=924, 
		USER_RESOURCES=532, SONAME=490, MASTER_LOG_FILE=377, CHAR_LENGTH=658, 
		DEFAULT=36, SLAVE=485, ST_POINTFROMTEXT=871, UNCOMPRESSED_LENGTH=902, 
		SQRT=823, JOIN=76, LOCK=88, EXPORT=321, TEXT=194, AVG_ROW_LENGTH=255, 
		SESSION_USER=814, UNHEX=903, MPOINTFROMTEXT=772, CURTIME=230, AGGREGATE=247, 
		ELSE=46, DAYNAME=677, BIT_NOT_OP=940, LANGUAGE=362, ENUM=197, ST_LINEFROMWKB=863, 
		CREATE_DIGEST=673, TO_BASE64=897, AES_ENCRYPT=634, BUFFER=652, ST_BUFFER=833, 
		BENCHMARK=648, UTF16=601, MUTEX=405, CONNECTION_ID=664, DATEDIFF=675, 
		BIT_COUNT=650, MEDIUMTEXT=195, NDB=615, SYSTEM_USER=889, MAX_UPDATES_PER_HOUR=396, 
		LINEFROMWKB=745, RIGHT=126, FILE=561, CONCURRENT=282, ST_LINESTRINGFROMTEXT=864, 
		DUMPFILE=302, FETCH=54, STARTING=143, NUMERIC=179, REVOKE=125, AT_SIGN=949, 
		COMPRESSED=280, LINESTRING=623, COS=667, COT=668, SQLEXCEPTION=136, DYNAMIC=304, 
		INTERSECTS=729, CHAIN=265, RR_BRACKET=946, LOCATE=750, ALL=6, THAN=518, 
		CPU=289, HOST=343, MACCE=594, VALUE=534, LOGS=370, X509=542, SERIALIZABLE=621, 
		AUTO_INCREMENT=254, LOGFILE=369, ROW_FORMAT=475, MINUTE_MICROSECOND=206, 
		ST_POLYGONFROMWKB=877, SWAPS=513, MINUTE=554, SIGN=818, TINYTEXT=193, 
		DESCRIBE=40, EUR=545, INNODB=611, IO_THREAD=356, TRUE=151, SQL_THREAD_WAIT_AFTER_GTIDS=822, 
		TABLESPACE=515, LOG2=753, UTC_TIME=242, MODULE=930, ASYMMETRIC_DERIVE=642, 
		PASSWORD=432, AND=9, ROW=473, ST_INTERIORRINGN=856, CURRENT_DATE=225, 
		REPLICATE_IGNORE_DB=461, DISK=300, NULL_LITERAL=99, RANGE=113, FAULTS=325, 
		PLUS=931, GTID_SUBSET=719, DIV_ASSIGN=923, HOUR=553, CONCAT=662, ROUND=809, 
		UCASE=900, EUCKR=580, ANY=249, NATURAL=96, POLYGONFROMTEXT=799, PHASE=433, 
		PROFILE=443, KEYS=78, NUMINTERIORRINGS=785, READS=115, DATE_ADD=231, LINESTRINGFROMTEXT=746, 
		CSV=609, BIT_AND_OP=942, MPOLYFROMTEXT=774, CODE=273, PLUGINS=436, ADDDATE=631, 
		FIND_IN_SET=698, GEOMETRYTYPE=712, COLUMN_FORMAT=275, EXP=693, MASTER_SSL=382, 
		MATCH=93, INET_NTOA=726, CONVERT_TZ=666, ELSEIF=47, CHECKSUM=268, INSTALL=352, 
		MONTH=551, PRECEDES=438, NEVER=410, AFTER=246, CLOSE=271, OWNER=425, INTERNAL=549, 
		CENTROID=655, MBREQUAL=763, VALIDATION=533, ST_INTERSECTS=858, ST_WITHIN=883, 
		STARTS=501, LINE_COMMENT=4, AUTOEXTEND_SIZE=253, CHANNEL=267, FULLTEXT=59, 
		SOURCE=492, IGNORE_SERVER_IDS=346, POW=801, CONDITION=25, THEN=147, UNLOCK=155, 
		INTO=73, REPEAT=120, MICROSECOND=557, ASYMMETRIC_SIGN=644, UNDO_BUFFER_SIZE=525, 
		ASC=11, DELETE=38, MEMORY=612, ST_POLYGONFROMTEXT=876, ST_NUMINTERIORRING=867, 
		ST_CENTROID=834, PROCEDURE=111, STDDEV_POP=219, ANALYZE=8, MINUS_ASSIGN=921, 
		SQL_AFTER_GTIDS=493, OPEN=422, NO_WRITE_TO_BINLOG=98, STAR=928, STRING=508, 
		LOOP=89, HIGH_PRIORITY=63, DESC=39, RELAYLOG=455, SQL_BEFORE_GTIDS=495, 
		CP850=574, OR_ASSIGN=927, CP852=575, ZERO_DECIMAL=950, LONGTEXT=196, DATABASES=34, 
		MULT_ASSIGN=922, BOOLEAN=261, NOT=97, AVG=209, HEXADECIMAL_LITERAL=962, 
		MULTILINESTRING=624, LOWER=754, NOW=235, MBROVERLAPS=765, BIT_OR=211, 
		MINUTE_SECOND=204, HAVING=62, CP866=576, CHARSET_REVERSE_QOUTE_STRING=957, 
		SQLSTATE=137, INET_ATON=725, PROXY=445, STATS_SAMPLE_PAGES=504, DROP=44, 
		RETURN=124, FOREIGN=57, SUBSTRING_INDEX=887, RELAY=452, SQL_SMALL_RESULT=141, 
		GEOMCOLLFROMTEXT=705, CONTRIBUTORS=287, MULTIPOINTFROMWKB=779, POLYGONFROMWKB=800, 
		DAYOFMONTH=678, RANDOM_BYTES=806, INSTR=727, PERIOD_ADD=791, PARTIAL=429, 
		MEDIUMINT=171, ESCAPE=313, MASTER_AUTO_POSITION=372, UTF32=603, JIS=547, 
		HEX=721, LINEAR=85, IS_IPV4_MAPPED=737, SQL_AFTER_MTS_GAPS=494, GEOMETRYN=711, 
		LOCALTIMESTAMP=234, FROM_UNIXTIME=704, TABLE=145, QUARTER=550, DEFINER=294, 
		CREATE_DH_PARAMETERS=672, NONE=414, PROCESSLIST=442, STRCMP=826, ST_POINTFROMWKB=872, 
		INSERT_METHOD=351, ST_GEOMETRYTYPE=853, EXTENDED=322, LOG=751, FILESIZE_LITERAL=958, 
		OPTION=102, ATAN2=647, ENCLOSED=48, ST_UNION=882, LEVEL=366, CONV=665, 
		TIMESTAMPADD=892, TINYBLOB=189, GET_FORMAT=715, PREPARE=439, CHECK=22, 
		WITHOUT=539, WORK=540, HANDLER=340, ST_GEOMETRYFROMTEXT=850, INITIAL_SIZE=349, 
		RELAY_LOG_FILE=453, DATE_FORMAT=676, DAY_HOUR=199, SEMI=948, MRG_MYISAM=613, 
		IMPORT=347, MAKE_SET=759, IS_FREE_LOCK=734, VALUES=161, IS_IPV6=738, DOUBLE=176, 
		IS_IPV4=735, GEOSTD8=583, HELP=342, UPDATEXML=905, SOUNDS=491, COPY=288, 
		SESSION=480, STRING_CHARSET_NAME=966, SQL_NO_CACHE=498, FROM_DAYS=703, 
		EXECUTE=560, SWITCHES=514, ST_CROSSES=836, PACK_KEYS=426, VERSION=910, 
		DOT_ID=967, GROUP_CONCAT=214, DAY=552, BLOB=190, REPLICATE_DO_DB=459, 
		EVENTS=316, ONLY=421, FROM=58, MASTER_SSL_CRL=387, MAKEDATE=757, BIT_STRING=965, 
		TIME_TO_SEC=895, SUBTIME=888, BIT_XOR_OP=943, SCHEDULE=477, GB2312=581, 
		SRID=824, MASTER_LOG_POS=378, HOUR_MICROSECOND=207, SEPARATOR=132, DAY_MICROSECOND=208, 
		MULTIPOINT=625, BLOCK=259, OPTIMIZER_COSTS=423, ASYMMETRIC_DECRYPT=641, 
		UTF8MB3=605, DATE=180, ROLLUP=471, SPEC_MYSQL_COMMENT=2, UTC_TIMESTAMP=243, 
		UTF8MB4=606, LIKE=83, ZEROFILL=168, DATA=290, REPLICATE_WILD_DO_TABLE=464, 
		UTF8=604, INSERT=71, YEAR_MONTH=198, OFFLINE=415, ATAN=646, MASTER_HOST=376, 
		INOUT=70, VAR_SAMP=223, GROUP_REPLICATION=339, SCHEMAS=129, COLON_SYMB=956, 
		ALGORITHM=248, LIMIT=84, ST_LINESTRINGFROMWKB=865, ST_GEOMCOLLFROMTXT=846, 
		WEEK=555, RTRIM=812, MASTER_SSL_CRLPATH=388, CASCADED=264, PLUGIN=434, 
		BEFORE=12, DECLARE=35, ISSUER=359, WHILE=164, STRING_LITERAL=960, ASTEXT=638;
	public static final String[] tokenNames = {
		"<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
		"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
		"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
		"DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
		"ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
		"FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
		"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
		"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", "OPTIMIZE", 
		"OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
		"PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
		"REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
		"SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", 
		"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
		"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
		"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", 
		"ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", 
		"REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
		"DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", 
		"BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
		"ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
		"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
		"HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
		"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", 
		"STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", 
		"DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
		"SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
		"ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
		"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
		"BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", 
		"CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
		"COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
		"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
		"GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
		"IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
		"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
		"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
		"MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", 
		"ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
		"ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "':='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
		"'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", 
		"'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", 
		"'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'", "CHARSET_REVERSE_QOUTE_STRING", 
		"FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
		"DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", 
		"BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
		"STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_startTransaction = 126, 
		RULE_beginWork = 127, RULE_commitWork = 128, RULE_rollbackWork = 129, 
		RULE_savepointStatement = 130, RULE_rollbackStatement = 131, RULE_releaseStatement = 132, 
		RULE_lockTables = 133, RULE_unlockTables = 134, RULE_setAutocommitStatement = 135, 
		RULE_setTransactionStatement = 136, RULE_transactionMode = 137, RULE_lockTableElement = 138, 
		RULE_lockAction = 139, RULE_transactionOption = 140, RULE_transactionLevel = 141, 
		RULE_changeMaster = 142, RULE_changeReplicationFilter = 143, RULE_purgeBinaryLogs = 144, 
		RULE_resetMaster = 145, RULE_resetSlave = 146, RULE_startSlave = 147, 
		RULE_stopSlave = 148, RULE_startGroupReplication = 149, RULE_stopGroupReplication = 150, 
		RULE_masterOption = 151, RULE_stringMasterOption = 152, RULE_decimalMasterOption = 153, 
		RULE_boolMasterOption = 154, RULE_channelOption = 155, RULE_replicationFilter = 156, 
		RULE_tablePair = 157, RULE_threadType = 158, RULE_untilOption = 159, RULE_connectionOption = 160, 
		RULE_gtuidSet = 161, RULE_xaStartTransaction = 162, RULE_xaEndTransaction = 163, 
		RULE_xaPrepareStatement = 164, RULE_xaCommitWork = 165, RULE_xaRollbackWork = 166, 
		RULE_xaRecoverWork = 167, RULE_prepareStatement = 168, RULE_executeStatement = 169, 
		RULE_deallocatePrepare = 170, RULE_routineBody = 171, RULE_blockStatement = 172, 
		RULE_caseStatement = 173, RULE_ifStatement = 174, RULE_iterateStatement = 175, 
		RULE_leaveStatement = 176, RULE_loopStatement = 177, RULE_repeatStatement = 178, 
		RULE_returnStatement = 179, RULE_whileStatement = 180, RULE_cursorStatement = 181, 
		RULE_declareVariable = 182, RULE_declareCondition = 183, RULE_declareCursor = 184, 
		RULE_declareHandler = 185, RULE_handlerConditionValue = 186, RULE_procedureSqlStatement = 187, 
		RULE_caseAlternative = 188, RULE_elifAlternative = 189, RULE_alterUser = 190, 
		RULE_createUser = 191, RULE_dropUser = 192, RULE_grantStatement = 193, 
		RULE_grantProxy = 194, RULE_renameUser = 195, RULE_revokeStatement = 196, 
		RULE_revokeProxy = 197, RULE_setPasswordStatement = 198, RULE_userSpecification = 199, 
		RULE_userAuthOption = 200, RULE_tlsOption = 201, RULE_userResourceOption = 202, 
		RULE_userPasswordOption = 203, RULE_userLockOption = 204, RULE_privelegeClause = 205, 
		RULE_privilege = 206, RULE_privilegeLevel = 207, RULE_renameUserClause = 208, 
		RULE_analyzeTable = 209, RULE_checkTable = 210, RULE_checksumTable = 211, 
		RULE_optimizeTable = 212, RULE_repairTable = 213, RULE_checkTableOption = 214, 
		RULE_createUdfunction = 215, RULE_installPlugin = 216, RULE_uninstallPlugin = 217, 
		RULE_setStatement = 218, RULE_showStatement = 219, RULE_variableClause = 220, 
		RULE_showCommonEntity = 221, RULE_showFilter = 222, RULE_showGlobalInfoClause = 223, 
		RULE_showSchemaEntity = 224, RULE_showProfileType = 225, RULE_binlogStatement = 226, 
		RULE_cacheIndexStatement = 227, RULE_flushStatement = 228, RULE_killStatement = 229, 
		RULE_loadIndexIntoCache = 230, RULE_resetStatement = 231, RULE_shutdownStatement = 232, 
		RULE_tableIndexes = 233, RULE_flushOption = 234, RULE_flushTableOption = 235, 
		RULE_loadedTableIndexes = 236, RULE_simpleDescribeStatement = 237, RULE_fullDescribeStatement = 238, 
		RULE_helpStatement = 239, RULE_useStatement = 240, RULE_describeObjectClause = 241, 
		RULE_fullId = 242, RULE_tableName = 243, RULE_fullColumnName = 244, RULE_indexColumnName = 245, 
		RULE_userName = 246, RULE_mysqlVariable = 247, RULE_charsetName = 248, 
		RULE_collationName = 249, RULE_engineName = 250, RULE_uuidSet = 251, RULE_xid = 252, 
		RULE_xuidStringId = 253, RULE_authPlugin = 254, RULE_uid = 255, RULE_simpleId = 256, 
		RULE_dottedId = 257, RULE_decimalLiteral = 258, RULE_fileSizeLiteral = 259, 
		RULE_stringLiteral = 260, RULE_booleanLiteral = 261, RULE_hexadecimalLiteral = 262, 
		RULE_nullNotnull = 263, RULE_constant = 264, RULE_dataType = 265, RULE_convertedDataType = 266, 
		RULE_lengthOneDimension = 267, RULE_lengthTwoDimension = 268, RULE_lengthTwoOptionalDimension = 269, 
		RULE_uidList = 270, RULE_tables = 271, RULE_indexColumnNames = 272, RULE_expressions = 273, 
		RULE_expressionsWithDefaults = 274, RULE_constants = 275, RULE_simpleStrings = 276, 
		RULE_userVariables = 277, RULE_defaultValue = 278, RULE_expressionOrDefault = 279, 
		RULE_ifExists = 280, RULE_ifNotExists = 281, RULE_functionCall = 282, 
		RULE_specificFunction = 283, RULE_caseFuncAlternative = 284, RULE_levelsInWeightString = 285, 
		RULE_levelInWeightListElement = 286, RULE_aggregateWindowedFunction = 287, 
		RULE_scalarFunctionName = 288, RULE_passwordFunctionClause = 289, RULE_functionArgs = 290, 
		RULE_functionArg = 291, RULE_expression = 292, RULE_predicate = 293, RULE_expressionAtom = 294, 
		RULE_unaryOperator = 295, RULE_comparisonOperator = 296, RULE_logicalOperator = 297, 
		RULE_bitOperator = 298, RULE_mathOperator = 299, RULE_charsetNameBase = 300, 
		RULE_transactionLevelBase = 301, RULE_privilegesBase = 302, RULE_intervalTypeBase = 303, 
		RULE_dataTypeBase = 304, RULE_keywordsCanBeId = 305, RULE_functionNameBase = 306;
	public static final String[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
		"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
		"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
		"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", 
		"setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
		"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
		"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
		"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
		"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "expressionOrDefault", 
		"ifExists", "ifNotExists", "functionCall", "specificFunction", "caseFuncAlternative", 
		"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
		"scalarFunctionName", "passwordFunctionClause", "functionArgs", "functionArg", 
		"expression", "predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "mathOperator", "charsetNameBase", "transactionLevelBase", 
		"privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
		"functionNameBase"
	};

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(MySqlParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(615);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN) | (1L << GRANT))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (KILL - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPLACE - 71)) | (1L << (REVOKE - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (BEGIN - 256)) | (1L << (BINLOG - 256)) | (1L << (CACHE - 256)) | (1L << (CHECKSUM - 256)) | (1L << (COMMIT - 256)) | (1L << (DEALLOCATE - 256)) | (1L << (DO - 256)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (FLUSH - 331)) | (1L << (HANDLER - 331)) | (1L << (HELP - 331)) | (1L << (INSTALL - 331)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (PREPARE - 439)) | (1L << (REPAIR - 439)) | (1L << (RESET - 439)) | (1L << (ROLLBACK - 439)) | (1L << (SAVEPOINT - 439)) | (1L << (START - 439)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (STOP - 506)) | (1L << (TRUNCATE - 506)) | (1L << (UNINSTALL - 506)) | (1L << (XA - 506)) | (1L << (EXECUTE - 506)) | (1L << (SHUTDOWN - 506)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(614); sqlStatements();
				}
			}

			setState(618);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(617); match(MINUSMINUS);
				}
			}

			setState(620); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List value;
		public SqlStatementContext s;
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(MySqlParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(MySqlParser.MINUSMINUS, i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		 ((SqlStatementsContext)_localctx).value =  new ArrayList(); 
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(632);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(630);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(622); ((SqlStatementsContext)_localctx).s = sqlStatement();
						_localctx.value.add(((SqlStatementsContext)_localctx).s.value);
						setState(625);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(624); match(MINUSMINUS);
							}
						}

						setState(627); match(SEMI);
						}
						break;
					case SEMI:
						{
						setState(629); emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(634);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			}
			setState(644);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(635); ((SqlStatementsContext)_localctx).s = sqlStatement();
				_localctx.value.add(((SqlStatementsContext)_localctx).s.value);
				setState(641);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(638);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(637); match(MINUSMINUS);
						}
					}

					setState(640); match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(643); emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public AST value;
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(653);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(646); ddlStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(647); dmlStatement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(648); transactionStatement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(649); replicationStatement();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(650); preparedStatement();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(651); administrationStatement();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(652); utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(655); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(692);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(657); createDatabase();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(658); createEvent();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(659); createIndex();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(660); createLogfileGroup();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(661); createProcedure();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(662); createFunction();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(663); createServer();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(664); createTable();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(665); createTablespaceInnodb();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(666); createTablespaceNdb();
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(667); createTrigger();
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(668); createView();
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(669); alterDatabase();
				}
				break;

			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(670); alterEvent();
				}
				break;

			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(671); alterFunction();
				}
				break;

			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(672); alterInstance();
				}
				break;

			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(673); alterLogfileGroup();
				}
				break;

			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(674); alterProcedure();
				}
				break;

			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(675); alterServer();
				}
				break;

			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(676); alterTable();
				}
				break;

			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(677); alterTablespace();
				}
				break;

			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(678); alterView();
				}
				break;

			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(679); dropDatabase();
				}
				break;

			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(680); dropEvent();
				}
				break;

			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(681); dropIndex();
				}
				break;

			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(682); dropLogfileGroup();
				}
				break;

			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(683); dropProcedure();
				}
				break;

			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(684); dropFunction();
				}
				break;

			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(685); dropServer();
				}
				break;

			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(686); dropTable();
				}
				break;

			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(687); dropTablespace();
				}
				break;

			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(688); dropTrigger();
				}
				break;

			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(689); dropView();
				}
				break;

			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(690); renameTable();
				}
				break;

			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(691); truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(704);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(694); selectStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(695); insertStatement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(696); updateStatement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(697); deleteStatement();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(698); replaceStatement();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(699); callStatement();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(700); loadDataStatement();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(701); loadXmlStatement();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(702); doStatement();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(703); handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionStatement(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(715);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(706); startTransaction();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(707); beginWork();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(708); commitWork();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(709); rollbackWork();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(710); savepointStatement();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(711); rollbackStatement();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(712); releaseStatement();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(713); lockTables();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(714); unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplicationStatement(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(732);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(717); changeMaster();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(718); changeReplicationFilter();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(719); purgeBinaryLogs();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(720); resetMaster();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(721); resetSlave();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(722); startSlave();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(723); stopSlave();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(724); startGroupReplication();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(725); stopGroupReplication();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(726); xaStartTransaction();
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(727); xaEndTransaction();
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(728); xaPrepareStatement();
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(729); xaCommitWork();
				}
				break;

			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(730); xaRollbackWork();
				}
				break;

			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(731); xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreparedStatement(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(737);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(734); prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(735); executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(736); deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(749);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(739); blockStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(740); caseStatement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(741); ifStatement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(742); leaveStatement();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(743); loopStatement();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(744); repeatStatement();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(745); whileStatement();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(746); iterateStatement();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(747); returnStatement();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(748); cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministrationStatement(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(776);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(751); alterUser();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(752); createUser();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(753); dropUser();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(754); grantStatement();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(755); grantProxy();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(756); renameUser();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(757); revokeStatement();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(758); revokeProxy();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(759); analyzeTable();
				}
				break;

			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(760); checkTable();
				}
				break;

			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(761); checksumTable();
				}
				break;

			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(762); optimizeTable();
				}
				break;

			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(763); repairTable();
				}
				break;

			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(764); createUdfunction();
				}
				break;

			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(765); installPlugin();
				}
				break;

			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(766); uninstallPlugin();
				}
				break;

			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(767); setStatement();
				}
				break;

			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(768); showStatement();
				}
				break;

			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(769); binlogStatement();
				}
				break;

			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(770); cacheIndexStatement();
				}
				break;

			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(771); flushStatement();
				}
				break;

			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(772); killStatement();
				}
				break;

			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(773); loadIndexIntoCache();
				}
				break;

			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(774); resetStatement();
				}
				break;

			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(775); shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtilityStatement(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(782);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(778); simpleDescribeStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(779); fullDescribeStatement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(780); helpStatement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(781); useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(784); match(CREATE);
			setState(785);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(787);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(786); ifNotExists();
				}
			}

			setState(789); uid();
			setState(793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(790); createDatabaseOption();
				}
				}
				setState(795);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateEvent(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(796); match(CREATE);
			setState(798);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(797); ownerStatement();
				}
			}

			setState(800); match(EVENT);
			setState(802);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(801); ifNotExists();
				}
			}

			setState(804); fullId();
			setState(805); match(ON);
			setState(806); match(SCHEDULE);
			setState(807); scheduleExpression();
			setState(814);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(808); match(ON);
				setState(809); match(COMPLETION);
				setState(811);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(810); match(NOT);
					}
				}

				setState(813); match(PRESERVE);
				}
			}

			setState(817);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(816); enableType();
				}
			}

			setState(821);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(819); match(COMMENT);
				setState(820); match(STRING_LITERAL);
				}
			}

			setState(823); match(DO);
			setState(824); routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(826); match(CREATE);
			setState(828);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(827);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(831);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(830);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(833); match(INDEX);
			setState(834); uid();
			setState(836);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(835); indexType();
				}
			}

			setState(838); match(ON);
			setState(839); tableName();
			setState(840); indexColumnNames();
			setState(844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
				{
				{
				setState(841); indexOption();
				}
				}
				setState(846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(857);
			switch (_input.LA(1)) {
			case ALGORITHM:
				{
				setState(847); match(ALGORITHM);
				setState(849);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(848); match(EQUAL_SYMBOL);
					}
				}

				setState(851);
				((CreateIndexContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case LOCK:
				{
				setState(852); match(LOCK);
				setState(854);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(853); match(EQUAL_SYMBOL);
					}
				}

				setState(856);
				((CreateIndexContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case EOF:
			case MINUSMINUS:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateLogfileGroup(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(859); match(CREATE);
			setState(860); match(LOGFILE);
			setState(861); match(GROUP);
			setState(862); uid();
			setState(863); match(ADD);
			setState(864); match(UNDOFILE);
			setState(865); ((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(871);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(866); match(INITIAL_SIZE);
				setState(868);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(867); match(EQUAL_SYMBOL);
					}
				}

				setState(870); ((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(878);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(873); match(UNDO_BUFFER_SIZE);
				setState(875);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(874); match(EQUAL_SYMBOL);
					}
				}

				setState(877); ((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(885);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(880); match(REDO_BUFFER_SIZE);
				setState(882);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(881); match(EQUAL_SYMBOL);
					}
				}

				setState(884); ((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(892);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(887); match(NODEGROUP);
				setState(889);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(888); match(EQUAL_SYMBOL);
					}
				}

				setState(891); uid();
				}
			}

			setState(895);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(894); match(WAIT);
				}
			}

			setState(902);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(897); match(COMMENT);
				setState(899);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(898); match(EQUAL_SYMBOL);
					}
				}

				setState(901); ((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(904); match(ENGINE);
			setState(906);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(905); match(EQUAL_SYMBOL);
				}
			}

			setState(908); engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateProcedure(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(910); match(CREATE);
			setState(912);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(911); ownerStatement();
				}
			}

			setState(914); match(PROCEDURE);
			setState(915); fullId();
			setState(916); match(LR_BRACKET);
			setState(918);
			_la = _input.LA(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) {
				{
				setState(917); procedureParameter();
				}
			}

			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(920); match(COMMA);
				setState(921); procedureParameter();
				}
				}
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(927); match(RR_BRACKET);
			setState(931);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(928); routineOption();
					}
					} 
				}
				setState(933);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			}
			setState(934); routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateFunction(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(936); match(CREATE);
			setState(938);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(937); ownerStatement();
				}
			}

			setState(940); match(FUNCTION);
			setState(941); fullId();
			setState(942); match(LR_BRACKET);
			setState(944);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(943); functionParameter();
				}
			}

			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(946); match(COMMA);
				setState(947); functionParameter();
				}
				}
				setState(952);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(953); match(RR_BRACKET);
			setState(954); match(RETURNS);
			setState(955); dataType();
			setState(959);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(956); routineOption();
					}
					} 
				}
				setState(961);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			setState(962); routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateServer(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(964); match(CREATE);
			setState(965); match(SERVER);
			setState(966); uid();
			setState(967); match(FOREIGN);
			setState(968); match(DATA);
			setState(969); match(WRAPPER);
			setState(970);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(971); match(OPTIONS);
			setState(972); match(LR_BRACKET);
			setState(973); serverOption();
			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(974); match(COMMA);
				setState(975); serverOption();
				}
				}
				setState(980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(981); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTable value;
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext t;
		public TableNameContext parenthesisTable;
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TableNameContext t;
		public CreateDefinitionsContext def;
		public TableOptionContext to;
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public TableNameContext t;
		public CreateDefinitionsContext def;
		public TableOptionContext to;
		public Token keyViolate;
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		 ((CreateTableContext)_localctx).value =  new CreateTable();  
		int _la;
		try {
			setState(1089);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(983); match(CREATE);
				setState(986);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(984); match(TEMPORARY);
					 _localctx.value.markAsTemporary(); 
					}
				}

				setState(988); match(TABLE);
				setState(992);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(989); ifNotExists();
					_localctx.value.markAsIfNotExists();
					}
				}

				setState(994); tableName();
				setState(1005);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(995); match(LIKE);
					setState(996); ((CopyCreateTableContext)_localctx).t = tableName();
					 _localctx.value.setName(((CopyCreateTableContext)_localctx).t.value); 
					}
					break;
				case LR_BRACKET:
					{
					setState(999); match(LR_BRACKET);
					setState(1000); match(LIKE);
					setState(1001); ((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					 _localctx.value.setName(((CopyCreateTableContext)_localctx).parenthesisTable.value); 
					setState(1003); match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				  _localctx.value.markAsCopy();  
				}
				break;

			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1009); match(CREATE);
				setState(1012);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1010); match(TEMPORARY);
					 _localctx.value.markAsTemporary(); 
					}
				}

				setState(1014); match(TABLE);
				setState(1018);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1015); ifNotExists();
					_localctx.value.markAsIfNotExists();
					}
				}

				setState(1020); ((QueryCreateTableContext)_localctx).t = tableName();
				 _localctx.value.setName(((QueryCreateTableContext)_localctx).t.value); 
				setState(1025);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1022); ((QueryCreateTableContext)_localctx).def = createDefinitions();
					_localctx.value.setCreateDefinitionList(((QueryCreateTableContext)_localctx).def.value);
					}
					break;
				}
				setState(1040);
				_la = _input.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET) {
					{
					setState(1027); ((QueryCreateTableContext)_localctx).to = tableOption();
					 _localctx.value.addTableOption(((QueryCreateTableContext)_localctx).to.value); 
					setState(1037);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1030);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1029); match(COMMA);
							}
						}

						setState(1032); ((QueryCreateTableContext)_localctx).to = tableOption();
						  _localctx.value.addTableOption(((QueryCreateTableContext)_localctx).to.value); 
						}
						}
						setState(1039);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1043);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1042); partitionDefinitions();
					}
				}

				setState(1046);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1045);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1049);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1048); match(AS);
					}
				}

				setState(1051); selectStatement();
				  _localctx.value.markAsQuery();  
				}
				break;

			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1054); match(CREATE);
				setState(1057);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1055); match(TEMPORARY);
					 _localctx.value.markAsTemporary(); 
					}
				}

				setState(1059); match(TABLE);
				setState(1063);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1060); ifNotExists();
					_localctx.value.markAsIfNotExists();
					}
				}

				setState(1065); ((ColumnCreateTableContext)_localctx).t = tableName();
				 _localctx.value.setName(((ColumnCreateTableContext)_localctx).t.value); 
				setState(1067); ((ColumnCreateTableContext)_localctx).def = createDefinitions();
				 _localctx.value.setCreateDefinitionList(((ColumnCreateTableContext)_localctx).def.value); 
				setState(1082);
				_la = _input.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET) {
					{
					setState(1069); ((ColumnCreateTableContext)_localctx).to = tableOption();
					 _localctx.value.addTableOption(((ColumnCreateTableContext)_localctx).to.value); 
					setState(1079);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1072);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1071); match(COMMA);
							}
						}

						setState(1074); ((ColumnCreateTableContext)_localctx).to = tableOption();
						 _localctx.value.addTableOption(((ColumnCreateTableContext)_localctx).to.value);  
						}
						}
						setState(1081);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1085);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1084); partitionDefinitions();
					}
				}

				  _localctx.value.markAsColumn();  
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1091); match(CREATE);
			setState(1092); match(TABLESPACE);
			setState(1093); uid();
			setState(1094); match(ADD);
			setState(1095); match(DATAFILE);
			setState(1096); ((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1100);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1097); match(FILE_BLOCK_SIZE);
				setState(1098); match(EQUAL_SYMBOL);
				setState(1099); ((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1107);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1102); match(ENGINE);
				setState(1104);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1103); match(EQUAL_SYMBOL);
					}
				}

				setState(1106); engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1109); match(CREATE);
			setState(1110); match(TABLESPACE);
			setState(1111); uid();
			setState(1112); match(ADD);
			setState(1113); match(DATAFILE);
			setState(1114); ((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1115); match(USE);
			setState(1116); match(LOGFILE);
			setState(1117); match(GROUP);
			setState(1118); uid();
			setState(1124);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1119); match(EXTENT_SIZE);
				setState(1121);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1120); match(EQUAL_SYMBOL);
					}
				}

				setState(1123); ((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1131);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1126); match(INITIAL_SIZE);
				setState(1128);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1127); match(EQUAL_SYMBOL);
					}
				}

				setState(1130); ((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1138);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1133); match(AUTOEXTEND_SIZE);
				setState(1135);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1134); match(EQUAL_SYMBOL);
					}
				}

				setState(1137); ((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1145);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1140); match(MAX_SIZE);
				setState(1142);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1141); match(EQUAL_SYMBOL);
					}
				}

				setState(1144); ((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1152);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1147); match(NODEGROUP);
				setState(1149);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1148); match(EQUAL_SYMBOL);
					}
				}

				setState(1151); uid();
				}
			}

			setState(1155);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1154); match(WAIT);
				}
			}

			setState(1162);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1157); match(COMMENT);
				setState(1159);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1158); match(EQUAL_SYMBOL);
					}
				}

				setState(1161); ((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1164); match(ENGINE);
			setState(1166);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1165); match(EQUAL_SYMBOL);
				}
			}

			setState(1168); engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTrigger(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1170); match(CREATE);
			setState(1172);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1171); ownerStatement();
				}
			}

			setState(1174); match(TRIGGER);
			setState(1175); ((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1176);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1177);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1178); match(ON);
			setState(1179); tableName();
			setState(1180); match(FOR);
			setState(1181); match(EACH);
			setState(1182); match(ROW);
			setState(1185);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1183);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(1184); ((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1187); routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1189); match(CREATE);
			setState(1192);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1190); match(OR);
				setState(1191); match(REPLACE);
				}
			}

			setState(1197);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1194); match(ALGORITHM);
				setState(1195); match(EQUAL_SYMBOL);
				setState(1196);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1200);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1199); ownerStatement();
				}
			}

			setState(1205);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1202); match(SQL);
				setState(1203); match(SECURITY);
				setState(1204);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1207); match(VIEW);
			setState(1208); fullId();
			setState(1213);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1209); match(LR_BRACKET);
				setState(1210); uidList();
				setState(1211); match(RR_BRACKET);
				}
			}

			setState(1215); match(AS);
			setState(1216); selectStatement();
			setState(1223);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1217); match(WITH);
				setState(1219);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1218);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1221); match(CHECK);
				setState(1222); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabaseOption(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1242);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1226);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1225); match(DEFAULT);
					}
				}

				setState(1228); match(CHARACTER);
				setState(1229); match(SET);
				setState(1231);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1230); match(EQUAL_SYMBOL);
					}
				}

				setState(1233); charsetName();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1235);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1234); match(DEFAULT);
					}
				}

				setState(1237); match(COLLATE);
				setState(1239);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1238); match(EQUAL_SYMBOL);
					}
				}

				setState(1241); collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwnerStatement(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1244); match(DEFINER);
			setState(1245); match(EQUAL_SYMBOL);
			setState(1252);
			switch (_input.LA(1)) {
			case ID:
			case STRING_USER_NAME:
				{
				setState(1246); userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1247); match(CURRENT_USER);
				setState(1250);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1248); match(LR_BRACKET);
					setState(1249); match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext start;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext end;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1288);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1254); match(AT);
				setState(1255); timestampValue();
				setState(1259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1256); intervalExpr();
					}
					}
					setState(1261);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1262); match(EVERY);
				setState(1265);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(1263); decimalLiteral();
					}
					break;

				case 2:
					{
					setState(1264); expression(0);
					}
					break;
				}
				setState(1267); intervalType();
				setState(1276);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1268); match(STARTS);
					setState(1269); ((IntervalScheduleContext)_localctx).start = timestampValue();
					setState(1273);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1270); ((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1275);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1286);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1278); match(ENDS);
					setState(1279); ((IntervalScheduleContext)_localctx).end = timestampValue();
					setState(1283);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1280); ((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1285);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1294);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1290); match(CURRENT_TIMESTAMP);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1291); stringLiteral();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1292); decimalLiteral();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1293); expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296); match(PLUS);
			setState(1297); match(INTERVAL);
			setState(1300);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1298); decimalLiteral();
				}
				break;

			case 2:
				{
				setState(1299); expression(0);
				}
				break;
			}
			setState(1302); intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1317);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1304); intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1305); match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1306); match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1307); match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1308); match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1309); match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1310); match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1311); match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1312); match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1313); match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1314); match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1315); match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1316); match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1324);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1319); match(ENABLE);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1320); match(DISABLE);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1321); match(DISABLE);
				setState(1322); match(ON);
				setState(1323); match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1326); match(USING);
			setState(1327);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1340);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1329); match(KEY_BLOCK_SIZE);
				setState(1331);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1330); match(EQUAL_SYMBOL);
					}
				}

				setState(1333); fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1334); indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1335); match(WITH);
				setState(1336); match(PARSER);
				setState(1337); uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1338); match(COMMENT);
				setState(1339); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			((ProcedureParameterContext)_localctx).direction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) ) {
				((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1343); uid();
			setState(1344); dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1346); uid();
			setState(1347); dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1372);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1349); match(COMMENT);
				setState(1350); match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1351); match(LANGUAGE);
				setState(1352); match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1354);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1353); match(NOT);
					}
				}

				setState(1356); match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1367);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1357); match(CONTAINS);
					setState(1358); match(SQL);
					}
					break;
				case NO:
					{
					setState(1359); match(NO);
					setState(1360); match(SQL);
					}
					break;
				case READS:
					{
					setState(1361); match(READS);
					setState(1362); match(SQL);
					setState(1363); match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1364); match(MODIFIES);
					setState(1365); match(SQL);
					setState(1366); match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1369); match(SQL);
				setState(1370); match(SECURITY);
				setState(1371);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1388);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1374); match(HOST);
				setState(1375); match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1376); match(DATABASE);
				setState(1377); match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1378); match(USER);
				setState(1379); match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1380); match(PASSWORD);
				setState(1381); match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1382); match(SOCKET);
				setState(1383); match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1384); match(OWNER);
				setState(1385); match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1386); match(PORT);
				setState(1387); decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public List value;
		public CreateDefinitionContext def1;
		public CreateDefinitionContext def2;
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		 ((CreateDefinitionsContext)_localctx).value =  new ArrayList();  
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390); match(LR_BRACKET);
			setState(1391); ((CreateDefinitionsContext)_localctx).def1 = createDefinition();
			 _localctx.value.add(((CreateDefinitionsContext)_localctx).def1.value); 
			setState(1399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1393); match(COMMA);
				setState(1394); ((CreateDefinitionsContext)_localctx).def2 = createDefinition();
				 _localctx.value.add(((CreateDefinitionsContext)_localctx).def2.value); 
				}
				}
				setState(1401);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1402); match(RR_BRACKET);
			 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinition value;
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext u;
		public ColumnDefinitionContext c;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext c;
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext c;
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		 ((CreateDefinitionContext)_localctx).value =  new CreateDefinition(); 
		try {
			setState(1415);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1405); ((ColumnDeclarationContext)_localctx).u = uid();
				setState(1406); ((ColumnDeclarationContext)_localctx).c = columnDefinition();
				 _localctx.value.markAsColumnDef(); _localctx.value.setAst(((ColumnDeclarationContext)_localctx).c.value); _localctx.value.setUid(((ColumnDeclarationContext)_localctx).u.value);
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1409); ((ConstraintDeclarationContext)_localctx).c = tableConstraint();
				 _localctx.value.markAsConstraintDef(); _localctx.value.setAst(((ConstraintDeclarationContext)_localctx).c.value); 
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1412); ((IndexDeclarationContext)_localctx).c = indexColumnDefinition();
				 _localctx.value.markAsIndexDef(); _localctx.value.setAst(((IndexDeclarationContext)_localctx).c.value); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnDefinition value;
		public DataTypeContext t;
		public ColumnConstraintContext c;
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		 ((ColumnDefinitionContext)_localctx).value =  new ColumnDefinition(); 
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1417); ((ColumnDefinitionContext)_localctx).t = dataType();
			setState(1423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (DEFAULT - 36)) | (1L << (KEY - 36)) | (1L << (NOT - 36)) | (1L << (NULL_LITERAL - 36)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (PRIMARY - 110)) | (1L << (REFERENCES - 110)) | (1L << (UNIQUE - 110)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (COLUMN_FORMAT - 254)) | (1L << (COMMENT - 254)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(1418); ((ColumnDefinitionContext)_localctx).c = columnConstraint();
				_localctx.value.addColumnConstraint(((ColumnDefinitionContext)_localctx).c.value);
				}
				}
				setState(1425);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraint value;
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		 ((ColumnConstraintContext)_localctx).value =  new ColumnConstraint(); 
		int _la;
		try {
			setState(1450);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1426); nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1427); match(DEFAULT);
				setState(1428); defaultValue();
				}
				break;
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1429); match(AUTO_INCREMENT);
				 _localctx.value.markAsAutoIncrement(); 
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1433);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1431); match(PRIMARY);
					 _localctx.value.markAsPrimary(); 
					}
				}

				setState(1435); match(KEY);
				 _localctx.value.markAsKey(); 
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1437); match(UNIQUE);
				 _localctx.value.markAsUnique(); 
				setState(1441);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(1439); match(KEY);
					 _localctx.value.markAsKey();
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1443); match(COMMENT);
				setState(1444); match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1445); match(COLUMN_FORMAT);
				setState(1446);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1447); match(STORAGE);
				setState(1448);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1449); referenceDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraint value;
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public IndexColumnNamesContext in;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public IndexColumnNamesContext in;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		 ((TableConstraintContext)_localctx).value =  new TableConstraint(); 
		int _la;
		try {
			setState(1516);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1456);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1452); match(CONSTRAINT);
					setState(1454);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(1453); ((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1458); match(PRIMARY);
				setState(1459); match(KEY);
				_localctx.value.markAsPrimary();
				setState(1462);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1461); indexType();
					}
				}

				setState(1464); ((PrimaryKeyTableConstraintContext)_localctx).in = indexColumnNames();
				_localctx.value.setIndexColumnNames(((PrimaryKeyTableConstraintContext)_localctx).in.value);
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1466); indexOption();
					}
					}
					setState(1471);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1476);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1472); match(CONSTRAINT);
					setState(1474);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(1473); ((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1478); match(UNIQUE);
				setState(1480);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1479);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				_localctx.value.markAsUnique();
				setState(1484);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(1483); ((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1487);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1486); indexType();
					}
				}

				setState(1489); ((UniqueKeyTableConstraintContext)_localctx).in = indexColumnNames();
				 _localctx.value.setIndexColumnNames(((UniqueKeyTableConstraintContext)_localctx).in.value);
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1491); indexOption();
					}
					}
					setState(1496);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1501);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1497); match(CONSTRAINT);
					setState(1499);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(1498); ((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1503); match(FOREIGN);
				setState(1504); match(KEY);
				setState(1506);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(1505); ((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1508); indexColumnNames();
				setState(1509); referenceDefinition();
				}
				break;

			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1511); match(CHECK);
				setState(1512); match(LR_BRACKET);
				setState(1513); expression(0);
				setState(1514); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1518); match(REFERENCES);
			setState(1519); tableName();
			setState(1520); indexColumnNames();
			setState(1523);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1521); match(MATCH);
				setState(1522);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1526);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1525); referenceAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		int _la;
		try {
			setState(1544);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1528); match(ON);
				setState(1529); match(DELETE);
				setState(1530); ((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1534);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1531); match(ON);
					setState(1532); match(UPDATE);
					setState(1533); ((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
				}

				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1536); match(ON);
				setState(1537); match(UPDATE);
				setState(1538); ((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1542);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1539); match(ON);
					setState(1540); match(DELETE);
					setState(1541); ((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1552);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1546); match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1547); match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1548); match(SET);
				setState(1549); match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1550); match(NO);
				setState(1551); match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinition value;
		public Token indexFormat;
		public IndexColumnNamesContext i;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnDefinition(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		 ((IndexColumnDefinitionContext)_localctx).value =  new IndexColumnDefinition();  
		int _la;
		try {
			setState(1584);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1554);
				((IndexColumnDefinitionContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((IndexColumnDefinitionContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();

				setState(1557);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(1556); uid();
					}
				}

				setState(1560);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1559); indexType();
					}
				}

				setState(1562); ((IndexColumnDefinitionContext)_localctx).i = indexColumnNames();
				 _localctx.value.setIndexColumnNameList(((IndexColumnDefinitionContext)_localctx).i.value); 
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1564); indexOption();
					}
					}
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1570);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1572);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1571);
					((IndexColumnDefinitionContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((IndexColumnDefinitionContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1575);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(1574); uid();
					}
				}

				setState(1577); indexColumnNames();
				setState(1581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1578); indexOption();
					}
					}
					setState(1583);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOption value;
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public EngineNameContext e;
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public DecimalLiteralContext e;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public CollationNameContext e;
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public UidContext u;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public Token e;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public DecimalLiteralContext e;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharsetNameContext e;
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public Token e;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public FileSizeLiteralContext e;
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public Token e;
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public Token e;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public DecimalLiteralContext e;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public Token e;
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public Token e;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public DecimalLiteralContext e;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public Token e;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public DecimalLiteralContext e;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		 ((TableOptionContext)_localctx).value =  new TableOption();  
		int _la;
		try {
			setState(1761);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1586); match(ENGINE);
				setState(1588);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1587); match(EQUAL_SYMBOL);
					}
				}

				setState(1590); ((TableOptionEngineContext)_localctx).e = engineName();
				 _localctx.value.markAsEngine(); _localctx.value.param = ((TableOptionEngineContext)_localctx).e.value; 
				}
				break;

			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1593); match(AUTO_INCREMENT);
				setState(1595);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1594); match(EQUAL_SYMBOL);
					}
				}

				setState(1597); ((TableOptionAutoIncrementContext)_localctx).e = decimalLiteral();
				 _localctx.value.markAsAutoIncrement(); _localctx.value.param = ((TableOptionAutoIncrementContext)_localctx).e.value; 
				}
				break;

			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1600); match(AVG_ROW_LENGTH);
				setState(1602);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1601); match(EQUAL_SYMBOL);
					}
				}

				setState(1604); ((TableOptionAverageContext)_localctx).e = decimalLiteral();
				 _localctx.value.markAsAvgRowLength(); _localctx.value.param = ((TableOptionAverageContext)_localctx).e.value; 
				}
				break;

			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1608);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1607); match(DEFAULT);
					}
				}

				setState(1613);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1610); match(CHARACTER);
					setState(1611); match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1612); match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1616);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1615); match(EQUAL_SYMBOL);
					}
				}

				setState(1618); ((TableOptionCharsetContext)_localctx).e = charsetName();
				 _localctx.value.markAsCharsetName(); _localctx.value.param = ((TableOptionCharsetContext)_localctx).e.value; 
				}
				break;

			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1621); match(CHECKSUM);
				setState(1623);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1622); match(EQUAL_SYMBOL);
					}
				}

				setState(1625);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsChecksum(); _localctx.value.paramStr = (((TableOptionChecksumContext)_localctx).boolValue!=null?((TableOptionChecksumContext)_localctx).boolValue.getText():null); 
				}
				break;

			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1628);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1627); match(DEFAULT);
					}
				}

				setState(1630); match(COLLATE);
				setState(1632);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1631); match(EQUAL_SYMBOL);
					}
				}

				setState(1634); ((TableOptionCollateContext)_localctx).e = collationName();
				 _localctx.value.markAsCollationName(); _localctx.value.param = ((TableOptionCollateContext)_localctx).e.value; 
				}
				break;

			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1637); match(COMMENT);
				setState(1639);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1638); match(EQUAL_SYMBOL);
					}
				}

				setState(1641); ((TableOptionCommentContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsComment(); _localctx.value.paramStr = (((TableOptionCommentContext)_localctx).e!=null?((TableOptionCommentContext)_localctx).e.getText():null); 
				}
				break;

			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1643); match(COMPRESSION);
				setState(1645);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1644); match(EQUAL_SYMBOL);
					}
				}

				setState(1647); ((TableOptionCompressionContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsCompression(); _localctx.value.paramStr = (((TableOptionCompressionContext)_localctx).e!=null?((TableOptionCompressionContext)_localctx).e.getText():null); 
				}
				break;

			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1649); match(CONNECTION);
				setState(1651);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1650); match(EQUAL_SYMBOL);
					}
				}

				setState(1653); ((TableOptionConnectionContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsConnection(); _localctx.value.paramStr = (((TableOptionConnectionContext)_localctx).e!=null?((TableOptionConnectionContext)_localctx).e.getText():null); 
				}
				break;

			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1655); match(DATA);
				setState(1656); match(DIRECTORY);
				setState(1658);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1657); match(EQUAL_SYMBOL);
					}
				}

				setState(1660); ((TableOptionDataDirectoryContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsDataDirectory(); _localctx.value.paramStr = (((TableOptionDataDirectoryContext)_localctx).e!=null?((TableOptionDataDirectoryContext)_localctx).e.getText():null); 
				}
				break;

			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1662); match(DELAY_KEY_WRITE);
				setState(1664);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1663); match(EQUAL_SYMBOL);
					}
				}

				setState(1666);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsDelayKeyWrite(); _localctx.value.paramStr = (((TableOptionDelayContext)_localctx).boolValue!=null?((TableOptionDelayContext)_localctx).boolValue.getText():null); 
				}
				break;

			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1668); match(ENCRYPTION);
				setState(1670);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1669); match(EQUAL_SYMBOL);
					}
				}

				setState(1672); ((TableOptionEncryptionContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsEncryption(); _localctx.value.paramStr = (((TableOptionEncryptionContext)_localctx).e!=null?((TableOptionEncryptionContext)_localctx).e.getText():null); 
				}
				break;

			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1674); match(INDEX);
				setState(1675); match(DIRECTORY);
				setState(1677);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1676); match(EQUAL_SYMBOL);
					}
				}

				setState(1679); ((TableOptionIndexDirectoryContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsIndexDirectory(); _localctx.value.paramStr = (((TableOptionIndexDirectoryContext)_localctx).e!=null?((TableOptionIndexDirectoryContext)_localctx).e.getText():null); 
				}
				break;

			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1681); match(INSERT_METHOD);
				setState(1683);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1682); match(EQUAL_SYMBOL);
					}
				}

				setState(1685);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsInsertMethod(); _localctx.value.paramStr = (((TableOptionInsertMethodContext)_localctx).insertMethod!=null?((TableOptionInsertMethodContext)_localctx).insertMethod.getText():null); 
				}
				break;

			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1687); match(KEY_BLOCK_SIZE);
				setState(1689);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1688); match(EQUAL_SYMBOL);
					}
				}

				setState(1691); ((TableOptionKeyBlockSizeContext)_localctx).e = fileSizeLiteral();
				 _localctx.value.markAsKeyBlockSize(); _localctx.value.param = ((TableOptionKeyBlockSizeContext)_localctx).e.value; 
				}
				break;

			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1694); match(MAX_ROWS);
				setState(1696);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1695); match(EQUAL_SYMBOL);
					}
				}

				setState(1698); ((TableOptionMaxRowsContext)_localctx).e = decimalLiteral();
				 _localctx.value.markAsMaxRows(); _localctx.value.param = ((TableOptionMaxRowsContext)_localctx).e.value; 
				}
				break;

			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1701); match(MIN_ROWS);
				setState(1703);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1702); match(EQUAL_SYMBOL);
					}
				}

				setState(1705); ((TableOptionMinRowsContext)_localctx).e = decimalLiteral();
				 _localctx.value.markAsMinRows(); _localctx.value.param = ((TableOptionMinRowsContext)_localctx).e.value; 
				}
				break;

			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1708); match(PACK_KEYS);
				setState(1710);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1709); match(EQUAL_SYMBOL);
					}
				}

				setState(1712);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsPackKeys(); _localctx.value.paramStr = (((TableOptionPackKeysContext)_localctx).extBoolValue!=null?((TableOptionPackKeysContext)_localctx).extBoolValue.getText():null); 
				}
				break;

			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1714); match(PASSWORD);
				setState(1716);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1715); match(EQUAL_SYMBOL);
					}
				}

				setState(1718); ((TableOptionPasswordContext)_localctx).e = match(STRING_LITERAL);
				 _localctx.value.markAsPassword(); _localctx.value.paramStr = (((TableOptionPasswordContext)_localctx).e!=null?((TableOptionPasswordContext)_localctx).e.getText():null); 
				}
				break;

			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1720); match(ROW_FORMAT);
				setState(1722);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1721); match(EQUAL_SYMBOL);
					}
				}

				setState(1724);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (COMPACT - 278)) | (1L << (COMPRESSED - 278)) | (1L << (DYNAMIC - 278)) | (1L << (FIXED - 278)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				_localctx.value.markAsRowFormat();  _localctx.value.param = new RowFormat((((TableOptionRowFormatContext)_localctx).rowFormat!=null?((TableOptionRowFormatContext)_localctx).rowFormat.getText():null));
				}
				break;

			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1726); match(STATS_AUTO_RECALC);
				setState(1728);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1727); match(EQUAL_SYMBOL);
					}
				}

				setState(1730);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsStatsAutoRecalc(); _localctx.value.paramStr = (((TableOptionRecalculationContext)_localctx).extBoolValue!=null?((TableOptionRecalculationContext)_localctx).extBoolValue.getText():null); 
				}
				break;

			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1732); match(STATS_PERSISTENT);
				setState(1734);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1733); match(EQUAL_SYMBOL);
					}
				}

				setState(1736);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 _localctx.value.markAsStatsPersistent(); _localctx.value.paramStr = (((TableOptionPersistentContext)_localctx).extBoolValue!=null?((TableOptionPersistentContext)_localctx).extBoolValue.getText():null); 
				}
				break;

			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1738); match(STATS_SAMPLE_PAGES);
				setState(1740);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1739); match(EQUAL_SYMBOL);
					}
				}

				setState(1742); ((TableOptionSamplePageContext)_localctx).e = decimalLiteral();
				 _localctx.value.markAsStatsSamplePages(); _localctx.value.param = ((TableOptionSamplePageContext)_localctx).e.value; 
				}
				break;

			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1745); match(TABLESPACE);
				setState(1746); ((TableOptionTablespaceContext)_localctx).u = uid();
				setState(1748);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1747); tablespaceStorage();
					}
				}

				 _localctx.value.markAsTableSpace(); _localctx.value.param = ((TableOptionTablespaceContext)_localctx).u.value; 
				}
				break;

			case 25:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1752); match(UNION);
				setState(1754);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1753); match(EQUAL_SYMBOL);
					}
				}

				setState(1756); match(LR_BRACKET);
				setState(1757); tables();
				setState(1758); match(RR_BRACKET);
				 _localctx.value.markAsUNION();  
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1763); match(STORAGE);
			setState(1764);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public PartitionDefinition value;
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1766); match(PARTITION);
			setState(1767); match(BY);
			setState(1768); partitionFunctionDefinition();
			setState(1771);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1769); match(PARTITIONS);
				setState(1770); ((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1780);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1773); match(SUBPARTITION);
				setState(1774); match(BY);
				setState(1775); subpartitionFunctionDefinition();
				setState(1778);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1776); match(SUBPARTITIONS);
					setState(1777); ((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1793);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(1782); match(LR_BRACKET);
				setState(1783); partitionDefinition();
				setState(1788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1784); match(COMMA);
					setState(1785); partitionDefinition();
					}
					}
					setState(1790);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1791); match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1840);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1796);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1795); match(LINEAR);
					}
				}

				setState(1798); match(HASH);
				setState(1799); match(LR_BRACKET);
				setState(1800); expression(0);
				setState(1801); match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1804);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1803); match(LINEAR);
					}
				}

				setState(1806); match(KEY);
				setState(1810);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1807); match(ALGORITHM);
					setState(1808); match(EQUAL_SYMBOL);
					setState(1809);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1812); match(LR_BRACKET);
				setState(1813); uidList();
				setState(1814); match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1816); match(RANGE);
				setState(1826);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1817); match(LR_BRACKET);
					setState(1818); expression(0);
					setState(1819); match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1821); match(COLUMNS);
					setState(1822); match(LR_BRACKET);
					setState(1823); uidList();
					setState(1824); match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1828); match(LIST);
				setState(1838);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1829); match(LR_BRACKET);
					setState(1830); expression(0);
					setState(1831); match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1833); match(COLUMNS);
					setState(1834); match(LR_BRACKET);
					setState(1835); uidList();
					setState(1836); match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1863);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1843);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1842); match(LINEAR);
					}
				}

				setState(1845); match(HASH);
				setState(1846); match(LR_BRACKET);
				setState(1847); expression(0);
				setState(1848); match(RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1851);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1850); match(LINEAR);
					}
				}

				setState(1853); match(KEY);
				setState(1857);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1854); match(ALGORITHM);
					setState(1855); match(EQUAL_SYMBOL);
					setState(1856);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1859); match(LR_BRACKET);
				setState(1860); uidList();
				setState(1861); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparision(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			setState(1974);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1865); match(PARTITION);
				setState(1866); uid();
				setState(1867); match(VALUES);
				setState(1868); match(LESS);
				setState(1869); match(THAN);
				setState(1870); match(LR_BRACKET);
				setState(1871); partitionDefinerAtom();
				setState(1876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1872); match(COMMA);
					setState(1873); partitionDefinerAtom();
					}
					}
					setState(1878);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1879); match(RR_BRACKET);
				setState(1883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1880); partitionOption();
					}
					}
					setState(1885);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1894);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1886); subpartitionDefinition();
					setState(1891);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1887); match(COMMA);
							setState(1888); subpartitionDefinition();
							}
							} 
						}
						setState(1893);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
					}
					}
				}

				}
				break;

			case 2:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1896); match(PARTITION);
				setState(1897); uid();
				setState(1898); match(VALUES);
				setState(1899); match(IN);
				setState(1900); match(LR_BRACKET);
				setState(1901); partitionDefinerAtom();
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1902); match(COMMA);
					setState(1903); partitionDefinerAtom();
					}
					}
					setState(1908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1909); match(RR_BRACKET);
				setState(1913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1910); partitionOption();
					}
					}
					setState(1915);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1924);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1916); subpartitionDefinition();
					setState(1921);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,205,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1917); match(COMMA);
							setState(1918); subpartitionDefinition();
							}
							} 
						}
						setState(1923);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,205,_ctx);
					}
					}
				}

				}
				break;

			case 3:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1926); match(PARTITION);
				setState(1927); uid();
				setState(1928); match(VALUES);
				setState(1929); match(IN);
				setState(1930); match(LR_BRACKET);
				setState(1931); partitionDefinerVector();
				setState(1936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1932); match(COMMA);
					setState(1933); partitionDefinerVector();
					}
					}
					setState(1938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1939); match(RR_BRACKET);
				setState(1943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1940); partitionOption();
					}
					}
					setState(1945);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1954);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1946); subpartitionDefinition();
					setState(1951);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1947); match(COMMA);
							setState(1948); subpartitionDefinition();
							}
							} 
						}
						setState(1953);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
					}
					}
				}

				}
				break;

			case 4:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1956); match(PARTITION);
				setState(1957); uid();
				setState(1961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1958); partitionOption();
					}
					}
					setState(1963);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1972);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1964); subpartitionDefinition();
					setState(1969);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1965); match(COMMA);
							setState(1966); subpartitionDefinition();
							}
							} 
						}
						setState(1971);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			setState(1979);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1976); constant();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1977); match(MAXVALUE);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1978); expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1981); match(LR_BRACKET);
			setState(1982); partitionDefinerAtom();
			setState(1985); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1983); match(COMMA);
				setState(1984); partitionDefinerAtom();
				}
				}
				setState(1987); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1989); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1991); match(SUBPARTITION);
			setState(1992); uid();
			setState(1996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1993); partitionOption();
				}
				}
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			setState(2044);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2000);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1999); match(STORAGE);
					}
				}

				setState(2002); match(ENGINE);
				setState(2004);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2003); match(EQUAL_SYMBOL);
					}
				}

				setState(2006); engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2007); match(COMMENT);
				setState(2009);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2008); match(EQUAL_SYMBOL);
					}
				}

				setState(2011); ((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2012); match(DATA);
				setState(2013); match(DIRECTORY);
				setState(2015);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2014); match(EQUAL_SYMBOL);
					}
				}

				setState(2017); ((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2018); match(INDEX);
				setState(2019); match(DIRECTORY);
				setState(2021);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2020); match(EQUAL_SYMBOL);
					}
				}

				setState(2023); ((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2024); match(MAX_ROWS);
				setState(2026);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2025); match(EQUAL_SYMBOL);
					}
				}

				setState(2028); ((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2029); match(MIN_ROWS);
				setState(2031);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2030); match(EQUAL_SYMBOL);
					}
				}

				setState(2033); ((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2034); match(TABLESPACE);
				setState(2036);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2035); match(EQUAL_SYMBOL);
					}
				}

				setState(2038); ((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2039); match(NODEGROUP);
				setState(2041);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2040); match(EQUAL_SYMBOL);
					}
				}

				setState(2043); ((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUpgradeName(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			setState(2064);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2046); match(ALTER);
				setState(2047);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2049);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(2048); uid();
					}
				}

				setState(2052); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2051); createDatabaseOption();
					}
					}
					setState(2054); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;

			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2056); match(ALTER);
				setState(2057);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2058); uid();
				setState(2059); match(UPGRADE);
				setState(2060); match(DATA);
				setState(2061); match(DIRECTORY);
				setState(2062); match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterEvent(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2066); match(ALTER);
			setState(2068);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2067); ownerStatement();
				}
			}

			setState(2070); match(EVENT);
			setState(2071); fullId();
			setState(2075);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2072); match(ON);
				setState(2073); match(SCHEDULE);
				setState(2074); scheduleExpression();
				}
				break;
			}
			setState(2083);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2077); match(ON);
				setState(2078); match(COMPLETION);
				setState(2080);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2079); match(NOT);
					}
				}

				setState(2082); match(PRESERVE);
				}
			}

			setState(2088);
			_la = _input.LA(1);
			if (_la==RENAME) {
				{
				setState(2085); match(RENAME);
				setState(2086); match(TO);
				setState(2087); fullId();
				}
			}

			setState(2091);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2090); enableType();
				}
			}

			setState(2095);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2093); match(COMMENT);
				setState(2094); match(STRING_LITERAL);
				}
			}

			setState(2099);
			_la = _input.LA(1);
			if (_la==DO) {
				{
				setState(2097); match(DO);
				setState(2098); routineBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterFunction(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101); match(ALTER);
			setState(2102); match(FUNCTION);
			setState(2103); fullId();
			setState(2107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2104); routineOption();
				}
				}
				setState(2109);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterInstance(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110); match(ALTER);
			setState(2111); match(INSTANCE);
			setState(2112); match(ROTATE);
			setState(2113); match(INNODB);
			setState(2114); match(MASTER);
			setState(2115); match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterLogfileGroup(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2117); match(ALTER);
			setState(2118); match(LOGFILE);
			setState(2119); match(GROUP);
			setState(2120); uid();
			setState(2121); match(ADD);
			setState(2122); match(UNDOFILE);
			setState(2123); match(STRING_LITERAL);
			setState(2129);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2124); match(INITIAL_SIZE);
				setState(2126);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2125); match(EQUAL_SYMBOL);
					}
				}

				setState(2128); fileSizeLiteral();
				}
			}

			setState(2132);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2131); match(WAIT);
				}
			}

			setState(2134); match(ENGINE);
			setState(2136);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2135); match(EQUAL_SYMBOL);
				}
			}

			setState(2138); engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterProcedure(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140); match(ALTER);
			setState(2141); match(PROCEDURE);
			setState(2142); fullId();
			setState(2146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2143); routineOption();
				}
				}
				setState(2148);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterServer(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149); match(ALTER);
			setState(2150); match(SERVER);
			setState(2151); uid();
			setState(2152); match(OPTIONS);
			setState(2153); match(LR_BRACKET);
			setState(2154); serverOption();
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2155); match(COMMA);
				setState(2156); serverOption();
				}
				}
				setState(2161);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2162); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2164); match(ALTER);
			setState(2166);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2165);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2169);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2168); match(IGNORE);
				}
			}

			setState(2171); match(TABLE);
			setState(2172); tableName();
			setState(2173); alterSpecification();
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2174); match(COMMA);
				setState(2175); alterSpecification();
				}
				}
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2182);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2181); partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTablespace(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2184); match(ALTER);
			setState(2185); match(TABLESPACE);
			setState(2186); uid();
			setState(2187);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2188); match(DATAFILE);
			setState(2189); match(STRING_LITERAL);
			setState(2193);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2190); match(INITIAL_SIZE);
				setState(2191); match(EQUAL_SYMBOL);
				setState(2192); fileSizeLiteral();
				}
			}

			setState(2196);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2195); match(WAIT);
				}
			}

			setState(2198); match(ENGINE);
			setState(2200);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2199); match(EQUAL_SYMBOL);
				}
			}

			setState(2202); engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterView(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204); match(ALTER);
			setState(2208);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2205); match(ALGORITHM);
				setState(2206); match(EQUAL_SYMBOL);
				setState(2207);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2211);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2210); ownerStatement();
				}
			}

			setState(2216);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2213); match(SQL);
				setState(2214); match(SECURITY);
				setState(2215);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2218); match(VIEW);
			setState(2219); fullId();
			setState(2224);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2220); match(LR_BRACKET);
				setState(2221); uidList();
				setState(2222); match(RR_BRACKET);
				}
			}

			setState(2226); match(AS);
			setState(2227); selectStatement();
			setState(2234);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2228); match(WITH);
				setState(2230);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2229);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2232); match(CHECK);
				setState(2233); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public PartitionDefinitionContext partitionDefinition() {
			return getRuleContext(PartitionDefinitionContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
	}
	public static class AlterByAnalyzePartitiionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitiionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartitiion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartitiion(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public TableOptionContext tableOption() {
			return getRuleContext(TableOptionContext.class,0);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			setState(2542);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2236); tableOption();
				}
				break;

			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2237); match(ADD);
				setState(2239);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2238); match(COLUMN);
					}
				}

				setState(2241); uid();
				setState(2242); columnDefinition();
				setState(2246);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2243); match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2244); match(AFTER);
					setState(2245); uid();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2248); match(ADD);
				setState(2250);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2249); match(COLUMN);
					}
				}

				setState(2252); match(LR_BRACKET);
				setState(2253); uid();
				setState(2254); columnDefinition();
				setState(2261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2255); match(COMMA);
					setState(2256); uid();
					setState(2257); columnDefinition();
					}
					}
					setState(2263);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2264); match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2266); match(ADD);
				setState(2267);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2269);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(2268); uid();
					}
				}

				setState(2272);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2271); indexType();
					}
				}

				setState(2274); indexColumnNames();
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2275); indexOption();
					}
					}
					setState(2280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2281); match(ADD);
				setState(2286);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2282); match(CONSTRAINT);
					setState(2284);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(2283); ((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2288); match(PRIMARY);
				setState(2289); match(KEY);
				setState(2291);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2290); indexType();
					}
				}

				setState(2293); indexColumnNames();
				setState(2297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2294); indexOption();
					}
					}
					setState(2299);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2300); match(ADD);
				setState(2305);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2301); match(CONSTRAINT);
					setState(2303);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(2302); ((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2307); match(UNIQUE);
				setState(2309);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2308);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2312);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(2311); ((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2315);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2314); indexType();
					}
				}

				setState(2317); indexColumnNames();
				setState(2321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2318); indexOption();
					}
					}
					setState(2323);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2324); match(ADD);
				setState(2325);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2327);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2326);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2330);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(2329); uid();
					}
				}

				setState(2332); indexColumnNames();
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2333); indexOption();
					}
					}
					setState(2338);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2339); match(ADD);
				setState(2344);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2340); match(CONSTRAINT);
					setState(2342);
					_la = _input.LA(1);
					if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						setState(2341); ((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2346); match(FOREIGN);
				setState(2347); match(KEY);
				setState(2349);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(2348); ((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2351); indexColumnNames();
				setState(2352); referenceDefinition();
				}
				break;

			case 9:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2354); match(ALGORITHM);
				setState(2356);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2355); match(EQUAL_SYMBOL);
					}
				}

				setState(2358);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 10:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2359); match(ALTER);
				setState(2361);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2360); match(COLUMN);
					}
				}

				setState(2363); uid();
				setState(2369);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2364); match(SET);
					setState(2365); match(DEFAULT);
					setState(2366); defaultValue();
					}
					break;
				case DROP:
					{
					setState(2367); match(DROP);
					setState(2368); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 11:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2371); match(CHANGE);
				setState(2373);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2372); match(COLUMN);
					}
				}

				setState(2375); ((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2376); ((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2377); columnDefinition();
				setState(2381);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2378); match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2379); match(AFTER);
					setState(2380); ((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 12:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2383); match(LOCK);
				setState(2385);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2384); match(EQUAL_SYMBOL);
					}
				}

				setState(2387);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 13:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2388); match(MODIFY);
				setState(2390);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2389); match(COLUMN);
					}
				}

				setState(2392); uid();
				setState(2393); columnDefinition();
				setState(2397);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2394); match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2395); match(AFTER);
					setState(2396); uid();
					}
					break;
				case EOF:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 14:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2399); match(DROP);
				setState(2401);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2400); match(COLUMN);
					}
				}

				setState(2403); uid();
				}
				break;

			case 15:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2404); match(DROP);
				setState(2405); match(PRIMARY);
				setState(2406); match(KEY);
				}
				break;

			case 16:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2407); match(DROP);
				setState(2408);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2409); uid();
				}
				break;

			case 17:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2410); match(DROP);
				setState(2411); match(FOREIGN);
				setState(2412); match(KEY);
				setState(2413); uid();
				}
				break;

			case 18:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2414); match(DISABLE);
				setState(2415); match(KEYS);
				}
				break;

			case 19:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2416); match(ENABLE);
				setState(2417); match(KEYS);
				}
				break;

			case 20:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2418); match(RENAME);
				setState(2420);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2419);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2422); uid();
				}
				break;

			case 21:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2423); match(ORDER);
				setState(2424); match(BY);
				setState(2425); uidList();
				}
				break;

			case 22:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2426); match(CONVERT);
				setState(2427); match(TO);
				setState(2428); match(CHARACTER);
				setState(2429); match(SET);
				setState(2430); charsetName();
				setState(2433);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2431); match(COLLATE);
					setState(2432); collationName();
					}
				}

				}
				break;

			case 23:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2436);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2435); match(DEFAULT);
					}
				}

				setState(2438); match(CHARACTER);
				setState(2439); match(SET);
				setState(2440); match(EQUAL_SYMBOL);
				setState(2441); charsetName();
				setState(2445);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2442); match(COLLATE);
					setState(2443); match(EQUAL_SYMBOL);
					setState(2444); collationName();
					}
				}

				}
				break;

			case 24:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2447); match(DISCARD);
				setState(2448); match(TABLESPACE);
				}
				break;

			case 25:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2449); match(IMPORT);
				setState(2450); match(TABLESPACE);
				}
				break;

			case 26:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2451); match(FORCE);
				}
				break;

			case 27:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2452);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2453); match(VALIDATION);
				}
				break;

			case 28:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2454); match(ADD);
				setState(2455); match(PARTITION);
				setState(2456); partitionDefinition();
				}
				break;

			case 29:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2457); match(DROP);
				setState(2458); match(PARTITION);
				setState(2459); uidList();
				}
				break;

			case 30:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2460); match(DISCARD);
				setState(2461); match(PARTITION);
				setState(2464);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2462); uidList();
					}
					break;
				case ALL:
					{
					setState(2463); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2466); match(TABLESPACE);
				}
				break;

			case 31:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2467); match(IMPORT);
				setState(2468); match(PARTITION);
				setState(2471);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2469); uidList();
					}
					break;
				case ALL:
					{
					setState(2470); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2473); match(TABLESPACE);
				}
				break;

			case 32:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2474); match(TRUNCATE);
				setState(2475); match(PARTITION);
				setState(2478);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2476); uidList();
					}
					break;
				case ALL:
					{
					setState(2477); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 33:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2480); match(COALESCE);
				setState(2481); match(PARTITION);
				setState(2482); decimalLiteral();
				}
				break;

			case 34:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2483); match(REORGANIZE);
				setState(2484); match(PARTITION);
				setState(2485); uidList();
				setState(2486); match(INTO);
				setState(2487); match(LR_BRACKET);
				setState(2488); partitionDefinition();
				setState(2493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2489); match(COMMA);
					setState(2490); partitionDefinition();
					}
					}
					setState(2495);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2496); match(RR_BRACKET);
				}
				break;

			case 35:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2498); match(EXCHANGE);
				setState(2499); match(PARTITION);
				setState(2500); uid();
				setState(2501); match(WITH);
				setState(2502); match(TABLE);
				setState(2503); tableName();
				setState(2506);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2504);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(2505); match(VALIDATION);
					}
				}

				}
				break;

			case 36:
				_localctx = new AlterByAnalyzePartitiionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2508); match(ANALYZE);
				setState(2509); match(PARTITION);
				setState(2512);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2510); uidList();
					}
					break;
				case ALL:
					{
					setState(2511); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 37:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2514); match(CHECK);
				setState(2515); match(PARTITION);
				setState(2518);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2516); uidList();
					}
					break;
				case ALL:
					{
					setState(2517); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 38:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2520); match(OPTIMIZE);
				setState(2521); match(PARTITION);
				setState(2524);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2522); uidList();
					}
					break;
				case ALL:
					{
					setState(2523); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 39:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2526); match(REBUILD);
				setState(2527); match(PARTITION);
				setState(2530);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2528); uidList();
					}
					break;
				case ALL:
					{
					setState(2529); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 40:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2532); match(REPAIR);
				setState(2533); match(PARTITION);
				setState(2536);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2534); uidList();
					}
					break;
				case ALL:
					{
					setState(2535); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 41:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2538); match(REMOVE);
				setState(2539); match(PARTITIONING);
				}
				break;

			case 42:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2540); match(UPGRADE);
				setState(2541); match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2544); match(DROP);
			setState(2545);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2547);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2546); ifExists();
				}
			}

			setState(2549); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropEvent(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2551); match(DROP);
			setState(2552); match(EVENT);
			setState(2554);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2553); ifExists();
				}
			}

			setState(2556); fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558); match(DROP);
			setState(2559); match(INDEX);
			setState(2561);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2560);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(2563); uid();
			setState(2564); match(ON);
			setState(2565); tableName();
			setState(2571);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2566); match(ALGORITHM);
				setState(2568);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2567); match(EQUAL_SYMBOL);
					}
				}

				setState(2570);
				((DropIndexContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2578);
			_la = _input.LA(1);
			if (_la==LOCK) {
				{
				setState(2573); match(LOCK);
				setState(2575);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2574); match(EQUAL_SYMBOL);
					}
				}

				setState(2577);
				((DropIndexContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropLogfileGroup(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580); match(DROP);
			setState(2581); match(LOGFILE);
			setState(2582); match(GROUP);
			setState(2583); uid();
			setState(2584); match(ENGINE);
			setState(2585); match(EQUAL_SYMBOL);
			setState(2586); engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropProcedure(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2588); match(DROP);
			setState(2589); match(PROCEDURE);
			setState(2591);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2590); ifExists();
				}
			}

			setState(2593); fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropFunction(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595); match(DROP);
			setState(2596); match(FUNCTION);
			setState(2598);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2597); ifExists();
				}
			}

			setState(2600); fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropServer(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602); match(DROP);
			setState(2603); match(SERVER);
			setState(2605);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2604); ifExists();
				}
			}

			setState(2607); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2609); match(DROP);
			setState(2611);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2610); match(TEMPORARY);
				}
			}

			setState(2613); match(TABLE);
			setState(2615);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2614); ifExists();
				}
			}

			setState(2617); tables();
			setState(2619);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2618);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTablespace(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621); match(DROP);
			setState(2622); match(TABLESPACE);
			setState(2623); uid();
			setState(2629);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2624); match(ENGINE);
				setState(2626);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2625); match(EQUAL_SYMBOL);
					}
				}

				setState(2628); engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTrigger(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631); match(DROP);
			setState(2632); match(TRIGGER);
			setState(2634);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2633); ifExists();
				}
			}

			setState(2636); fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropView(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2638); match(DROP);
			setState(2639); match(VIEW);
			setState(2641);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2640); ifExists();
				}
			}

			setState(2643); fullId();
			setState(2648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2644); match(COMMA);
				setState(2645); fullId();
				}
				}
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2652);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2651);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654); match(RENAME);
			setState(2655); match(TABLE);
			setState(2656); renameTableClause();
			setState(2661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2657); match(COMMA);
				setState(2658); renameTableClause();
				}
				}
				setState(2663);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664); tableName();
			setState(2665); match(TO);
			setState(2666); tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2668); match(TRUNCATE);
			setState(2670);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2669); match(TABLE);
				}
			}

			setState(2672); tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2674); match(CALL);
			setState(2675); fullId();
			setState(2682);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2676); match(LR_BRACKET);
				setState(2679);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(2677); constants();
					}
					break;

				case 2:
					{
					setState(2678); expressions();
					}
					break;
				}
				setState(2681); match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_deleteStatement);
		try {
			setState(2686);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2684); singleDeleteStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2685); multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2688); match(DO);
			setState(2689); expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_handlerStatement);
		try {
			setState(2695);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2691); handlerOpenStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2692); handlerReadIndexStatement();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2693); handlerReadStatement();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2694); handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2697); match(INSERT);
			setState(2699);
			_la = _input.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) {
				{
				setState(2698);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2702);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2701); match(IGNORE);
				}
			}

			setState(2705);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2704); match(INTO);
				}
			}

			setState(2707); tableName();
			setState(2713);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2708); match(PARTITION);
				setState(2709); match(LR_BRACKET);
				setState(2710); ((InsertStatementContext)_localctx).partitions = uidList();
				setState(2711); match(RR_BRACKET);
				}
			}

			setState(2731);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2719);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(2715); match(LR_BRACKET);
					setState(2716); ((InsertStatementContext)_localctx).columns = uidList();
					setState(2717); match(RR_BRACKET);
					}
					break;
				}
				setState(2721); insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2722); match(SET);
				setState(2723); ((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2724); match(COMMA);
					setState(2725); ((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2745);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2733); match(ON);
				setState(2734); match(DUPLICATE);
				setState(2735); match(KEY);
				setState(2736); match(UPDATE);
				setState(2737); ((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2738); match(COMMA);
					setState(2739); ((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2744);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2747); match(LOAD);
			setState(2748); match(DATA);
			setState(2750);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2749);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2753);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2752); match(LOCAL);
				}
			}

			setState(2755); match(INFILE);
			setState(2756); ((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2758);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2757);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2760); match(INTO);
			setState(2761); match(TABLE);
			setState(2762); tableName();
			setState(2768);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2763); match(PARTITION);
				setState(2764); match(LR_BRACKET);
				setState(2765); uidList();
				setState(2766); match(RR_BRACKET);
				}
			}

			setState(2773);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2770); match(CHARACTER);
				setState(2771); match(SET);
				setState(2772); ((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2781);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2775);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2777); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2776); selectFieldsInto();
					}
					}
					setState(2779); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2789);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2783); match(LINES);
				setState(2785); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2784); selectLinesInto();
					}
					}
					setState(2787); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2795);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2791); match(IGNORE);
				setState(2792); decimalLiteral();
				setState(2793);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2808);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2797); match(LR_BRACKET);
				setState(2798); assignmentField();
				setState(2803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2799); match(COMMA);
					setState(2800); assignmentField();
					}
					}
					setState(2805);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2806); match(RR_BRACKET);
				}
			}

			setState(2819);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2810); match(SET);
				setState(2811); updatedElement();
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2812); match(COMMA);
					setState(2813); updatedElement();
					}
					}
					setState(2818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821); match(LOAD);
			setState(2822); match(XML);
			setState(2824);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2823);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2827);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2826); match(LOCAL);
				}
			}

			setState(2829); match(INFILE);
			setState(2830); ((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2832);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2831);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2834); match(INTO);
			setState(2835); match(TABLE);
			setState(2836); tableName();
			setState(2840);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2837); match(CHARACTER);
				setState(2838); match(SET);
				setState(2839); ((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2848);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2842); match(ROWS);
				setState(2843); match(IDENTIFIED);
				setState(2844); match(BY);
				setState(2845); match(LESS_SYMBOL);
				setState(2846); ((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2847); match(GREATER_SYMBOL);
				}
			}

			setState(2854);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2850); match(IGNORE);
				setState(2851); decimalLiteral();
				setState(2852);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2867);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2856); match(LR_BRACKET);
				setState(2857); assignmentField();
				setState(2862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2858); match(COMMA);
					setState(2859); assignmentField();
					}
					}
					setState(2864);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2865); match(RR_BRACKET);
				}
			}

			setState(2878);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2869); match(SET);
				setState(2870); updatedElement();
				setState(2875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2871); match(COMMA);
					setState(2872); updatedElement();
					}
					}
					setState(2877);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2880); match(REPLACE);
			setState(2882);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2881);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2885);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2884); match(INTO);
				}
			}

			setState(2887); tableName();
			setState(2893);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2888); match(PARTITION);
				setState(2889); match(LR_BRACKET);
				setState(2890); ((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(2891); match(RR_BRACKET);
				}
			}

			setState(2911);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2899);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(2895); match(LR_BRACKET);
					setState(2896); ((ReplaceStatementContext)_localctx).columns = uidList();
					setState(2897); match(RR_BRACKET);
					}
					break;
				}
				setState(2901); insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2902); match(SET);
				setState(2903); ((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(2908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2904); match(COMMA);
					setState(2905); ((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(2910);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(2968);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2913); querySpecification();
				setState(2915);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(2914); lockClause();
					}
				}

				}
				break;

			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2917); queryExpression();
				setState(2919);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(2918); lockClause();
					}
				}

				}
				break;

			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2921); querySpecificationNointo();
				setState(2923); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2922); unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2925); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2935);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2927); match(UNION);
					setState(2929);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2928);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(2933);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(2931); querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(2932); queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2938);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2937); orderByClause();
					}
				}

				setState(2941);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2940); limitClause();
					}
				}

				setState(2944);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(2943); lockClause();
					}
				}

				}
				break;

			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2946); queryExpressionNointo();
				setState(2948); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2947); unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2950); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2957);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2952); match(UNION);
					setState(2954);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2953);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(2956); queryExpression();
					}
				}

				setState(2960);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2959); orderByClause();
					}
				}

				setState(2963);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2962); limitClause();
					}
				}

				setState(2966);
				_la = _input.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					setState(2965); lockClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_updateStatement);
		try {
			setState(2972);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2970); singleUpdateStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2971); multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			setState(2989);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2974); selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2975);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(2976); match(LR_BRACKET);
				setState(2977); expressionsWithDefaults();
				setState(2978); match(RR_BRACKET);
				setState(2986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2979); match(COMMA);
					setState(2980); match(LR_BRACKET);
					setState(2981); expressionsWithDefaults();
					setState(2982); match(RR_BRACKET);
					}
					}
					setState(2988);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991); fullColumnName();
			setState(2992); match(EQUAL_SYMBOL);
			setState(2995);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(2993); expression(0);
				}
				break;
			case DEFAULT:
				{
				setState(2994); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_assignmentField);
		try {
			setState(2999);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997); uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2998); match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lockClause);
		try {
			setState(3007);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3001); match(FOR);
				setState(3002); match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3003); match(LOCK);
				setState(3004); match(IN);
				setState(3005); match(SHARE);
				setState(3006); match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3009); match(DELETE);
			setState(3011);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3010); ((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3014);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3013); match(QUICK);
				}
			}

			setState(3017);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3016); match(IGNORE);
				}
			}

			setState(3019); match(FROM);
			setState(3020); tableName();
			setState(3026);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3021); match(PARTITION);
				setState(3022); match(LR_BRACKET);
				setState(3023); uidList();
				setState(3024); match(RR_BRACKET);
				}
			}

			setState(3030);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3028); match(WHERE);
				setState(3029); expression(0);
				}
			}

			setState(3033);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3032); orderByClause();
				}
			}

			setState(3037);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3035); match(LIMIT);
				setState(3036); decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039); match(DELETE);
			setState(3041);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3040); ((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3044);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3043); match(QUICK);
				}
				break;
			}
			setState(3047);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3046); match(IGNORE);
				}
			}

			setState(3088);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3049); tableName();
				setState(3052);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3050); match(DOT);
					setState(3051); match(STAR);
					}
				}

				setState(3062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3054); match(COMMA);
					setState(3055); tableName();
					setState(3058);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3056); match(DOT);
						setState(3057); match(STAR);
						}
					}

					}
					}
					setState(3064);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3065); match(FROM);
				setState(3066); tableSources();
				}
				break;
			case FROM:
				{
				setState(3068); match(FROM);
				setState(3069); tableName();
				setState(3072);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3070); match(DOT);
					setState(3071); match(STAR);
					}
				}

				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3074); match(COMMA);
					setState(3075); tableName();
					setState(3078);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3076); match(DOT);
						setState(3077); match(STAR);
						}
					}

					}
					}
					setState(3084);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3085); match(USING);
				setState(3086); tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3092);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3090); match(WHERE);
				setState(3091); expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094); match(HANDLER);
			setState(3095); tableName();
			setState(3096); match(OPEN);
			setState(3101);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(3098);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3097); match(AS);
					}
				}

				setState(3100); uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3103); match(HANDLER);
			setState(3104); tableName();
			setState(3105); match(READ);
			setState(3106); ((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3113);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3107); comparisonOperator();
				setState(3108); match(LR_BRACKET);
				setState(3109); constants();
				setState(3110); match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3112);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3117);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3115); match(WHERE);
				setState(3116); expression(0);
				}
			}

			setState(3121);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3119); match(LIMIT);
				setState(3120); decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3123); match(HANDLER);
			setState(3124); tableName();
			setState(3125); match(READ);
			setState(3126);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(3129);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3127); match(WHERE);
				setState(3128); expression(0);
				}
			}

			setState(3133);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3131); match(LIMIT);
				setState(3132); decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135); match(HANDLER);
			setState(3136); tableName();
			setState(3137); match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139); match(UPDATE);
			setState(3141);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3140); ((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3144);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3143); match(IGNORE);
				}
			}

			setState(3146); tableName();
			setState(3151);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(3148);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3147); match(AS);
					}
				}

				setState(3150); uid();
				}
			}

			setState(3153); match(SET);
			setState(3154); updatedElement();
			setState(3159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3155); match(COMMA);
				setState(3156); updatedElement();
				}
				}
				setState(3161);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3164);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3162); match(WHERE);
				setState(3163); expression(0);
				}
			}

			setState(3167);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3166); orderByClause();
				}
			}

			setState(3170);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3169); limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3172); match(UPDATE);
			setState(3174);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3173); ((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3177);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3176); match(IGNORE);
				}
			}

			setState(3179); tableSources();
			setState(3180); match(SET);
			setState(3181); updatedElement();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3182); match(COMMA);
				setState(3183); updatedElement();
				}
				}
				setState(3188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3191);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3189); match(WHERE);
				setState(3190); expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3193); match(ORDER);
			setState(3194); match(BY);
			setState(3195); orderByExpression();
			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3196); match(COMMA);
				setState(3197); orderByExpression();
				}
				}
				setState(3202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203); expression(0);
			setState(3205);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3204);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3207); tableSource();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3208); match(COMMA);
				setState(3209); tableSource();
				}
				}
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3232);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3215); tableSourceItem();
				setState(3219);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3216); joinPart();
						}
						} 
					}
					setState(3221);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,432,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3222); match(LR_BRACKET);
				setState(3223); tableSourceItem();
				setState(3227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CROSS - 30)) | (1L << (INNER - 30)) | (1L << (JOIN - 30)) | (1L << (LEFT - 30)))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NATURAL - 96)) | (1L << (RIGHT - 96)) | (1L << (STRAIGHT_JOIN - 96)))) != 0)) {
					{
					{
					setState(3224); joinPart();
					}
					}
					setState(3229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3230); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3274);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3234); tableName();
				setState(3240);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3235); match(PARTITION);
					setState(3236); match(LR_BRACKET);
					setState(3237); uidList();
					setState(3238); match(RR_BRACKET);
					}
				}

				setState(3246);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3243);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3242); match(AS);
						}
					}

					setState(3245); ((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3256);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(3248); indexHint();
					setState(3253);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3249); match(COMMA);
							setState(3250); indexHint();
							}
							} 
						}
						setState(3255);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
					}
					}
				}

				}
				break;

			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3263);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3258); selectStatement();
					}
					break;

				case 2:
					{
					setState(3259); match(LR_BRACKET);
					setState(3260); ((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3261); match(RR_BRACKET);
					}
					break;
				}
				setState(3266);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3265); match(AS);
					}
				}

				setState(3268); ((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;

			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3270); match(LR_BRACKET);
				setState(3271); tableSources();
				setState(3272); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(3277);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(3280);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3278); match(FOR);
				setState(3279); indexHintType();
				}
			}

			setState(3282); match(LR_BRACKET);
			setState(3283); uidList();
			setState(3284); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHintType);
		try {
			setState(3291);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3286); match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3287); match(ORDER);
				setState(3288); match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3289); match(GROUP);
				setState(3290); match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			setState(3337);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3294);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3293);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3296); match(JOIN);
				setState(3297); tableSourceItem();
				setState(3305);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3298); match(ON);
					setState(3299); expression(0);
					}
					break;

				case 2:
					{
					setState(3300); match(USING);
					setState(3301); match(LR_BRACKET);
					setState(3302); uidList();
					setState(3303); match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3307); match(STRAIGHT_JOIN);
				setState(3308); tableSourceItem();
				setState(3311);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3309); match(ON);
					setState(3310); expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3313);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3315);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3314); match(OUTER);
					}
				}

				setState(3317); match(JOIN);
				setState(3318); tableSourceItem();
				setState(3326);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3319); match(ON);
					setState(3320); expression(0);
					}
					break;
				case USING:
					{
					setState(3321); match(USING);
					setState(3322); match(LR_BRACKET);
					setState(3323); uidList();
					setState(3324); match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3328); match(NATURAL);
				setState(3333);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3329);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3331);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3330); match(OUTER);
						}
					}

					}
				}

				setState(3335); match(JOIN);
				setState(3336); tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_queryExpression);
		try {
			setState(3347);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3339); match(LR_BRACKET);
				setState(3340); querySpecification();
				setState(3341); match(RR_BRACKET);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3343); match(LR_BRACKET);
				setState(3344); queryExpression();
				setState(3345); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			setState(3357);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3349); match(LR_BRACKET);
				setState(3350); querySpecificationNointo();
				setState(3351); match(RR_BRACKET);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3353); match(LR_BRACKET);
				setState(3354); queryExpressionNointo();
				setState(3355); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3399);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3359); match(SELECT);
				setState(3363);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3360); selectSpec();
						}
						} 
					}
					setState(3365);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
				}
				setState(3366); selectElements();
				setState(3368);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3367); selectIntoExpression();
					}
				}

				setState(3371);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3370); fromClause();
					}
				}

				setState(3374);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(3373); orderByClause();
					}
					break;
				}
				setState(3377);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(3376); limitClause();
					}
					break;
				}
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3379); match(SELECT);
				setState(3383);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3380); selectSpec();
						}
						} 
					}
					setState(3385);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
				}
				setState(3386); selectElements();
				setState(3388);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3387); fromClause();
					}
				}

				setState(3391);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3390); orderByClause();
					}
					break;
				}
				setState(3394);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3393); limitClause();
					}
					break;
				}
				setState(3397);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3396); selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3401); match(SELECT);
			setState(3405);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3402); selectSpec();
					}
					} 
				}
				setState(3407);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			}
			setState(3408); selectElements();
			setState(3410);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3409); fromClause();
				}
			}

			setState(3413);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3412); orderByClause();
				}
				break;
			}
			setState(3416);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3415); limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3418); match(UNION);
			setState(3420);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3419);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3422); queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424); match(UNION);
			setState(3426);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3425);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3430);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3428); querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3429); queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			setState(3440);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3432);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3433); match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3434); match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3435); match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3436); match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3437); match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3438);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3439); match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3444);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(3442); ((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3443); selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3446); match(COMMA);
				setState(3447); selectElement();
				}
				}
				setState(3452);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			setState(3482);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3453); fullId();
				setState(3454); match(DOT);
				setState(3455); match(STAR);
				}
				break;

			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3457); fullColumnName();
				setState(3462);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(3459);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3458); match(AS);
						}
					}

					setState(3461); uid();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3464); functionCall();
				setState(3469);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3466);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3465); match(AS);
						}
					}

					setState(3468); uid();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3473);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(3471); match(LOCAL_ID);
					setState(3472); match(VAR_ASSIGN);
					}
					break;
				}
				setState(3475); expression(0);
				setState(3480);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(3477);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3476); match(AS);
						}
					}

					setState(3479); uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3520);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3484); match(INTO);
				setState(3485); assignmentField();
				setState(3490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3486); match(COMMA);
					setState(3487); assignmentField();
					}
					}
					setState(3492);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3493); match(INTO);
				setState(3494); match(DUMPFILE);
				setState(3495); match(STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3496); match(INTO);
				setState(3497); match(OUTFILE);
				setState(3498); ((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3502);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3499); match(CHARACTER);
					setState(3500); match(SET);
					setState(3501); ((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3510);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(3504);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(3506); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3505); selectFieldsInto();
						}
						}
						setState(3508); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3518);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3512); match(LINES);
					setState(3514); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3513); selectLinesInto();
						}
						}
						setState(3516); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3534);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3522); match(TERMINATED);
				setState(3523); match(BY);
				setState(3524); ((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3526);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3525); match(OPTIONALLY);
					}
				}

				setState(3528); match(ENCLOSED);
				setState(3529); match(BY);
				setState(3530); ((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3531); match(ESCAPED);
				setState(3532); match(BY);
				setState(3533); ((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			setState(3542);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3536); match(STARTING);
				setState(3537); match(BY);
				setState(3538); ((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3539); match(TERMINATED);
				setState(3540); match(BY);
				setState(3541); ((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3544); match(FROM);
			setState(3545); tableSources();
			setState(3548);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3546); match(WHERE);
				setState(3547); ((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			setState(3564);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3550); match(GROUP);
				setState(3551); match(BY);
				setState(3552); groupByItem();
				setState(3557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3553); match(COMMA);
					setState(3554); groupByItem();
					}
					}
					setState(3559);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3562);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(3560); match(WITH);
					setState(3561); match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3568);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3566); match(HAVING);
				setState(3567); ((FromClauseContext)_localctx).havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3570); expression(0);
			setState(3572);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3571);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public DecimalLiteralContext offset;
		public DecimalLiteralContext limit;
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3574); match(LIMIT);
			setState(3585);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(3578);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(3575); ((LimitClauseContext)_localctx).offset = decimalLiteral();
					setState(3576); match(COMMA);
					}
					break;
				}
				setState(3580); ((LimitClauseContext)_localctx).limit = decimalLiteral();
				}
				break;

			case 2:
				{
				setState(3581); ((LimitClauseContext)_localctx).limit = decimalLiteral();
				setState(3582); match(OFFSET);
				setState(3583); ((LimitClauseContext)_localctx).offset = decimalLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartTransaction(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587); match(START);
			setState(3588); match(TRANSACTION);
			setState(3597);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3589); transactionMode();
				setState(3594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3590); match(COMMA);
					setState(3591); transactionMode();
					}
					}
					setState(3596);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBeginWork(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599); match(BEGIN);
			setState(3601);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3600); match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommitWork(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603); match(COMMIT);
			setState(3605);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3604); match(WORK);
				}
			}

			setState(3612);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3607); match(AND);
				setState(3609);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3608); ((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3611); match(CHAIN);
				}
			}

			setState(3618);
			_la = _input.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				setState(3615);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3614); ((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3617); match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackWork(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620); match(ROLLBACK);
			setState(3622);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3621); match(WORK);
				}
			}

			setState(3629);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3624); match(AND);
				setState(3626);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3625); ((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3628); match(CHAIN);
				}
			}

			setState(3635);
			_la = _input.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				setState(3632);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3631); ((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3634); match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepointStatement(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3637); match(SAVEPOINT);
			setState(3638); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackStatement(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640); match(ROLLBACK);
			setState(3642);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3641); match(WORK);
				}
			}

			setState(3644); match(TO);
			setState(3646);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(3645); match(SAVEPOINT);
				}
				break;
			}
			setState(3648); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReleaseStatement(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3650); match(RELEASE);
			setState(3651); match(SAVEPOINT);
			setState(3652); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTables(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3654); match(LOCK);
			setState(3655); match(TABLES);
			setState(3656); lockTableElement();
			setState(3661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3657); match(COMMA);
				setState(3658); lockTableElement();
				}
				}
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlockTables(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664); match(UNLOCK);
			setState(3665); match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommitStatement(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667); match(SET);
			setState(3668); match(AUTOCOMMIT);
			setState(3669); match(EQUAL_SYMBOL);
			setState(3670);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransactionStatement(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672); match(SET);
			setState(3674);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3673);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3676); match(TRANSACTION);
			setState(3677); transactionOption();
			setState(3682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3678); match(COMMA);
				setState(3679); transactionOption();
				}
				}
				setState(3684);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionMode(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_transactionMode);
		try {
			setState(3692);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3685); match(WITH);
				setState(3686); match(CONSISTENT);
				setState(3687); match(SNAPSHOT);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3688); match(READ);
				setState(3689); match(WRITE);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3690); match(READ);
				setState(3691); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTableElement(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3694); tableName();
			setState(3699);
			_la = _input.LA(1);
			if (_la==AS || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(3696);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3695); match(AS);
					}
				}

				setState(3698); uid();
				}
			}

			setState(3701); lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockAction(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockAction);
		int _la;
		try {
			setState(3711);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3703); match(READ);
				setState(3705);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3704); match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3708);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3707); match(LOW_PRIORITY);
					}
				}

				setState(3710); match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionOption(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_transactionOption);
		try {
			setState(3720);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3713); match(ISOLATION);
				setState(3714); match(LEVEL);
				setState(3715); transactionLevel();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3716); match(READ);
				setState(3717); match(WRITE);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3718); match(READ);
				setState(3719); match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevel(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_transactionLevel);
		try {
			setState(3729);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3722); match(REPEATABLE);
				setState(3723); match(READ);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3724); match(READ);
				setState(3725); match(COMMITTED);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3726); match(READ);
				setState(3727); match(UNCOMMITTED);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3728); match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeMaster(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3731); match(CHANGE);
			setState(3732); match(MASTER);
			setState(3733); match(TO);
			setState(3734); masterOption();
			setState(3739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3735); match(COMMA);
				setState(3736); masterOption();
				}
				}
				setState(3741);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3743);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3742); channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeReplicationFilter(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3745); match(CHANGE);
			setState(3746); match(REPLICATION);
			setState(3747); match(FILTER);
			setState(3748); replicationFilter();
			setState(3753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3749); match(COMMA);
				setState(3750); replicationFilter();
				}
				}
				setState(3755);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3756); match(PURGE);
			setState(3757);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(3758); match(LOGS);
			setState(3763);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3759); match(TO);
				setState(3760); ((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3761); match(BEFORE);
				setState(3762); ((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetMaster(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765); match(RESET);
			setState(3766); match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetSlave(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3768); match(RESET);
			setState(3769); match(SLAVE);
			setState(3771);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3770); match(ALL);
				}
			}

			setState(3774);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3773); channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartSlave(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776); match(START);
			setState(3777); match(SLAVE);
			setState(3786);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3778); threadType();
				setState(3783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3779); match(COMMA);
					setState(3780); threadType();
					}
					}
					setState(3785);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3790);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3788); match(UNTIL);
				setState(3789); untilOption();
				}
			}

			setState(3795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3792); connectionOption();
				}
				}
				setState(3797);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3799);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3798); channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopSlave(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3801); match(STOP);
			setState(3802); match(SLAVE);
			setState(3811);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3803); threadType();
				setState(3808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3804); match(COMMA);
					setState(3805); threadType();
					}
					}
					setState(3810);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartGroupReplication(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813); match(START);
			setState(3814); match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopGroupReplication(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816); match(STOP);
			setState(3817); match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterStringOption(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterRealOption(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterBoolOption(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterUidListOption(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterDecimalOption(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_masterOption);
		int _la;
		try {
			setState(3848);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3819); stringMasterOption();
				setState(3820); match(EQUAL_SYMBOL);
				setState(3821); match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3823); decimalMasterOption();
				setState(3824); match(EQUAL_SYMBOL);
				setState(3825); decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3827); boolMasterOption();
				setState(3828); match(EQUAL_SYMBOL);
				setState(3829);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3831); match(MASTER_HEARTBEAT_PERIOD);
				setState(3832); match(EQUAL_SYMBOL);
				setState(3833); match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3834); match(IGNORE_SERVER_IDS);
				setState(3835); match(EQUAL_SYMBOL);
				setState(3836); match(LR_BRACKET);
				setState(3845);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					setState(3837); uid();
					setState(3842);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3838); match(COMMA);
						setState(3839); uid();
						}
						}
						setState(3844);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3847); match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringMasterOption(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (MASTER_HOST - 376)) | (1L << (MASTER_LOG_FILE - 376)) | (1L << (MASTER_PASSWORD - 376)) | (1L << (MASTER_SSL_CA - 376)) | (1L << (MASTER_SSL_CAPATH - 376)) | (1L << (MASTER_SSL_CERT - 376)) | (1L << (MASTER_SSL_CIPHER - 376)) | (1L << (MASTER_SSL_CRL - 376)) | (1L << (MASTER_SSL_CRLPATH - 376)) | (1L << (MASTER_SSL_KEY - 376)) | (1L << (MASTER_TLS_VERSION - 376)) | (1L << (MASTER_USER - 376)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalMasterOption(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3852);
			_la = _input.LA(1);
			if ( !(((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (MASTER_CONNECT_RETRY - 373)) | (1L << (MASTER_DELAY - 373)) | (1L << (MASTER_LOG_POS - 373)) | (1L << (MASTER_PORT - 373)) | (1L << (MASTER_RETRY_COUNT - 373)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolMasterOption(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3854);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelOption(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856); match(FOR);
			setState(3857); match(CHANNEL);
			setState(3858); match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoTableReplication(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreTableReplication(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRewriteDbReplication(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoDbReplication(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreDbReplication(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildDoTableReplication(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_replicationFilter);
		int _la;
		try {
			setState(3909);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3860); match(REPLICATE_DO_DB);
				setState(3861); match(EQUAL_SYMBOL);
				setState(3862); match(LR_BRACKET);
				setState(3863); uidList();
				setState(3864); match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3866); match(REPLICATE_IGNORE_DB);
				setState(3867); match(EQUAL_SYMBOL);
				setState(3868); match(LR_BRACKET);
				setState(3869); uidList();
				setState(3870); match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3872); match(REPLICATE_DO_TABLE);
				setState(3873); match(EQUAL_SYMBOL);
				setState(3874); match(LR_BRACKET);
				setState(3875); tables();
				setState(3876); match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3878); match(REPLICATE_IGNORE_TABLE);
				setState(3879); match(EQUAL_SYMBOL);
				setState(3880); match(LR_BRACKET);
				setState(3881); tables();
				setState(3882); match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3884); match(REPLICATE_WILD_DO_TABLE);
				setState(3885); match(EQUAL_SYMBOL);
				setState(3886); match(LR_BRACKET);
				setState(3887); simpleStrings();
				setState(3888); match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3890); match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3891); match(EQUAL_SYMBOL);
				setState(3892); match(LR_BRACKET);
				setState(3893); simpleStrings();
				setState(3894); match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3896); match(REPLICATE_REWRITE_DB);
				setState(3897); match(EQUAL_SYMBOL);
				setState(3898); match(LR_BRACKET);
				setState(3899); tablePair();
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3900); match(COMMA);
					setState(3901); tablePair();
					}
					}
					setState(3906);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3907); match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablePair(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3911); match(LR_BRACKET);
			setState(3912); ((TablePairContext)_localctx).firstTable = tableName();
			setState(3913); match(COMMA);
			setState(3914); ((TablePairContext)_localctx).secondTable = tableName();
			setState(3915); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThreadType(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3917);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtidsUntilOption(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterLogUntilOption(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelayLogUntilOption(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_untilOption);
		int _la;
		try {
			setState(3937);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3919);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(3920); match(EQUAL_SYMBOL);
				setState(3921); gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3922); match(MASTER_LOG_FILE);
				setState(3923); match(EQUAL_SYMBOL);
				setState(3924); match(STRING_LITERAL);
				setState(3925); match(COMMA);
				setState(3926); match(MASTER_LOG_POS);
				setState(3927); match(EQUAL_SYMBOL);
				setState(3928); decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3929); match(RELAY_LOG_FILE);
				setState(3930); match(EQUAL_SYMBOL);
				setState(3931); match(STRING_LITERAL);
				setState(3932); match(COMMA);
				setState(3933); match(RELAY_LOG_POS);
				setState(3934); match(EQUAL_SYMBOL);
				setState(3935); decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3936); match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserConnectionOption(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordConnectionOption(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_connectionOption);
		try {
			setState(3951);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3939); match(USER);
				setState(3940); match(EQUAL_SYMBOL);
				setState(3941); ((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3942); match(PASSWORD);
				setState(3943); match(EQUAL_SYMBOL);
				setState(3944); ((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3945); match(DEFAULT_AUTH);
				setState(3946); match(EQUAL_SYMBOL);
				setState(3947); ((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3948); match(PLUGIN_DIR);
				setState(3949); match(EQUAL_SYMBOL);
				setState(3950); ((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtuidSet(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_gtuidSet);
		int _la;
		try {
			setState(3962);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3953); uuidSet();
				setState(3958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3954); match(COMMA);
					setState(3955); uuidSet();
					}
					}
					setState(3960);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3961); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaStartTransaction(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964); match(XA);
			setState(3965);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(3966); xid();
			setState(3968);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(3967);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaEndTransaction(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3970); match(XA);
			setState(3971); match(END);
			setState(3972); xid();
			setState(3978);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(3973); match(SUSPEND);
				setState(3976);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3974); match(FOR);
					setState(3975); match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaPrepareStatement(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980); match(XA);
			setState(3981); match(PREPARE);
			setState(3982); xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaCommitWork(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3984); match(XA);
			setState(3985); match(COMMIT);
			setState(3986); xid();
			setState(3989);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(3987); match(ONE);
				setState(3988); match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRollbackWork(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991); match(XA);
			setState(3992); match(ROLLBACK);
			setState(3993); xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRecoverWork(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995); match(XA);
			setState(3996); match(RECOVER);
			setState(3999);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(3997); match(CONVERT);
				setState(3998); xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepareStatement(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001); match(PREPARE);
			setState(4002); uid();
			setState(4003); match(FROM);
			setState(4006);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4004); ((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4005); ((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecuteStatement(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4008); match(EXECUTE);
			setState(4009); uid();
			setState(4012);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4010); match(USING);
				setState(4011); userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocatePrepare(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4014);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(4015); match(PREPARE);
			setState(4016); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_routineBody);
		try {
			setState(4020);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4018); blockStatement();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4019); sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4025);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4022); uid();
				setState(4023); match(COLON_SYMB);
				}
				break;
			}
			setState(4027); match(BEGIN);
			setState(4065);
			_la = _input.LA(1);
			if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DECLARE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0)) {
				{
				setState(4033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4028); declareVariable();
						setState(4029); match(SEMI);
						}
						} 
					}
					setState(4035);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				}
				setState(4041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4036); declareCondition();
						setState(4037); match(SEMI);
						}
						} 
					}
					setState(4043);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
				}
				setState(4049);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4044); declareCursor();
						setState(4045); match(SEMI);
						}
						} 
					}
					setState(4051);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,561,_ctx);
				}
				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4052); declareHandler();
					setState(4053); match(SEMI);
					}
					}
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4061); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4060); procedureSqlStatement();
					}
					}
					setState(4063); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			setState(4067); match(END);
			setState(4069);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4068); uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071); match(CASE);
			setState(4074);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4072); uid();
				}
				break;

			case 2:
				{
				setState(4073); expression(0);
				}
				break;
			}
			setState(4077); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4076); caseAlternative();
				}
				}
				setState(4079); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4087);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4081); match(ELSE);
				setState(4083); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4082); procedureSqlStatement();
					}
					}
					setState(4085); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			setState(4089); match(END);
			setState(4090); match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_ifStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092); match(IF);
			setState(4093); expression(0);
			setState(4094); match(THEN);
			setState(4096); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4095); ((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
				((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
				}
				}
				setState(4098); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			setState(4103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4100); elifAlternative();
				}
				}
				setState(4105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4112);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4106); match(ELSE);
				setState(4108); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4107); ((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					setState(4110); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			setState(4114); match(END);
			setState(4115); match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117); match(ITERATE);
			setState(4118); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4120); match(LEAVE);
			setState(4121); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_loopStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4126);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4123); uid();
				setState(4124); match(COLON_SYMB);
				}
			}

			setState(4128); match(LOOP);
			setState(4130); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4129); procedureSqlStatement();
				}
				}
				setState(4132); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			setState(4134); match(END);
			setState(4135); match(LOOP);
			setState(4137);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4136); uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_repeatStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4139); uid();
				setState(4140); match(COLON_SYMB);
				}
			}

			setState(4144); match(REPEAT);
			setState(4146); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4145); procedureSqlStatement();
				}
				}
				setState(4148); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			setState(4150); match(UNTIL);
			setState(4151); expression(0);
			setState(4152); match(END);
			setState(4153); match(REPEAT);
			setState(4155);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4154); uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157); match(RETURN);
			setState(4158); expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_whileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4160); uid();
				setState(4161); match(COLON_SYMB);
				}
			}

			setState(4165); match(WHILE);
			setState(4166); expression(0);
			setState(4167); match(DO);
			setState(4169); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4168); procedureSqlStatement();
				}
				}
				setState(4171); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			setState(4173); match(END);
			setState(4174); match(WHILE);
			setState(4176);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				setState(4175); uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_cursorStatement);
		int _la;
		try {
			setState(4193);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4178); match(CLOSE);
				setState(4179); uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4180); match(FETCH);
				setState(4185);
				_la = _input.LA(1);
				if (_la==FROM || _la==NEXT) {
					{
					setState(4182);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4181); match(NEXT);
						}
					}

					setState(4184); match(FROM);
					}
				}

				setState(4187); uid();
				setState(4188); match(INTO);
				setState(4189); uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4191); match(OPEN);
				setState(4192); uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195); match(DECLARE);
			setState(4196); uidList();
			setState(4197); dataType();
			setState(4200);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4198); match(DEFAULT);
				setState(4199); defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4202); match(DECLARE);
			setState(4203); uid();
			setState(4204); match(CONDITION);
			setState(4205); match(FOR);
			setState(4212);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4206); decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4207); match(SQLSTATE);
				setState(4209);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4208); match(VALUE);
					}
				}

				setState(4211); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214); match(DECLARE);
			setState(4215); uid();
			setState(4216); match(CURSOR);
			setState(4217); match(FOR);
			setState(4218); selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4220); match(DECLARE);
			setState(4221);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(4222); match(HANDLER);
			setState(4223); match(FOR);
			setState(4224); handlerConditionValue();
			setState(4229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4225); match(COMMA);
				setState(4226); handlerConditionValue();
				}
				}
				setState(4231);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4232); routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4245);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4234); decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4235); match(SQLSTATE);
				setState(4237);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4236); match(VALUE);
					}
				}

				setState(4239); match(STRING_LITERAL);
				}
				break;
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4240); uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4241); match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4242); match(NOT);
				setState(4243); match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4244); match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4249);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(4247); compoundStatement();
				}
				break;

			case 2:
				{
				setState(4248); sqlStatement();
				}
				break;
			}
			setState(4251); match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_caseAlternative);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4253); match(WHEN);
			setState(4256);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(4254); constant();
				}
				break;

			case 2:
				{
				setState(4255); expression(0);
				}
				break;
			}
			setState(4258); match(THEN);
			setState(4260); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4259); procedureSqlStatement();
				}
				}
				setState(4262); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_elifAlternative);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264); match(ELSEIF);
			setState(4265); expression(0);
			setState(4266); match(THEN);
			setState(4268); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4267); procedureSqlStatement();
				}
				}
				setState(4270); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV57(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterUser);
		int _la;
		try {
			setState(4326);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4272); match(ALTER);
				setState(4273); match(USER);
				setState(4274); userSpecification();
				setState(4279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4275); match(COMMA);
					setState(4276); userSpecification();
					}
					}
					setState(4281);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4282); match(ALTER);
				setState(4283); match(USER);
				setState(4285);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4284); ifExists();
					}
				}

				setState(4287); userAuthOption();
				setState(4292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4288); match(COMMA);
					setState(4289); userAuthOption();
					}
					}
					setState(4294);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4309);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4295); match(REQUIRE);
					setState(4307);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4296); ((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4297); tlsOption();
						setState(4304);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4299);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4298); match(AND);
								}
							}

							setState(4301); tlsOption();
							}
							}
							setState(4306);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4317);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4311); match(WITH);
					setState(4313); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4312); userResourceOption();
						}
						}
						setState(4315); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0) );
					}
				}

				setState(4323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4321);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4319); userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4320); userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4325);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV57(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createUser);
		int _la;
		try {
			setState(4382);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4328); match(CREATE);
				setState(4329); match(USER);
				setState(4330); userAuthOption();
				setState(4335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4331); match(COMMA);
					setState(4332); userAuthOption();
					}
					}
					setState(4337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4338); match(CREATE);
				setState(4339); match(USER);
				setState(4341);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4340); ifNotExists();
					}
				}

				setState(4343); userAuthOption();
				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4344); match(COMMA);
					setState(4345); userAuthOption();
					}
					}
					setState(4350);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4365);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4351); match(REQUIRE);
					setState(4363);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4352); ((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4353); tlsOption();
						setState(4360);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4355);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4354); match(AND);
								}
							}

							setState(4357); tlsOption();
							}
							}
							setState(4362);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4373);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4367); match(WITH);
					setState(4369); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4368); userResourceOption();
						}
						}
						setState(4371); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0) );
					}
				}

				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4377);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4375); userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4376); userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4381);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropUser(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384); match(DROP);
			setState(4385); match(USER);
			setState(4387);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4386); ifExists();
				}
			}

			setState(4389); userName();
			setState(4394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4390); match(COMMA);
				setState(4391); userName();
				}
				}
				setState(4396);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantStatement(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_grantStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397); match(GRANT);
			setState(4398); privelegeClause();
			setState(4403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4399); match(COMMA);
				setState(4400); privelegeClause();
				}
				}
				setState(4405);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4406); match(ON);
			setState(4408);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(4407);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(4410); privilegeLevel();
			setState(4411); match(TO);
			setState(4412); userAuthOption();
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4413); match(COMMA);
				setState(4414); userAuthOption();
				}
				}
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4434);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4420); match(REQUIRE);
				setState(4432);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4421); ((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4422); tlsOption();
					setState(4429);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4424);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4423); match(AND);
							}
						}

						setState(4426); tlsOption();
						}
						}
						setState(4431);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4445);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4436); match(WITH);
				setState(4442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==GRANT || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0)) {
					{
					setState(4440);
					switch (_input.LA(1)) {
					case GRANT:
						{
						setState(4437); match(GRANT);
						setState(4438); match(OPTION);
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR:
					case MAX_QUERIES_PER_HOUR:
					case MAX_UPDATES_PER_HOUR:
					case MAX_USER_CONNECTIONS:
						{
						setState(4439); userResourceOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantProxy(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4447); match(GRANT);
			setState(4448); match(PROXY);
			setState(4449); match(ON);
			setState(4450); ((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4451); match(TO);
			setState(4452); ((GrantProxyContext)_localctx).toFirst = userName();
			setState(4457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4453); match(COMMA);
				setState(4454); ((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4463);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4460); match(WITH);
				setState(4461); match(GRANT);
				setState(4462); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUser(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465); match(RENAME);
			setState(4466); match(USER);
			setState(4467); renameUserClause();
			setState(4472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4468); match(COMMA);
				setState(4469); renameUserClause();
				}
				}
				setState(4474);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_revokeStatement);
		int _la;
		try {
			setState(4515);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4475); match(REVOKE);
				setState(4476); privelegeClause();
				setState(4481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4477); match(COMMA);
					setState(4478); privelegeClause();
					}
					}
					setState(4483);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4484); match(ON);
				setState(4486);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(4485);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				setState(4488); privilegeLevel();
				setState(4489); match(FROM);
				setState(4490); userName();
				setState(4495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4491); match(COMMA);
					setState(4492); userName();
					}
					}
					setState(4497);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4498); match(REVOKE);
				setState(4499); match(ALL);
				setState(4501);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4500); match(PRIVILEGES);
					}
				}

				setState(4503); match(COMMA);
				setState(4504); match(GRANT);
				setState(4505); match(OPTION);
				setState(4506); match(FROM);
				setState(4507); userName();
				setState(4512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4508); match(COMMA);
					setState(4509); userName();
					}
					}
					setState(4514);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevokeProxy(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4517); match(REVOKE);
			setState(4518); match(PROXY);
			setState(4519); match(ON);
			setState(4520); ((RevokeProxyContext)_localctx).onUser = userName();
			setState(4521); match(FROM);
			setState(4522); ((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4523); match(COMMA);
				setState(4524); ((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4530); match(SET);
			setState(4531); match(PASSWORD);
			setState(4534);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4532); match(FOR);
				setState(4533); userName();
				}
			}

			setState(4536); match(EQUAL_SYMBOL);
			setState(4539);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4537); passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4538); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserSpecification(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4541); userName();
			setState(4542); userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleAuthOption(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordAuthOption(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringAuthOption(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHashAuthOption(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_userAuthOption);
		int _la;
		try {
			setState(4568);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4544); userName();
				setState(4545); match(IDENTIFIED);
				setState(4546); match(BY);
				setState(4547); match(PASSWORD);
				setState(4548); ((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;

			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4550); userName();
				setState(4551); match(IDENTIFIED);
				setState(4554);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4552); match(WITH);
					setState(4553); authPlugin();
					}
				}

				setState(4556); match(BY);
				setState(4557); match(STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4559); userName();
				setState(4560); match(IDENTIFIED);
				setState(4561); match(WITH);
				setState(4562); authPlugin();
				setState(4565);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4563); match(AS);
					setState(4564); match(STRING_LITERAL);
					}
				}

				}
				break;

			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4567); userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTlsOption(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_tlsOption);
		try {
			setState(4578);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4570); match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4571); match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4572); match(CIPHER);
				setState(4573); match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4574); match(ISSUER);
				setState(4575); match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4576); match(SUBJECT);
				setState(4577); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserResourceOption(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_userResourceOption);
		try {
			setState(4588);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4580); match(MAX_QUERIES_PER_HOUR);
				setState(4581); decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4582); match(MAX_UPDATES_PER_HOUR);
				setState(4583); decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4584); match(MAX_CONNECTIONS_PER_HOUR);
				setState(4585); decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4586); match(MAX_USER_CONNECTIONS);
				setState(4587); decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserPasswordOption(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4590); match(PASSWORD);
			setState(4591); match(EXPIRE);
			setState(4598);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4592); ((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4593); ((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4594); ((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4595); decimalLiteral();
				setState(4596); match(DAY);
				}
				break;
			case EOF:
			case ACCOUNT:
			case PASSWORD:
			case MINUSMINUS:
			case COMMA:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserLockOption(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4600); match(ACCOUNT);
			setState(4601);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelegeClause(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4603); privilege();
			setState(4608);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4604); match(LR_BRACKET);
				setState(4605); uidList();
				setState(4606); match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_privilege);
		int _la;
		try {
			setState(4652);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4610); match(ALL);
				setState(4612);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4611); match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4614); match(ALTER);
				setState(4616);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4615); match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4618); match(CREATE);
				setState(4625);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4619); match(TEMPORARY);
					setState(4620); match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4621); match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4622); match(VIEW);
					}
					break;
				case USER:
					{
					setState(4623); match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4624); match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4627); match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4628); match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4629); match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4630); match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4631); match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4632); match(GRANT);
				setState(4633); match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4634); match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4635); match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4636); match(LOCK);
				setState(4637); match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4638); match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4639); match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4640); match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4641); match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4642); match(REPLICATION);
				setState(4643);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4644); match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4645); match(SHOW);
				setState(4646);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4647); match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4648); match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4649); match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4650); match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4651); match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGlobalPrivLevel(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_privilegeLevel);
		try {
			setState(4667);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4654); match(STAR);
				}
				break;

			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4655); match(STAR);
				setState(4656); match(DOT);
				setState(4657); match(STAR);
				}
				break;

			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4658); uid();
				setState(4659); match(DOT);
				setState(4660); match(STAR);
				}
				break;

			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4662); uid();
				setState(4663); match(DOT);
				setState(4664); uid();
				}
				break;

			case 5:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4666); uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUserClause(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669); ((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(4670); match(TO);
			setState(4671); ((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyzeTable(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673); match(ANALYZE);
			setState(4675);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4674);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(4677); match(TABLE);
			setState(4678); tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTable(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680); match(CHECK);
			setState(4681); match(TABLE);
			setState(4682); tables();
			setState(4686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGED - 266)) | (1L << (EXTENDED - 266)) | (1L << (FAST - 266)))) != 0) || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4683); checkTableOption();
				}
				}
				setState(4688);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksumTable(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689); match(CHECKSUM);
			setState(4690); match(TABLE);
			setState(4691); tables();
			setState(4693);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4692);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimizeTable(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4695); match(OPTIMIZE);
			setState(4697);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4696);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(4699); match(TABLE);
			setState(4700); tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepairTable(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702); match(REPAIR);
			setState(4704);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4703);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(4706); match(TABLE);
			setState(4707); tables();
			setState(4709);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4708); match(QUICK);
				}
			}

			setState(4712);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4711); match(EXTENDED);
				}
			}

			setState(4715);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4714); match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableOption(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_checkTableOption);
		try {
			setState(4724);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4717); match(FOR);
				setState(4718); match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4719); match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4720); match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4721); match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4722); match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4723); match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUdfunction(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4726); match(CREATE);
			setState(4728);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4727); match(AGGREGATE);
				}
			}

			setState(4730); match(FUNCTION);
			setState(4731); uid();
			setState(4732); match(RETURNS);
			setState(4733);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (INTEGER - 173)) | (1L << (REAL - 173)) | (1L << (DECIMAL - 173)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(4734); match(SONAME);
			setState(4735); match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstallPlugin(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4737); match(INSTALL);
			setState(4738); match(PLUGIN);
			setState(4739); uid();
			setState(4740); match(SONAME);
			setState(4741); match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstallPlugin(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4743); match(UNINSTALL);
			setState(4744); match(PLUGIN);
			setState(4745); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPassword(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariable(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_setStatement);
		int _la;
		try {
			setState(4784);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4747); match(SET);
				setState(4748); variableClause();
				setState(4749); match(EQUAL_SYMBOL);
				setState(4750); expression(0);
				setState(4758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4751); match(COMMA);
					setState(4752); variableClause();
					setState(4753); match(EQUAL_SYMBOL);
					setState(4754); expression(0);
					}
					}
					setState(4760);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4761); match(SET);
				setState(4765);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4762); match(CHARACTER);
					setState(4763); match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4764); match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4769);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4767); charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(4768); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4771); match(SET);
				setState(4772); match(NAMES);
				setState(4779);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4773); charsetName();
					setState(4776);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4774); match(COLLATE);
						setState(4775); collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4778); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4781); setPasswordStatement();
				}
				break;

			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4782); setTransactionStatement();
				}
				break;

			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4783); setAutocommitStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_showStatement);
		int _la;
		try {
			setState(4937);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4786); match(SHOW);
				setState(4787);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4788); match(LOGS);
				}
				break;

			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4789); match(SHOW);
				setState(4790);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4791); match(EVENTS);
				setState(4794);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4792); match(IN);
					setState(4793); ((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(4798);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4796); match(FROM);
					setState(4797); ((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(4807);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4800); match(LIMIT);
					setState(4804);
					switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
					case 1:
						{
						setState(4801); ((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(4802); match(COMMA);
						}
						break;
					}
					setState(4806); ((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;

			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4809); match(SHOW);
				setState(4810); showCommonEntity();
				setState(4812);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4811); showFilter();
					}
				}

				}
				break;

			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4814); match(SHOW);
				setState(4816);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4815); match(FULL);
					}
				}

				setState(4818);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4819);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4820); tableName();
				setState(4823);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4821);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(4822); uid();
					}
				}

				setState(4826);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4825); showFilter();
					}
				}

				}
				break;

			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4828); match(SHOW);
				setState(4829); match(CREATE);
				setState(4830);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4832);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4831); ifNotExists();
					}
				}

				setState(4834); uid();
				}
				break;

			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4835); match(SHOW);
				setState(4836); match(CREATE);
				setState(4837);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (PROCEDURE - 111)) | (1L << (TABLE - 111)) | (1L << (TRIGGER - 111)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4838); fullId();
				}
				break;

			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4839); match(SHOW);
				setState(4840); match(CREATE);
				setState(4841); match(USER);
				setState(4842); userName();
				}
				break;

			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4843); match(SHOW);
				setState(4844); match(ENGINE);
				setState(4845); engineName();
				setState(4846);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4848); match(SHOW);
				setState(4849); showGlobalInfoClause();
				}
				break;

			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4850); match(SHOW);
				setState(4851);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				{
				setState(4852); match(LIMIT);
				setState(4856);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(4853); ((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(4854); match(COMMA);
					}
					break;
				}
				setState(4858); ((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;

			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4859); match(SHOW);
				setState(4860); match(COUNT);
				setState(4861); match(LR_BRACKET);
				setState(4862); match(STAR);
				setState(4863); match(RR_BRACKET);
				setState(4864);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4865); match(SHOW);
				setState(4866); showSchemaEntity();
				setState(4869);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4867);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(4868); uid();
					}
				}

				setState(4872);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4871); showFilter();
					}
				}

				}
				break;

			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4874); match(SHOW);
				setState(4875);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4876); match(CODE);
				setState(4877); fullId();
				}
				break;

			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4878); match(SHOW);
				setState(4879); match(GRANTS);
				setState(4882);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4880); match(FOR);
					setState(4881); userName();
					}
				}

				}
				break;

			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4884); match(SHOW);
				setState(4885);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4886);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(4887); tableName();
				setState(4890);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4888);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(4889); uid();
					}
				}

				setState(4894);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4892); match(WHERE);
					setState(4893); expression(0);
					}
				}

				}
				break;

			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4896); match(SHOW);
				setState(4897); match(OPEN);
				setState(4898); match(TABLES);
				setState(4901);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4899);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(4900); uid();
					}
				}

				setState(4904);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4903); showFilter();
					}
				}

				}
				break;

			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4906); match(SHOW);
				setState(4907); match(PROFILE);
				setState(4908); showProfileType();
				setState(4913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4909); match(COMMA);
					setState(4910); showProfileType();
					}
					}
					setState(4915);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4919);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4916); match(FOR);
					setState(4917); match(QUERY);
					setState(4918); ((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(4921); match(LIMIT);
				setState(4925);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(4922); ((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(4923); match(COMMA);
					}
					break;
				}
				setState(4927); ((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;

			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(4929); match(SHOW);
				setState(4930); match(SLAVE);
				setState(4931); match(STATUS);
				setState(4935);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4932); match(FOR);
					setState(4933); match(CHANNEL);
					setState(4934); match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_variableClause);
		int _la;
		try {
			setState(4949);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4939); match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4940); match(GLOBAL_ID);
				}
				break;
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4946);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(4943);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(4941); match(AT_SIGN);
						setState(4942); match(AT_SIGN);
						}
					}

					setState(4945);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				setState(4948); uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_showCommonEntity);
		int _la;
		try {
			setState(4964);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4951); match(CHARACTER);
				setState(4952); match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4953); match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4954); match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4955); match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(4956); match(FUNCTION);
				setState(4957); match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4958); match(PROCEDURE);
				setState(4959); match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(4961);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(4960);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(4963);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_showFilter);
		try {
			setState(4970);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4966); match(LIKE);
				setState(4967); match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4968); match(WHERE);
				setState(4969); expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(4989);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4973);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4972); match(STORAGE);
					}
				}

				setState(4975); match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4976); match(MASTER);
				setState(4977); match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4978); match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(4979); match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(4981);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4980); match(FULL);
					}
				}

				setState(4983); match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(4984); match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4985); match(SLAVE);
				setState(4986); match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(4987); match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(4988); match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_showSchemaEntity);
		int _la;
		try {
			setState(4999);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4991); match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4992); match(TABLE);
				setState(4993); match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4995);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4994); match(FULL);
					}
				}

				setState(4997); match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4998); match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_showProfileType);
		try {
			setState(5013);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5001); match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5002); match(BLOCK);
				setState(5003); match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5004); match(CONTEXT);
				setState(5005); match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5006); match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5007); match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5008); match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5009); match(PAGE);
				setState(5010); match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5011); match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5012); match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlogStatement(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5015); match(BINLOG);
			setState(5016); match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCacheIndexStatement(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018); match(CACHE);
			setState(5019); match(INDEX);
			setState(5020); tableIndexes();
			setState(5025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5021); match(COMMA);
				setState(5022); tableIndexes();
				}
				}
				setState(5027);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5035);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5028); match(PARTITION);
				setState(5029); match(LR_BRACKET);
				setState(5032);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5030); uidList();
					}
					break;
				case ALL:
					{
					setState(5031); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5034); match(RR_BRACKET);
				}
			}

			setState(5037); match(IN);
			setState(5038); ((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushStatement(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5040); match(FLUSH);
			setState(5042);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5041);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(5044); flushOption();
			setState(5049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5045); match(COMMA);
				setState(5046); flushOption();
				}
				}
				setState(5051);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKillStatement(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052); match(KILL);
			setState(5054);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5053);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(5057); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5056); decimalLiteral();
				}
				}
				setState(5059); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5061); match(LOAD);
			setState(5062); match(INDEX);
			setState(5063); match(INTO);
			setState(5064); match(CACHE);
			setState(5065); loadedTableIndexes();
			setState(5070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5066); match(COMMA);
				setState(5067); loadedTableIndexes();
				}
				}
				setState(5072);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetStatement(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5073); match(RESET);
			setState(5074); match(QUERY);
			setState(5075); match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdownStatement(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5077); match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableIndexes(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5079); tableName();
			setState(5087);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5081);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5080);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(5083); match(LR_BRACKET);
				setState(5084); uidList();
				setState(5085); match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableFlushOption(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelFlushOption(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFlushOption(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_flushOption);
		int _la;
		try {
			setState(5119);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5107);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5089); match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5090); match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5092);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (ENGINE - 309)) | (1L << (ERROR - 309)) | (1L << (GENERAL - 309)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5091);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (ENGINE - 309)) | (1L << (ERROR - 309)) | (1L << (GENERAL - 309)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(5094); match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5095); match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5096); match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5097); match(QUERY);
					setState(5098); match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5099); match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5100); match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5101); match(TABLES);
					setState(5105);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5102); match(WITH);
						setState(5103); match(READ);
						setState(5104); match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5109); match(RELAY);
				setState(5110); match(LOGS);
				setState(5112);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5111); channelOption();
					}
				}

				}
				break;

			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5114); match(TABLES);
				setState(5115); tables();
				setState(5117);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5116); flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushTableOption(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushTableOption);
		try {
			setState(5126);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5121); match(WITH);
				setState(5122); match(READ);
				setState(5123); match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5124); match(FOR);
				setState(5125); match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadedTableIndexes(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5128); tableName();
			setState(5136);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5129); match(PARTITION);
				setState(5130); match(LR_BRACKET);
				setState(5133);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5131); ((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5132); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5135); match(RR_BRACKET);
				}
			}

			setState(5145);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5139);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5138);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(5141); match(LR_BRACKET);
				setState(5142); ((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5143); match(RR_BRACKET);
				}
			}

			setState(5149);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5147); match(IGNORE);
				setState(5148); match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5151);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(5152); tableName();
			setState(5155);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(5153); ((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case STRING_LITERAL:
				{
				setState(5154); ((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			case EOF:
			case MINUSMINUS:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5157);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(5161);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5158);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5159); match(EQUAL_SYMBOL);
				setState(5160);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(5163); describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5165); match(HELP);
			setState(5166); match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5168); match(USE);
			setState(5169); uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_describeObjectClause);
		try {
			setState(5181);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5176);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5171); selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5172); deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5173); insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5174); replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5175); updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5178); match(FOR);
				setState(5179); match(CONNECTION);
				setState(5180); uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public FullId value;
		public UidContext u1;
		public Token u2;
		public UidContext u3;
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183); ((FullIdContext)_localctx).u1 = uid();
			 ((FullIdContext)_localctx).value =  new FullId(((FullIdContext)_localctx).u1.value); 
			setState(5191);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5185); ((FullIdContext)_localctx).u2 = match(DOT_ID);
				 _localctx.value.addAST(new ID((((FullIdContext)_localctx).u2!=null?((FullIdContext)_localctx).u2.getText():null))); 
				}
				break;

			case 2:
				{
				setState(5187); match(DOT);
				setState(5188); ((FullIdContext)_localctx).u3 = uid();
				 _localctx.value.addAST(((FullIdContext)_localctx).u3.value); 
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public AST value;
		public FullIdContext fullId;
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5193); ((TableNameContext)_localctx).fullId = fullId();
			 ((TableNameContext)_localctx).value = ((TableNameContext)_localctx).fullId.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_fullColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196); uid();
			setState(5201);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(5197); dottedId();
				setState(5199);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5198); dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public IndexColumnName value;
		public UidContext u;
		public Token sortType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_indexColumnName);
		 ((IndexColumnNameContext)_localctx).value =  new IndexColumnName(); 
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203); ((IndexColumnNameContext)_localctx).u = uid();
			 _localctx.value.setUid(((IndexColumnNameContext)_localctx).u.value);
			setState(5209);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5205); match(LR_BRACKET);
				setState(5206); decimalLiteral();
				setState(5207); match(RR_BRACKET);
				}
			}

			setState(5212);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5211);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5214);
			_la = _input.LA(1);
			if ( !(_la==ID || _la==STRING_USER_NAME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5216);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public AST value;
		public Token b;
		public CharsetNameBaseContext cb;
		public Token s;
		public Token c;
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_charsetName);
		try {
			setState(5227);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5218); ((CharsetNameContext)_localctx).b = match(BINARY);
				 ((CharsetNameContext)_localctx).value =  new CharsetName((((CharsetNameContext)_localctx).b!=null?((CharsetNameContext)_localctx).b.getText():null));
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5220); ((CharsetNameContext)_localctx).cb = charsetNameBase();
				 ((CharsetNameContext)_localctx).value =  ((CharsetNameContext)_localctx).cb.value; 
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5223); ((CharsetNameContext)_localctx).s = match(STRING_LITERAL);
				 ((CharsetNameContext)_localctx).value =  new CharsetName((((CharsetNameContext)_localctx).s!=null?((CharsetNameContext)_localctx).s.getText():null));
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5225); ((CharsetNameContext)_localctx).c = match(CHARSET_REVERSE_QOUTE_STRING);
				 ((CharsetNameContext)_localctx).value =  new CharsetName((((CharsetNameContext)_localctx).c!=null?((CharsetNameContext)_localctx).c.getText():null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public AST value;
		public UidContext uid;
		public Token s;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_collationName);
		try {
			setState(5234);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5229); ((CollationNameContext)_localctx).uid = uid();
				 ((CollationNameContext)_localctx).value =  ((CollationNameContext)_localctx).uid.value;
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5232); ((CollationNameContext)_localctx).s = match(STRING_LITERAL);
				 ((CollationNameContext)_localctx).value =  new ID((((CollationNameContext)_localctx).s!=null?((CollationNameContext)_localctx).s.getText():null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public AST value;
		public Token name;
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFOMANCE_SCHEMA() { return getToken(MySqlParser.PERFOMANCE_SCHEMA, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5236);
			((EngineNameContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 607)) & ~0x3f) == 0 && ((1L << (_la - 607)) & ((1L << (ARCHIVE - 607)) | (1L << (BLACKHOLE - 607)) | (1L << (CSV - 607)) | (1L << (FEDERATED - 607)) | (1L << (INNODB - 607)) | (1L << (MEMORY - 607)) | (1L << (MRG_MYISAM - 607)) | (1L << (MYISAM - 607)) | (1L << (NDB - 607)) | (1L << (NDBCLUSTER - 607)) | (1L << (PERFOMANCE_SCHEMA - 607)))) != 0)) ) {
				((EngineNameContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			consume();
			 ((EngineNameContext)_localctx).value =  new EngineName((((EngineNameContext)_localctx).name!=null?((EngineNameContext)_localctx).name.getText():null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5239); decimalLiteral();
			setState(5240); match(MINUS);
			setState(5241); decimalLiteral();
			setState(5242); match(MINUS);
			setState(5243); decimalLiteral();
			setState(5244); match(MINUS);
			setState(5245); decimalLiteral();
			setState(5246); match(MINUS);
			setState(5247); decimalLiteral();
			setState(5253); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5248); match(COLON_SYMB);
				setState(5249); decimalLiteral();
				setState(5250); match(MINUS);
				setState(5251); decimalLiteral();
				}
				}
				setState(5255); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257); ((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5264);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5258); match(COMMA);
				setState(5259); ((XidContext)_localctx).qualifier = xuidStringId();
				setState(5262);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5260); match(COMMA);
					setState(5261); ((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_xuidStringId);
		int _la;
		try {
			setState(5273);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5266); match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5267); match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5269); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5268); match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5271); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_authPlugin);
		try {
			setState(5277);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5275); uid();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5276); match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public AST value;
		public SimpleIdContext s;
		public Token q;
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_uid);
		try {
			setState(5285);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5279); ((UidContext)_localctx).s = simpleId();
				 ((UidContext)_localctx).value =  ((UidContext)_localctx).s.value; 
				}
				break;
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5282); ((UidContext)_localctx).q = match(REVERSE_QUOTE_ID);
				 ((UidContext)_localctx).value =  new QuotedID((((UidContext)_localctx).q!=null?((UidContext)_localctx).q.getText():null)); 
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(5284); match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public AST value;
		public Token i;
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_simpleId);
		try {
			setState(5297);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5287); ((SimpleIdContext)_localctx).i = match(ID);
				  ((SimpleIdContext)_localctx).value =  new ID((((SimpleIdContext)_localctx).i!=null?((SimpleIdContext)_localctx).i.getText():null)); 
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289); charsetNameBase();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5290); transactionLevelBase();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5291); engineName();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5292); privilegesBase();
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5293); intervalTypeBase();
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5294); dataTypeBase();
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5295); keywordsCanBeId();
				}
				break;

			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5296); functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_dottedId);
		try {
			setState(5302);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5299); match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5300); match(DOT);
				setState(5301); uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public AST value;
		public Token l;
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5304);
			((DecimalLiteralContext)_localctx).l = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0)) ) {
				((DecimalLiteralContext)_localctx).l = (Token)_errHandler.recoverInline(this);
			}
			consume();
			 ((DecimalLiteralContext)_localctx).value =  new DecimalLiteral((((DecimalLiteralContext)_localctx).l!=null?((DecimalLiteralContext)_localctx).l.getText():null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public AST value;
		public DecimalLiteralContext d;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_fileSizeLiteral);
		try {
			setState(5311);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5307); match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5308); ((FileSizeLiteralContext)_localctx).d = decimalLiteral();
				 ((FileSizeLiteralContext)_localctx).value =  ((FileSizeLiteralContext)_localctx).d.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5336);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5318);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5314);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5313); match(STRING_CHARSET_NAME);
						}
					}

					setState(5316); match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5317); match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5321); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5320); match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5323); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,751,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5330);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5326);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5325); match(STRING_CHARSET_NAME);
						}
					}

					setState(5328); match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5329); match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5334);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5332); match(COLLATE);
					setState(5333); collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5338);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5340); match(STRING_CHARSET_NAME);
				}
			}

			setState(5343); match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5346);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5345); match(NOT);
				}
			}

			setState(5348);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_constant);
		int _la;
		try {
			setState(5360);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5350); stringLiteral();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5351); decimalLiteral();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5352); hexadecimalLiteral();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5353); booleanLiteral();
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5354); match(REAL_LITERAL);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5355); match(BIT_STRING);
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5357);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5356); match(NOT);
					}
				}

				setState(5359);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_dataType);
		int _la;
		try {
			setState(5438);
			switch (_input.LA(1)) {
			case CHAR:
			case VARCHAR:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5362);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (CHAR - 185)) | (1L << (VARCHAR - 185)) | (1L << (TINYTEXT - 185)) | (1L << (TEXT - 185)) | (1L << (MEDIUMTEXT - 185)) | (1L << (LONGTEXT - 185)))) != 0)) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5364);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(5363); lengthOneDimension();
					}
					break;
				}
				setState(5367);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5366); match(BINARY);
					}
				}

				setState(5372);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5369); match(CHARACTER);
					setState(5370); match(SET);
					setState(5371); charsetName();
					}
				}

				setState(5376);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5374); match(COLLATE);
					setState(5375); collationName();
					}
				}

				}
				break;
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5378);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (TINYINT - 169)) | (1L << (SMALLINT - 169)) | (1L << (MEDIUMINT - 169)) | (1L << (INT - 169)) | (1L << (INTEGER - 169)) | (1L << (BIGINT - 169)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				 
				setState(5381);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(5380); lengthOneDimension();
					}
					break;
				}
				setState(5384);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5383); match(UNSIGNED);
					}
				}

				setState(5387);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5386); match(ZEROFILL);
					}
				}

				}
				break;
			case REAL:
			case DOUBLE:
			case FLOAT:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5389);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (REAL - 175)) | (1L << (DOUBLE - 175)) | (1L << (FLOAT - 175)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5391);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(5390); lengthTwoDimension();
					}
					break;
				}
				setState(5394);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5393); match(UNSIGNED);
					}
				}

				setState(5397);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5396); match(ZEROFILL);
					}
				}

				}
				break;
			case DECIMAL:
			case NUMERIC:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5399);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5401);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(5400); lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5404);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5403); match(UNSIGNED);
					}
				}

				setState(5407);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5406); match(ZEROFILL);
					}
				}

				}
				break;
			case DATE:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case BOOL:
			case BOOLEAN:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5409);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TINYBLOB - 180)) | (1L << (BLOB - 180)) | (1L << (MEDIUMBLOB - 180)) | (1L << (LONGBLOB - 180)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case VARBINARY:
			case BIT:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5410);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (BINARY - 181)) | (1L << (VARBINARY - 181)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5412);
				switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
				case 1:
					{
					setState(5411); lengthOneDimension();
					}
					break;
				}
				}
				break;
			case SET:
			case ENUM:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5414);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5415); match(LR_BRACKET);
				setState(5416); match(STRING_LITERAL);
				setState(5421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5417); match(COMMA);
					setState(5418); match(STRING_LITERAL);
					}
					}
					setState(5423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5424); match(RR_BRACKET);
				setState(5426);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5425); match(BINARY);
					}
				}

				setState(5431);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5428); match(CHARACTER);
					setState(5429); match(SET);
					setState(5430); charsetName();
					}
				}

				setState(5435);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5433); match(COLLATE);
					setState(5434); collationName();
					}
				}

				}
				break;
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5437);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (GEOMETRYCOLLECTION - 622)) | (1L << (LINESTRING - 622)) | (1L << (MULTILINESTRING - 622)) | (1L << (MULTIPOINT - 622)) | (1L << (MULTIPOLYGON - 622)) | (1L << (POINT - 622)) | (1L << (POLYGON - 622)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_convertedDataType);
		int _la;
		try {
			setState(5462);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5440);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5442);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5441); lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5444); ((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5446);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5445); lengthOneDimension();
					}
				}

				setState(5451);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(5448); match(CHARACTER);
					setState(5449); match(SET);
					setState(5450); charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(5453);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (DATETIME - 180)))) != 0)) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5454); ((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5456);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5455); lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5458);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5460);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5459); match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5464); match(LR_BRACKET);
			setState(5465); decimalLiteral();
			setState(5466); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5468); match(LR_BRACKET);
			setState(5469); decimalLiteral();
			setState(5470); match(COMMA);
			setState(5471); decimalLiteral();
			setState(5472); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5474); match(LR_BRACKET);
			setState(5475); decimalLiteral();
			setState(5478);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5476); match(COMMA);
				setState(5477); decimalLiteral();
				}
			}

			setState(5480); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5482); uid();
			setState(5487);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,786,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5483); match(COMMA);
					setState(5484); uid();
					}
					} 
				}
				setState(5489);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,786,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5490); tableName();
			setState(5495);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5491); match(COMMA);
					setState(5492); tableName();
					}
					} 
				}
				setState(5497);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public List value;
		public IndexColumnNameContext i;
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_indexColumnNames);
		 ((IndexColumnNamesContext)_localctx).value =  new ArrayList(); 
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5498); match(LR_BRACKET);
			setState(5499); ((IndexColumnNamesContext)_localctx).i = indexColumnName();
			 _localctx.value.add(((IndexColumnNamesContext)_localctx).i.value); 
			setState(5507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5501); match(COMMA);
				setState(5502); ((IndexColumnNamesContext)_localctx).i = indexColumnName();
				 _localctx.value.add(((IndexColumnNamesContext)_localctx).i.value);
				}
				}
				setState(5509);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5510); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5512); expression(0);
			setState(5517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5513); match(COMMA);
				setState(5514); expression(0);
				}
				}
				setState(5519);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5520); expressionOrDefault();
			setState(5525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5521); match(COMMA);
				setState(5522); expressionOrDefault();
				}
				}
				setState(5527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5528); constant();
			setState(5533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5529); match(COMMA);
				setState(5530); constant();
				}
				}
				setState(5535);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5536); match(STRING_LITERAL);
			setState(5541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5537); match(COMMA);
				setState(5538); match(STRING_LITERAL);
				}
				}
				setState(5543);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5544); match(LOCAL_ID);
			setState(5549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5545); match(COMMA);
				setState(5546); match(LOCAL_ID);
				}
				}
				setState(5551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_defaultValue);
		int _la;
		try {
			setState(5560);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5552); match(NULL_LITERAL);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5553); constant();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5554); match(CURRENT_TIMESTAMP);
				setState(5558);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5555); match(ON);
					setState(5556); match(UPDATE);
					setState(5557); match(LOCALTIMESTAMP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_expressionOrDefault);
		try {
			setState(5564);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5562); expression(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5563); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5566); match(IF);
			setState(5567); match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5569); match(IF);
			setState(5570); match(NOT);
			setState(5571); match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_functionCall);
		int _la;
		try {
			setState(5590);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5573); specificFunction();
				}
				break;

			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5574); aggregateWindowedFunction();
				}
				break;

			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5575); scalarFunctionName();
				setState(5576); match(LR_BRACKET);
				setState(5578);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (TRUE - 151)) | (1L << (VALUES - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (CHAR - 151)) | (1L << (BINARY - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (AVG - 151)) | (1L << (BIT_AND - 151)) | (1L << (BIT_OR - 151)) | (1L << (BIT_XOR - 151)) | (1L << (COUNT - 151)) | (1L << (GROUP_CONCAT - 151)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (MAX - 215)) | (1L << (MIN - 215)) | (1L << (STD - 215)) | (1L << (STDDEV - 215)) | (1L << (STDDEV_POP - 215)) | (1L << (STDDEV_SAMP - 215)) | (1L << (SUM - 215)) | (1L << (VAR_POP - 215)) | (1L << (VAR_SAMP - 215)) | (1L << (VARIANCE - 215)) | (1L << (CURRENT_DATE - 215)) | (1L << (CURRENT_TIME - 215)) | (1L << (CURRENT_TIMESTAMP - 215)) | (1L << (LOCALTIME - 215)) | (1L << (CURDATE - 215)) | (1L << (CURTIME - 215)) | (1L << (DATE_ADD - 215)) | (1L << (DATE_SUB - 215)) | (1L << (EXTRACT - 215)) | (1L << (LOCALTIMESTAMP - 215)) | (1L << (NOW - 215)) | (1L << (POSITION - 215)) | (1L << (SUBSTR - 215)) | (1L << (SUBSTRING - 215)) | (1L << (SYSDATE - 215)) | (1L << (TRIM - 215)) | (1L << (UTC_DATE - 215)) | (1L << (UTC_TIME - 215)) | (1L << (UTC_TIMESTAMP - 215)) | (1L << (ACCOUNT - 215)) | (1L << (ACTION - 215)) | (1L << (AFTER - 215)) | (1L << (AGGREGATE - 215)) | (1L << (ALGORITHM - 215)) | (1L << (ANY - 215)) | (1L << (AT - 215)) | (1L << (AUTHORS - 215)) | (1L << (AUTOCOMMIT - 215)) | (1L << (AUTOEXTEND_SIZE - 215)) | (1L << (AUTO_INCREMENT - 215)) | (1L << (AVG_ROW_LENGTH - 215)) | (1L << (BEGIN - 215)) | (1L << (BINLOG - 215)) | (1L << (BIT - 215)) | (1L << (BLOCK - 215)) | (1L << (BOOL - 215)) | (1L << (BOOLEAN - 215)) | (1L << (BTREE - 215)) | (1L << (CASCADED - 215)) | (1L << (CHAIN - 215)) | (1L << (CHANNEL - 215)) | (1L << (CHECKSUM - 215)) | (1L << (CIPHER - 215)) | (1L << (CLIENT - 215)) | (1L << (COALESCE - 215)) | (1L << (CODE - 215)) | (1L << (COLUMNS - 215)) | (1L << (COLUMN_FORMAT - 215)) | (1L << (COMMENT - 215)) | (1L << (COMMIT - 215)) | (1L << (COMPACT - 215)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (COMPLETION - 279)) | (1L << (COMPRESSED - 279)) | (1L << (COMPRESSION - 279)) | (1L << (CONCURRENT - 279)) | (1L << (CONNECTION - 279)) | (1L << (CONSISTENT - 279)) | (1L << (CONTAINS - 279)) | (1L << (CONTEXT - 279)) | (1L << (CONTRIBUTORS - 279)) | (1L << (COPY - 279)) | (1L << (CPU - 279)) | (1L << (DATA - 279)) | (1L << (DATAFILE - 279)) | (1L << (DEALLOCATE - 279)) | (1L << (DEFAULT_AUTH - 279)) | (1L << (DEFINER - 279)) | (1L << (DELAY_KEY_WRITE - 279)) | (1L << (DIRECTORY - 279)) | (1L << (DISABLE - 279)) | (1L << (DISCARD - 279)) | (1L << (DISK - 279)) | (1L << (DO - 279)) | (1L << (DUMPFILE - 279)) | (1L << (DUPLICATE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENABLE - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (ENDS - 279)) | (1L << (ENGINE - 279)) | (1L << (ENGINES - 279)) | (1L << (ERROR - 279)) | (1L << (ERRORS - 279)) | (1L << (ESCAPE - 279)) | (1L << (EVEN - 279)) | (1L << (EVENT - 279)) | (1L << (EVENTS - 279)) | (1L << (EVERY - 279)) | (1L << (EXCHANGE - 279)) | (1L << (EXCLUSIVE - 279)) | (1L << (EXPIRE - 279)) | (1L << (EXTENT_SIZE - 279)) | (1L << (FAULTS - 279)) | (1L << (FIELDS - 279)) | (1L << (FILE_BLOCK_SIZE - 279)) | (1L << (FILTER - 279)) | (1L << (FIRST - 279)) | (1L << (FIXED - 279)) | (1L << (FOLLOWS - 279)) | (1L << (FULL - 279)) | (1L << (FUNCTION - 279)) | (1L << (GLOBAL - 279)) | (1L << (GRANTS - 279)) | (1L << (GROUP_REPLICATION - 279)) | (1L << (HASH - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (HOST - 343)) | (1L << (IDENTIFIED - 343)) | (1L << (IGNORE_SERVER_IDS - 343)) | (1L << (IMPORT - 343)) | (1L << (INDEXES - 343)) | (1L << (INITIAL_SIZE - 343)) | (1L << (INPLACE - 343)) | (1L << (INSERT_METHOD - 343)) | (1L << (INSTANCE - 343)) | (1L << (INVOKER - 343)) | (1L << (IO - 343)) | (1L << (IO_THREAD - 343)) | (1L << (IPC - 343)) | (1L << (ISOLATION - 343)) | (1L << (ISSUER - 343)) | (1L << (KEY_BLOCK_SIZE - 343)) | (1L << (LANGUAGE - 343)) | (1L << (LAST - 343)) | (1L << (LEAVES - 343)) | (1L << (LESS - 343)) | (1L << (LEVEL - 343)) | (1L << (LIST - 343)) | (1L << (LOCAL - 343)) | (1L << (LOGFILE - 343)) | (1L << (LOGS - 343)) | (1L << (MASTER - 343)) | (1L << (MASTER_AUTO_POSITION - 343)) | (1L << (MASTER_CONNECT_RETRY - 343)) | (1L << (MASTER_DELAY - 343)) | (1L << (MASTER_HEARTBEAT_PERIOD - 343)) | (1L << (MASTER_HOST - 343)) | (1L << (MASTER_LOG_FILE - 343)) | (1L << (MASTER_LOG_POS - 343)) | (1L << (MASTER_PASSWORD - 343)) | (1L << (MASTER_PORT - 343)) | (1L << (MASTER_RETRY_COUNT - 343)) | (1L << (MASTER_SSL - 343)) | (1L << (MASTER_SSL_CA - 343)) | (1L << (MASTER_SSL_CAPATH - 343)) | (1L << (MASTER_SSL_CERT - 343)) | (1L << (MASTER_SSL_CIPHER - 343)) | (1L << (MASTER_SSL_CRL - 343)) | (1L << (MASTER_SSL_CRLPATH - 343)) | (1L << (MASTER_SSL_KEY - 343)) | (1L << (MASTER_TLS_VERSION - 343)) | (1L << (MASTER_USER - 343)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 343)) | (1L << (MAX_QUERIES_PER_HOUR - 343)) | (1L << (MAX_ROWS - 343)) | (1L << (MAX_SIZE - 343)) | (1L << (MAX_UPDATES_PER_HOUR - 343)) | (1L << (MAX_USER_CONNECTIONS - 343)) | (1L << (MERGE - 343)) | (1L << (MID - 343)) | (1L << (MIGRATE - 343)) | (1L << (MIN_ROWS - 343)) | (1L << (MODIFY - 343)) | (1L << (MUTEX - 343)) | (1L << (MYSQL - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (NAME - 407)) | (1L << (NAMES - 407)) | (1L << (NCHAR - 407)) | (1L << (NEVER - 407)) | (1L << (NO - 407)) | (1L << (NODEGROUP - 407)) | (1L << (NONE - 407)) | (1L << (OFFLINE - 407)) | (1L << (OFFSET - 407)) | (1L << (OJ - 407)) | (1L << (OLD_PASSWORD - 407)) | (1L << (ONE - 407)) | (1L << (ONLINE - 407)) | (1L << (ONLY - 407)) | (1L << (OPTIMIZER_COSTS - 407)) | (1L << (OPTIONS - 407)) | (1L << (OWNER - 407)) | (1L << (PACK_KEYS - 407)) | (1L << (PAGE - 407)) | (1L << (PARSER - 407)) | (1L << (PARTIAL - 407)) | (1L << (PARTITIONING - 407)) | (1L << (PARTITIONS - 407)) | (1L << (PASSWORD - 407)) | (1L << (PHASE - 407)) | (1L << (PLUGIN_DIR - 407)) | (1L << (PLUGINS - 407)) | (1L << (PORT - 407)) | (1L << (PRECEDES - 407)) | (1L << (PREPARE - 407)) | (1L << (PRESERVE - 407)) | (1L << (PREV - 407)) | (1L << (PROCESSLIST - 407)) | (1L << (PROFILE - 407)) | (1L << (PROFILES - 407)) | (1L << (PROXY - 407)) | (1L << (QUERY - 407)) | (1L << (QUICK - 407)) | (1L << (REBUILD - 407)) | (1L << (RECOVER - 407)) | (1L << (REDO_BUFFER_SIZE - 407)) | (1L << (REDUNDANT - 407)) | (1L << (RELAY_LOG_FILE - 407)) | (1L << (RELAY_LOG_POS - 407)) | (1L << (RELAYLOG - 407)) | (1L << (REMOVE - 407)) | (1L << (REORGANIZE - 407)) | (1L << (REPAIR - 407)) | (1L << (REPLICATE_DO_DB - 407)) | (1L << (REPLICATE_DO_TABLE - 407)) | (1L << (REPLICATE_IGNORE_DB - 407)) | (1L << (REPLICATE_IGNORE_TABLE - 407)) | (1L << (REPLICATE_REWRITE_DB - 407)) | (1L << (REPLICATE_WILD_DO_TABLE - 407)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 407)) | (1L << (REPLICATION - 407)) | (1L << (RESUME - 407)) | (1L << (RETURNS - 407)) | (1L << (ROLLBACK - 407)))) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (ROLLUP - 471)) | (1L << (ROTATE - 471)) | (1L << (ROW - 471)) | (1L << (ROWS - 471)) | (1L << (ROW_FORMAT - 471)) | (1L << (SAVEPOINT - 471)) | (1L << (SCHEDULE - 471)) | (1L << (SECURITY - 471)) | (1L << (SERVER - 471)) | (1L << (SESSION - 471)) | (1L << (SHARE - 471)) | (1L << (SHARED - 471)) | (1L << (SIGNED - 471)) | (1L << (SIMPLE - 471)) | (1L << (SLAVE - 471)) | (1L << (SNAPSHOT - 471)) | (1L << (SOCKET - 471)) | (1L << (SOME - 471)) | (1L << (SOUNDS - 471)) | (1L << (SOURCE - 471)) | (1L << (SQL_AFTER_GTIDS - 471)) | (1L << (SQL_AFTER_MTS_GAPS - 471)) | (1L << (SQL_BEFORE_GTIDS - 471)) | (1L << (SQL_BUFFER_RESULT - 471)) | (1L << (SQL_CACHE - 471)) | (1L << (SQL_NO_CACHE - 471)) | (1L << (SQL_THREAD - 471)) | (1L << (START - 471)) | (1L << (STARTS - 471)) | (1L << (STATS_AUTO_RECALC - 471)) | (1L << (STATS_PERSISTENT - 471)) | (1L << (STATS_SAMPLE_PAGES - 471)) | (1L << (STATUS - 471)) | (1L << (STOP - 471)) | (1L << (STORAGE - 471)) | (1L << (STRING - 471)) | (1L << (SUBJECT - 471)) | (1L << (SUBPARTITION - 471)) | (1L << (SUBPARTITIONS - 471)) | (1L << (SUSPEND - 471)) | (1L << (SWAPS - 471)) | (1L << (SWITCHES - 471)) | (1L << (TABLESPACE - 471)) | (1L << (TEMPORARY - 471)) | (1L << (TEMPTABLE - 471)) | (1L << (THAN - 471)) | (1L << (TRANSACTION - 471)) | (1L << (TRUNCATE - 471)) | (1L << (UNDEFINED - 471)) | (1L << (UNDOFILE - 471)) | (1L << (UNDO_BUFFER_SIZE - 471)) | (1L << (UNKNOWN - 471)) | (1L << (UPGRADE - 471)) | (1L << (USER - 471)) | (1L << (VALIDATION - 471)) | (1L << (VALUE - 471)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (VARIABLES - 535)) | (1L << (VIEW - 535)) | (1L << (WAIT - 535)) | (1L << (WARNINGS - 535)) | (1L << (WITHOUT - 535)) | (1L << (WORK - 535)) | (1L << (WRAPPER - 535)) | (1L << (X509 - 535)) | (1L << (XA - 535)) | (1L << (XML - 535)) | (1L << (QUARTER - 535)) | (1L << (MONTH - 535)) | (1L << (DAY - 535)) | (1L << (HOUR - 535)) | (1L << (MINUTE - 535)) | (1L << (WEEK - 535)) | (1L << (SECOND - 535)) | (1L << (MICROSECOND - 535)) | (1L << (TABLES - 535)) | (1L << (ROUTINE - 535)) | (1L << (EXECUTE - 535)) | (1L << (FILE - 535)) | (1L << (PROCESS - 535)) | (1L << (RELOAD - 535)) | (1L << (SHUTDOWN - 535)) | (1L << (SUPER - 535)) | (1L << (PRIVILEGES - 535)) | (1L << (ARMSCII8 - 535)) | (1L << (ASCII - 535)) | (1L << (BIG5 - 535)) | (1L << (CP1250 - 535)) | (1L << (CP1251 - 535)) | (1L << (CP1256 - 535)) | (1L << (CP1257 - 535)) | (1L << (CP850 - 535)) | (1L << (CP852 - 535)) | (1L << (CP866 - 535)) | (1L << (CP932 - 535)) | (1L << (DEC8 - 535)) | (1L << (EUCJPMS - 535)) | (1L << (EUCKR - 535)) | (1L << (GB2312 - 535)) | (1L << (GBK - 535)) | (1L << (GEOSTD8 - 535)) | (1L << (GREEK - 535)) | (1L << (HEBREW - 535)) | (1L << (HP8 - 535)) | (1L << (KEYBCS2 - 535)) | (1L << (KOI8R - 535)) | (1L << (KOI8U - 535)) | (1L << (LATIN1 - 535)) | (1L << (LATIN2 - 535)) | (1L << (LATIN5 - 535)) | (1L << (LATIN7 - 535)) | (1L << (MACCE - 535)) | (1L << (MACROMAN - 535)) | (1L << (SJIS - 535)) | (1L << (SWE7 - 535)) | (1L << (TIS620 - 535)))) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)) | (1L << (ARCHIVE - 599)) | (1L << (BLACKHOLE - 599)) | (1L << (CSV - 599)) | (1L << (FEDERATED - 599)) | (1L << (INNODB - 599)) | (1L << (MEMORY - 599)) | (1L << (MRG_MYISAM - 599)) | (1L << (MYISAM - 599)) | (1L << (NDB - 599)) | (1L << (NDBCLUSTER - 599)) | (1L << (PERFOMANCE_SCHEMA - 599)) | (1L << (REPEATABLE - 599)) | (1L << (COMMITTED - 599)) | (1L << (UNCOMMITTED - 599)) | (1L << (SERIALIZABLE - 599)) | (1L << (GEOMETRYCOLLECTION - 599)) | (1L << (LINESTRING - 599)) | (1L << (MULTILINESTRING - 599)) | (1L << (MULTIPOINT - 599)) | (1L << (MULTIPOLYGON - 599)) | (1L << (POINT - 599)) | (1L << (POLYGON - 599)) | (1L << (ABS - 599)) | (1L << (ACOS - 599)) | (1L << (ADDDATE - 599)) | (1L << (ADDTIME - 599)) | (1L << (AES_DECRYPT - 599)) | (1L << (AES_ENCRYPT - 599)) | (1L << (AREA - 599)) | (1L << (ASBINARY - 599)) | (1L << (ASIN - 599)) | (1L << (ASTEXT - 599)) | (1L << (ASWKB - 599)) | (1L << (ASWKT - 599)) | (1L << (ASYMMETRIC_DECRYPT - 599)) | (1L << (ASYMMETRIC_DERIVE - 599)) | (1L << (ASYMMETRIC_ENCRYPT - 599)) | (1L << (ASYMMETRIC_SIGN - 599)) | (1L << (ASYMMETRIC_VERIFY - 599)) | (1L << (ATAN - 599)) | (1L << (ATAN2 - 599)) | (1L << (BENCHMARK - 599)) | (1L << (BIN - 599)) | (1L << (BIT_COUNT - 599)) | (1L << (BIT_LENGTH - 599)) | (1L << (BUFFER - 599)) | (1L << (CEIL - 599)) | (1L << (CEILING - 599)) | (1L << (CENTROID - 599)) | (1L << (CHARACTER_LENGTH - 599)) | (1L << (CHARSET - 599)) | (1L << (CHAR_LENGTH - 599)) | (1L << (COERCIBILITY - 599)) | (1L << (COLLATION - 599)) | (1L << (COMPRESS - 599)) | (1L << (CONCAT - 599)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (CONCAT_WS - 663)) | (1L << (CONNECTION_ID - 663)) | (1L << (CONV - 663)) | (1L << (CONVERT_TZ - 663)) | (1L << (COS - 663)) | (1L << (COT - 663)) | (1L << (CRC32 - 663)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1L << (CREATE_DH_PARAMETERS - 663)) | (1L << (CREATE_DIGEST - 663)) | (1L << (CROSSES - 663)) | (1L << (DATEDIFF - 663)) | (1L << (DATE_FORMAT - 663)) | (1L << (DAYNAME - 663)) | (1L << (DAYOFMONTH - 663)) | (1L << (DAYOFWEEK - 663)) | (1L << (DAYOFYEAR - 663)) | (1L << (DECODE - 663)) | (1L << (DEGREES - 663)) | (1L << (DES_DECRYPT - 663)) | (1L << (DES_ENCRYPT - 663)) | (1L << (DIMENSION - 663)) | (1L << (DISJOINT - 663)) | (1L << (ELT - 663)) | (1L << (ENCODE - 663)) | (1L << (ENCRYPT - 663)) | (1L << (ENDPOINT - 663)) | (1L << (ENVELOPE - 663)) | (1L << (EQUALS - 663)) | (1L << (EXP - 663)) | (1L << (EXPORT_SET - 663)) | (1L << (EXTERIORRING - 663)) | (1L << (EXTRACTVALUE - 663)) | (1L << (FIELD - 663)) | (1L << (FIND_IN_SET - 663)) | (1L << (FLOOR - 663)) | (1L << (FORMAT - 663)) | (1L << (FOUND_ROWS - 663)) | (1L << (FROM_BASE64 - 663)) | (1L << (FROM_DAYS - 663)) | (1L << (FROM_UNIXTIME - 663)) | (1L << (GEOMCOLLFROMTEXT - 663)) | (1L << (GEOMCOLLFROMWKB - 663)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 663)) | (1L << (GEOMETRYFROMTEXT - 663)) | (1L << (GEOMETRYFROMWKB - 663)) | (1L << (GEOMETRYN - 663)) | (1L << (GEOMETRYTYPE - 663)) | (1L << (GEOMFROMTEXT - 663)) | (1L << (GEOMFROMWKB - 663)) | (1L << (GET_FORMAT - 663)) | (1L << (GET_LOCK - 663)) | (1L << (GLENGTH - 663)) | (1L << (GREATEST - 663)) | (1L << (GTID_SUBSET - 663)) | (1L << (GTID_SUBTRACT - 663)) | (1L << (HEX - 663)) | (1L << (IFNULL - 663)) | (1L << (INET6_ATON - 663)) | (1L << (INET6_NTOA - 663)) | (1L << (INET_ATON - 663)) | (1L << (INET_NTOA - 663)))) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & ((1L << (INSTR - 727)) | (1L << (INTERIORRINGN - 727)) | (1L << (INTERSECTS - 727)) | (1L << (ISCLOSED - 727)) | (1L << (ISEMPTY - 727)) | (1L << (ISNULL - 727)) | (1L << (ISSIMPLE - 727)) | (1L << (IS_FREE_LOCK - 727)) | (1L << (IS_IPV4 - 727)) | (1L << (IS_IPV4_COMPAT - 727)) | (1L << (IS_IPV4_MAPPED - 727)) | (1L << (IS_IPV6 - 727)) | (1L << (IS_USED_LOCK - 727)) | (1L << (LAST_INSERT_ID - 727)) | (1L << (LCASE - 727)) | (1L << (LEAST - 727)) | (1L << (LENGTH - 727)) | (1L << (LINEFROMTEXT - 727)) | (1L << (LINEFROMWKB - 727)) | (1L << (LINESTRINGFROMTEXT - 727)) | (1L << (LINESTRINGFROMWKB - 727)) | (1L << (LN - 727)) | (1L << (LOAD_FILE - 727)) | (1L << (LOCATE - 727)) | (1L << (LOG - 727)) | (1L << (LOG10 - 727)) | (1L << (LOG2 - 727)) | (1L << (LOWER - 727)) | (1L << (LPAD - 727)) | (1L << (LTRIM - 727)) | (1L << (MAKEDATE - 727)) | (1L << (MAKETIME - 727)) | (1L << (MAKE_SET - 727)) | (1L << (MASTER_POS_WAIT - 727)) | (1L << (MBRCONTAINS - 727)) | (1L << (MBRDISJOINT - 727)) | (1L << (MBREQUAL - 727)) | (1L << (MBRINTERSECTS - 727)) | (1L << (MBROVERLAPS - 727)) | (1L << (MBRTOUCHES - 727)) | (1L << (MBRWITHIN - 727)) | (1L << (MD5 - 727)) | (1L << (MLINEFROMTEXT - 727)) | (1L << (MLINEFROMWKB - 727)) | (1L << (MONTHNAME - 727)) | (1L << (MPOINTFROMTEXT - 727)) | (1L << (MPOINTFROMWKB - 727)) | (1L << (MPOLYFROMTEXT - 727)) | (1L << (MPOLYFROMWKB - 727)) | (1L << (MULTILINESTRINGFROMTEXT - 727)) | (1L << (MULTILINESTRINGFROMWKB - 727)) | (1L << (MULTIPOINTFROMTEXT - 727)) | (1L << (MULTIPOINTFROMWKB - 727)) | (1L << (MULTIPOLYGONFROMTEXT - 727)) | (1L << (MULTIPOLYGONFROMWKB - 727)) | (1L << (NAME_CONST - 727)) | (1L << (NULLIF - 727)) | (1L << (NUMGEOMETRIES - 727)) | (1L << (NUMINTERIORRINGS - 727)) | (1L << (NUMPOINTS - 727)) | (1L << (OCT - 727)) | (1L << (OCTET_LENGTH - 727)) | (1L << (ORD - 727)) | (1L << (OVERLAPS - 727)))) != 0) || ((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (PERIOD_ADD - 791)) | (1L << (PERIOD_DIFF - 791)) | (1L << (PI - 791)) | (1L << (POINTFROMTEXT - 791)) | (1L << (POINTFROMWKB - 791)) | (1L << (POINTN - 791)) | (1L << (POLYFROMTEXT - 791)) | (1L << (POLYFROMWKB - 791)) | (1L << (POLYGONFROMTEXT - 791)) | (1L << (POLYGONFROMWKB - 791)) | (1L << (POW - 791)) | (1L << (POWER - 791)) | (1L << (QUOTE - 791)) | (1L << (RADIANS - 791)) | (1L << (RAND - 791)) | (1L << (RANDOM_BYTES - 791)) | (1L << (RELEASE_LOCK - 791)) | (1L << (REVERSE - 791)) | (1L << (ROUND - 791)) | (1L << (ROW_COUNT - 791)) | (1L << (RPAD - 791)) | (1L << (RTRIM - 791)) | (1L << (SEC_TO_TIME - 791)) | (1L << (SESSION_USER - 791)) | (1L << (SHA - 791)) | (1L << (SHA1 - 791)) | (1L << (SHA2 - 791)) | (1L << (SIGN - 791)) | (1L << (SIN - 791)) | (1L << (SLEEP - 791)) | (1L << (SOUNDEX - 791)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1L << (SQRT - 791)) | (1L << (SRID - 791)) | (1L << (STARTPOINT - 791)) | (1L << (STRCMP - 791)) | (1L << (STR_TO_DATE - 791)) | (1L << (ST_AREA - 791)) | (1L << (ST_ASBINARY - 791)) | (1L << (ST_ASTEXT - 791)) | (1L << (ST_ASWKB - 791)) | (1L << (ST_ASWKT - 791)) | (1L << (ST_BUFFER - 791)) | (1L << (ST_CENTROID - 791)) | (1L << (ST_CONTAINS - 791)) | (1L << (ST_CROSSES - 791)) | (1L << (ST_DIFFERENCE - 791)) | (1L << (ST_DIMENSION - 791)) | (1L << (ST_DISJOINT - 791)) | (1L << (ST_DISTANCE - 791)) | (1L << (ST_ENDPOINT - 791)) | (1L << (ST_ENVELOPE - 791)) | (1L << (ST_EQUALS - 791)) | (1L << (ST_EXTERIORRING - 791)) | (1L << (ST_GEOMCOLLFROMTEXT - 791)) | (1L << (ST_GEOMCOLLFROMTXT - 791)) | (1L << (ST_GEOMCOLLFROMWKB - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1L << (ST_GEOMETRYFROMTEXT - 791)) | (1L << (ST_GEOMETRYFROMWKB - 791)) | (1L << (ST_GEOMETRYN - 791)) | (1L << (ST_GEOMETRYTYPE - 791)) | (1L << (ST_GEOMFROMTEXT - 791)))) != 0) || ((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (ST_GEOMFROMWKB - 855)) | (1L << (ST_INTERIORRINGN - 855)) | (1L << (ST_INTERSECTION - 855)) | (1L << (ST_INTERSECTS - 855)) | (1L << (ST_ISCLOSED - 855)) | (1L << (ST_ISEMPTY - 855)) | (1L << (ST_ISSIMPLE - 855)) | (1L << (ST_LINEFROMTEXT - 855)) | (1L << (ST_LINEFROMWKB - 855)) | (1L << (ST_LINESTRINGFROMTEXT - 855)) | (1L << (ST_LINESTRINGFROMWKB - 855)) | (1L << (ST_NUMGEOMETRIES - 855)) | (1L << (ST_NUMINTERIORRING - 855)) | (1L << (ST_NUMINTERIORRINGS - 855)) | (1L << (ST_NUMPOINTS - 855)) | (1L << (ST_OVERLAPS - 855)) | (1L << (ST_POINTFROMTEXT - 855)) | (1L << (ST_POINTFROMWKB - 855)) | (1L << (ST_POINTN - 855)) | (1L << (ST_POLYFROMTEXT - 855)) | (1L << (ST_POLYFROMWKB - 855)) | (1L << (ST_POLYGONFROMTEXT - 855)) | (1L << (ST_POLYGONFROMWKB - 855)) | (1L << (ST_SRID - 855)) | (1L << (ST_STARTPOINT - 855)) | (1L << (ST_SYMDIFFERENCE - 855)) | (1L << (ST_TOUCHES - 855)) | (1L << (ST_UNION - 855)) | (1L << (ST_WITHIN - 855)) | (1L << (ST_X - 855)) | (1L << (ST_Y - 855)) | (1L << (SUBDATE - 855)) | (1L << (SUBSTRING_INDEX - 855)) | (1L << (SUBTIME - 855)) | (1L << (SYSTEM_USER - 855)) | (1L << (TAN - 855)) | (1L << (TIMEDIFF - 855)) | (1L << (TIMESTAMPADD - 855)) | (1L << (TIMESTAMPDIFF - 855)) | (1L << (TIME_FORMAT - 855)) | (1L << (TIME_TO_SEC - 855)) | (1L << (TOUCHES - 855)) | (1L << (TO_BASE64 - 855)) | (1L << (TO_DAYS - 855)) | (1L << (TO_SECONDS - 855)) | (1L << (UCASE - 855)) | (1L << (UNCOMPRESS - 855)) | (1L << (UNCOMPRESSED_LENGTH - 855)) | (1L << (UNHEX - 855)) | (1L << (UNIX_TIMESTAMP - 855)) | (1L << (UPDATEXML - 855)) | (1L << (UPPER - 855)) | (1L << (UUID - 855)) | (1L << (UUID_SHORT - 855)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 855)) | (1L << (VERSION - 855)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1L << (WEEKDAY - 855)) | (1L << (WEEKOFYEAR - 855)) | (1L << (WEIGHT_STRING - 855)) | (1L << (WITHIN - 855)) | (1L << (YEARWEEK - 855)) | (1L << (Y_FUNCTION - 855)) | (1L << (X_FUNCTION - 855)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)) | (1L << (LR_BRACKET - 931)) | (1L << (ZERO_DECIMAL - 931)) | (1L << (ONE_DECIMAL - 931)) | (1L << (TWO_DECIMAL - 931)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 931)) | (1L << (START_NATIONAL_STRING_LITERAL - 931)) | (1L << (STRING_LITERAL - 931)) | (1L << (DECIMAL_LITERAL - 931)) | (1L << (HEXADECIMAL_LITERAL - 931)) | (1L << (REAL_LITERAL - 931)) | (1L << (NULL_SPEC_LITERAL - 931)) | (1L << (BIT_STRING - 931)) | (1L << (STRING_CHARSET_NAME - 931)) | (1L << (ID - 931)) | (1L << (REVERSE_QUOTE_ID - 931)) | (1L << (LOCAL_ID - 931)) | (1L << (GLOBAL_ID - 931)))) != 0)) {
					{
					setState(5577); functionArgs();
					}
				}

				setState(5580); match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5582); fullId();
				setState(5583); match(LR_BRACKET);
				setState(5585);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (TRUE - 151)) | (1L << (VALUES - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (CHAR - 151)) | (1L << (BINARY - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (AVG - 151)) | (1L << (BIT_AND - 151)) | (1L << (BIT_OR - 151)) | (1L << (BIT_XOR - 151)) | (1L << (COUNT - 151)) | (1L << (GROUP_CONCAT - 151)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (MAX - 215)) | (1L << (MIN - 215)) | (1L << (STD - 215)) | (1L << (STDDEV - 215)) | (1L << (STDDEV_POP - 215)) | (1L << (STDDEV_SAMP - 215)) | (1L << (SUM - 215)) | (1L << (VAR_POP - 215)) | (1L << (VAR_SAMP - 215)) | (1L << (VARIANCE - 215)) | (1L << (CURRENT_DATE - 215)) | (1L << (CURRENT_TIME - 215)) | (1L << (CURRENT_TIMESTAMP - 215)) | (1L << (LOCALTIME - 215)) | (1L << (CURDATE - 215)) | (1L << (CURTIME - 215)) | (1L << (DATE_ADD - 215)) | (1L << (DATE_SUB - 215)) | (1L << (EXTRACT - 215)) | (1L << (LOCALTIMESTAMP - 215)) | (1L << (NOW - 215)) | (1L << (POSITION - 215)) | (1L << (SUBSTR - 215)) | (1L << (SUBSTRING - 215)) | (1L << (SYSDATE - 215)) | (1L << (TRIM - 215)) | (1L << (UTC_DATE - 215)) | (1L << (UTC_TIME - 215)) | (1L << (UTC_TIMESTAMP - 215)) | (1L << (ACCOUNT - 215)) | (1L << (ACTION - 215)) | (1L << (AFTER - 215)) | (1L << (AGGREGATE - 215)) | (1L << (ALGORITHM - 215)) | (1L << (ANY - 215)) | (1L << (AT - 215)) | (1L << (AUTHORS - 215)) | (1L << (AUTOCOMMIT - 215)) | (1L << (AUTOEXTEND_SIZE - 215)) | (1L << (AUTO_INCREMENT - 215)) | (1L << (AVG_ROW_LENGTH - 215)) | (1L << (BEGIN - 215)) | (1L << (BINLOG - 215)) | (1L << (BIT - 215)) | (1L << (BLOCK - 215)) | (1L << (BOOL - 215)) | (1L << (BOOLEAN - 215)) | (1L << (BTREE - 215)) | (1L << (CASCADED - 215)) | (1L << (CHAIN - 215)) | (1L << (CHANNEL - 215)) | (1L << (CHECKSUM - 215)) | (1L << (CIPHER - 215)) | (1L << (CLIENT - 215)) | (1L << (COALESCE - 215)) | (1L << (CODE - 215)) | (1L << (COLUMNS - 215)) | (1L << (COLUMN_FORMAT - 215)) | (1L << (COMMENT - 215)) | (1L << (COMMIT - 215)) | (1L << (COMPACT - 215)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (COMPLETION - 279)) | (1L << (COMPRESSED - 279)) | (1L << (COMPRESSION - 279)) | (1L << (CONCURRENT - 279)) | (1L << (CONNECTION - 279)) | (1L << (CONSISTENT - 279)) | (1L << (CONTAINS - 279)) | (1L << (CONTEXT - 279)) | (1L << (CONTRIBUTORS - 279)) | (1L << (COPY - 279)) | (1L << (CPU - 279)) | (1L << (DATA - 279)) | (1L << (DATAFILE - 279)) | (1L << (DEALLOCATE - 279)) | (1L << (DEFAULT_AUTH - 279)) | (1L << (DEFINER - 279)) | (1L << (DELAY_KEY_WRITE - 279)) | (1L << (DIRECTORY - 279)) | (1L << (DISABLE - 279)) | (1L << (DISCARD - 279)) | (1L << (DISK - 279)) | (1L << (DO - 279)) | (1L << (DUMPFILE - 279)) | (1L << (DUPLICATE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENABLE - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (ENDS - 279)) | (1L << (ENGINE - 279)) | (1L << (ENGINES - 279)) | (1L << (ERROR - 279)) | (1L << (ERRORS - 279)) | (1L << (ESCAPE - 279)) | (1L << (EVEN - 279)) | (1L << (EVENT - 279)) | (1L << (EVENTS - 279)) | (1L << (EVERY - 279)) | (1L << (EXCHANGE - 279)) | (1L << (EXCLUSIVE - 279)) | (1L << (EXPIRE - 279)) | (1L << (EXTENT_SIZE - 279)) | (1L << (FAULTS - 279)) | (1L << (FIELDS - 279)) | (1L << (FILE_BLOCK_SIZE - 279)) | (1L << (FILTER - 279)) | (1L << (FIRST - 279)) | (1L << (FIXED - 279)) | (1L << (FOLLOWS - 279)) | (1L << (FULL - 279)) | (1L << (FUNCTION - 279)) | (1L << (GLOBAL - 279)) | (1L << (GRANTS - 279)) | (1L << (GROUP_REPLICATION - 279)) | (1L << (HASH - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (HOST - 343)) | (1L << (IDENTIFIED - 343)) | (1L << (IGNORE_SERVER_IDS - 343)) | (1L << (IMPORT - 343)) | (1L << (INDEXES - 343)) | (1L << (INITIAL_SIZE - 343)) | (1L << (INPLACE - 343)) | (1L << (INSERT_METHOD - 343)) | (1L << (INSTANCE - 343)) | (1L << (INVOKER - 343)) | (1L << (IO - 343)) | (1L << (IO_THREAD - 343)) | (1L << (IPC - 343)) | (1L << (ISOLATION - 343)) | (1L << (ISSUER - 343)) | (1L << (KEY_BLOCK_SIZE - 343)) | (1L << (LANGUAGE - 343)) | (1L << (LAST - 343)) | (1L << (LEAVES - 343)) | (1L << (LESS - 343)) | (1L << (LEVEL - 343)) | (1L << (LIST - 343)) | (1L << (LOCAL - 343)) | (1L << (LOGFILE - 343)) | (1L << (LOGS - 343)) | (1L << (MASTER - 343)) | (1L << (MASTER_AUTO_POSITION - 343)) | (1L << (MASTER_CONNECT_RETRY - 343)) | (1L << (MASTER_DELAY - 343)) | (1L << (MASTER_HEARTBEAT_PERIOD - 343)) | (1L << (MASTER_HOST - 343)) | (1L << (MASTER_LOG_FILE - 343)) | (1L << (MASTER_LOG_POS - 343)) | (1L << (MASTER_PASSWORD - 343)) | (1L << (MASTER_PORT - 343)) | (1L << (MASTER_RETRY_COUNT - 343)) | (1L << (MASTER_SSL - 343)) | (1L << (MASTER_SSL_CA - 343)) | (1L << (MASTER_SSL_CAPATH - 343)) | (1L << (MASTER_SSL_CERT - 343)) | (1L << (MASTER_SSL_CIPHER - 343)) | (1L << (MASTER_SSL_CRL - 343)) | (1L << (MASTER_SSL_CRLPATH - 343)) | (1L << (MASTER_SSL_KEY - 343)) | (1L << (MASTER_TLS_VERSION - 343)) | (1L << (MASTER_USER - 343)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 343)) | (1L << (MAX_QUERIES_PER_HOUR - 343)) | (1L << (MAX_ROWS - 343)) | (1L << (MAX_SIZE - 343)) | (1L << (MAX_UPDATES_PER_HOUR - 343)) | (1L << (MAX_USER_CONNECTIONS - 343)) | (1L << (MERGE - 343)) | (1L << (MID - 343)) | (1L << (MIGRATE - 343)) | (1L << (MIN_ROWS - 343)) | (1L << (MODIFY - 343)) | (1L << (MUTEX - 343)) | (1L << (MYSQL - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (NAME - 407)) | (1L << (NAMES - 407)) | (1L << (NCHAR - 407)) | (1L << (NEVER - 407)) | (1L << (NO - 407)) | (1L << (NODEGROUP - 407)) | (1L << (NONE - 407)) | (1L << (OFFLINE - 407)) | (1L << (OFFSET - 407)) | (1L << (OJ - 407)) | (1L << (OLD_PASSWORD - 407)) | (1L << (ONE - 407)) | (1L << (ONLINE - 407)) | (1L << (ONLY - 407)) | (1L << (OPTIMIZER_COSTS - 407)) | (1L << (OPTIONS - 407)) | (1L << (OWNER - 407)) | (1L << (PACK_KEYS - 407)) | (1L << (PAGE - 407)) | (1L << (PARSER - 407)) | (1L << (PARTIAL - 407)) | (1L << (PARTITIONING - 407)) | (1L << (PARTITIONS - 407)) | (1L << (PASSWORD - 407)) | (1L << (PHASE - 407)) | (1L << (PLUGIN_DIR - 407)) | (1L << (PLUGINS - 407)) | (1L << (PORT - 407)) | (1L << (PRECEDES - 407)) | (1L << (PREPARE - 407)) | (1L << (PRESERVE - 407)) | (1L << (PREV - 407)) | (1L << (PROCESSLIST - 407)) | (1L << (PROFILE - 407)) | (1L << (PROFILES - 407)) | (1L << (PROXY - 407)) | (1L << (QUERY - 407)) | (1L << (QUICK - 407)) | (1L << (REBUILD - 407)) | (1L << (RECOVER - 407)) | (1L << (REDO_BUFFER_SIZE - 407)) | (1L << (REDUNDANT - 407)) | (1L << (RELAY_LOG_FILE - 407)) | (1L << (RELAY_LOG_POS - 407)) | (1L << (RELAYLOG - 407)) | (1L << (REMOVE - 407)) | (1L << (REORGANIZE - 407)) | (1L << (REPAIR - 407)) | (1L << (REPLICATE_DO_DB - 407)) | (1L << (REPLICATE_DO_TABLE - 407)) | (1L << (REPLICATE_IGNORE_DB - 407)) | (1L << (REPLICATE_IGNORE_TABLE - 407)) | (1L << (REPLICATE_REWRITE_DB - 407)) | (1L << (REPLICATE_WILD_DO_TABLE - 407)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 407)) | (1L << (REPLICATION - 407)) | (1L << (RESUME - 407)) | (1L << (RETURNS - 407)) | (1L << (ROLLBACK - 407)))) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (ROLLUP - 471)) | (1L << (ROTATE - 471)) | (1L << (ROW - 471)) | (1L << (ROWS - 471)) | (1L << (ROW_FORMAT - 471)) | (1L << (SAVEPOINT - 471)) | (1L << (SCHEDULE - 471)) | (1L << (SECURITY - 471)) | (1L << (SERVER - 471)) | (1L << (SESSION - 471)) | (1L << (SHARE - 471)) | (1L << (SHARED - 471)) | (1L << (SIGNED - 471)) | (1L << (SIMPLE - 471)) | (1L << (SLAVE - 471)) | (1L << (SNAPSHOT - 471)) | (1L << (SOCKET - 471)) | (1L << (SOME - 471)) | (1L << (SOUNDS - 471)) | (1L << (SOURCE - 471)) | (1L << (SQL_AFTER_GTIDS - 471)) | (1L << (SQL_AFTER_MTS_GAPS - 471)) | (1L << (SQL_BEFORE_GTIDS - 471)) | (1L << (SQL_BUFFER_RESULT - 471)) | (1L << (SQL_CACHE - 471)) | (1L << (SQL_NO_CACHE - 471)) | (1L << (SQL_THREAD - 471)) | (1L << (START - 471)) | (1L << (STARTS - 471)) | (1L << (STATS_AUTO_RECALC - 471)) | (1L << (STATS_PERSISTENT - 471)) | (1L << (STATS_SAMPLE_PAGES - 471)) | (1L << (STATUS - 471)) | (1L << (STOP - 471)) | (1L << (STORAGE - 471)) | (1L << (STRING - 471)) | (1L << (SUBJECT - 471)) | (1L << (SUBPARTITION - 471)) | (1L << (SUBPARTITIONS - 471)) | (1L << (SUSPEND - 471)) | (1L << (SWAPS - 471)) | (1L << (SWITCHES - 471)) | (1L << (TABLESPACE - 471)) | (1L << (TEMPORARY - 471)) | (1L << (TEMPTABLE - 471)) | (1L << (THAN - 471)) | (1L << (TRANSACTION - 471)) | (1L << (TRUNCATE - 471)) | (1L << (UNDEFINED - 471)) | (1L << (UNDOFILE - 471)) | (1L << (UNDO_BUFFER_SIZE - 471)) | (1L << (UNKNOWN - 471)) | (1L << (UPGRADE - 471)) | (1L << (USER - 471)) | (1L << (VALIDATION - 471)) | (1L << (VALUE - 471)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (VARIABLES - 535)) | (1L << (VIEW - 535)) | (1L << (WAIT - 535)) | (1L << (WARNINGS - 535)) | (1L << (WITHOUT - 535)) | (1L << (WORK - 535)) | (1L << (WRAPPER - 535)) | (1L << (X509 - 535)) | (1L << (XA - 535)) | (1L << (XML - 535)) | (1L << (QUARTER - 535)) | (1L << (MONTH - 535)) | (1L << (DAY - 535)) | (1L << (HOUR - 535)) | (1L << (MINUTE - 535)) | (1L << (WEEK - 535)) | (1L << (SECOND - 535)) | (1L << (MICROSECOND - 535)) | (1L << (TABLES - 535)) | (1L << (ROUTINE - 535)) | (1L << (EXECUTE - 535)) | (1L << (FILE - 535)) | (1L << (PROCESS - 535)) | (1L << (RELOAD - 535)) | (1L << (SHUTDOWN - 535)) | (1L << (SUPER - 535)) | (1L << (PRIVILEGES - 535)) | (1L << (ARMSCII8 - 535)) | (1L << (ASCII - 535)) | (1L << (BIG5 - 535)) | (1L << (CP1250 - 535)) | (1L << (CP1251 - 535)) | (1L << (CP1256 - 535)) | (1L << (CP1257 - 535)) | (1L << (CP850 - 535)) | (1L << (CP852 - 535)) | (1L << (CP866 - 535)) | (1L << (CP932 - 535)) | (1L << (DEC8 - 535)) | (1L << (EUCJPMS - 535)) | (1L << (EUCKR - 535)) | (1L << (GB2312 - 535)) | (1L << (GBK - 535)) | (1L << (GEOSTD8 - 535)) | (1L << (GREEK - 535)) | (1L << (HEBREW - 535)) | (1L << (HP8 - 535)) | (1L << (KEYBCS2 - 535)) | (1L << (KOI8R - 535)) | (1L << (KOI8U - 535)) | (1L << (LATIN1 - 535)) | (1L << (LATIN2 - 535)) | (1L << (LATIN5 - 535)) | (1L << (LATIN7 - 535)) | (1L << (MACCE - 535)) | (1L << (MACROMAN - 535)) | (1L << (SJIS - 535)) | (1L << (SWE7 - 535)) | (1L << (TIS620 - 535)))) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)) | (1L << (ARCHIVE - 599)) | (1L << (BLACKHOLE - 599)) | (1L << (CSV - 599)) | (1L << (FEDERATED - 599)) | (1L << (INNODB - 599)) | (1L << (MEMORY - 599)) | (1L << (MRG_MYISAM - 599)) | (1L << (MYISAM - 599)) | (1L << (NDB - 599)) | (1L << (NDBCLUSTER - 599)) | (1L << (PERFOMANCE_SCHEMA - 599)) | (1L << (REPEATABLE - 599)) | (1L << (COMMITTED - 599)) | (1L << (UNCOMMITTED - 599)) | (1L << (SERIALIZABLE - 599)) | (1L << (GEOMETRYCOLLECTION - 599)) | (1L << (LINESTRING - 599)) | (1L << (MULTILINESTRING - 599)) | (1L << (MULTIPOINT - 599)) | (1L << (MULTIPOLYGON - 599)) | (1L << (POINT - 599)) | (1L << (POLYGON - 599)) | (1L << (ABS - 599)) | (1L << (ACOS - 599)) | (1L << (ADDDATE - 599)) | (1L << (ADDTIME - 599)) | (1L << (AES_DECRYPT - 599)) | (1L << (AES_ENCRYPT - 599)) | (1L << (AREA - 599)) | (1L << (ASBINARY - 599)) | (1L << (ASIN - 599)) | (1L << (ASTEXT - 599)) | (1L << (ASWKB - 599)) | (1L << (ASWKT - 599)) | (1L << (ASYMMETRIC_DECRYPT - 599)) | (1L << (ASYMMETRIC_DERIVE - 599)) | (1L << (ASYMMETRIC_ENCRYPT - 599)) | (1L << (ASYMMETRIC_SIGN - 599)) | (1L << (ASYMMETRIC_VERIFY - 599)) | (1L << (ATAN - 599)) | (1L << (ATAN2 - 599)) | (1L << (BENCHMARK - 599)) | (1L << (BIN - 599)) | (1L << (BIT_COUNT - 599)) | (1L << (BIT_LENGTH - 599)) | (1L << (BUFFER - 599)) | (1L << (CEIL - 599)) | (1L << (CEILING - 599)) | (1L << (CENTROID - 599)) | (1L << (CHARACTER_LENGTH - 599)) | (1L << (CHARSET - 599)) | (1L << (CHAR_LENGTH - 599)) | (1L << (COERCIBILITY - 599)) | (1L << (COLLATION - 599)) | (1L << (COMPRESS - 599)) | (1L << (CONCAT - 599)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (CONCAT_WS - 663)) | (1L << (CONNECTION_ID - 663)) | (1L << (CONV - 663)) | (1L << (CONVERT_TZ - 663)) | (1L << (COS - 663)) | (1L << (COT - 663)) | (1L << (CRC32 - 663)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1L << (CREATE_DH_PARAMETERS - 663)) | (1L << (CREATE_DIGEST - 663)) | (1L << (CROSSES - 663)) | (1L << (DATEDIFF - 663)) | (1L << (DATE_FORMAT - 663)) | (1L << (DAYNAME - 663)) | (1L << (DAYOFMONTH - 663)) | (1L << (DAYOFWEEK - 663)) | (1L << (DAYOFYEAR - 663)) | (1L << (DECODE - 663)) | (1L << (DEGREES - 663)) | (1L << (DES_DECRYPT - 663)) | (1L << (DES_ENCRYPT - 663)) | (1L << (DIMENSION - 663)) | (1L << (DISJOINT - 663)) | (1L << (ELT - 663)) | (1L << (ENCODE - 663)) | (1L << (ENCRYPT - 663)) | (1L << (ENDPOINT - 663)) | (1L << (ENVELOPE - 663)) | (1L << (EQUALS - 663)) | (1L << (EXP - 663)) | (1L << (EXPORT_SET - 663)) | (1L << (EXTERIORRING - 663)) | (1L << (EXTRACTVALUE - 663)) | (1L << (FIELD - 663)) | (1L << (FIND_IN_SET - 663)) | (1L << (FLOOR - 663)) | (1L << (FORMAT - 663)) | (1L << (FOUND_ROWS - 663)) | (1L << (FROM_BASE64 - 663)) | (1L << (FROM_DAYS - 663)) | (1L << (FROM_UNIXTIME - 663)) | (1L << (GEOMCOLLFROMTEXT - 663)) | (1L << (GEOMCOLLFROMWKB - 663)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 663)) | (1L << (GEOMETRYFROMTEXT - 663)) | (1L << (GEOMETRYFROMWKB - 663)) | (1L << (GEOMETRYN - 663)) | (1L << (GEOMETRYTYPE - 663)) | (1L << (GEOMFROMTEXT - 663)) | (1L << (GEOMFROMWKB - 663)) | (1L << (GET_FORMAT - 663)) | (1L << (GET_LOCK - 663)) | (1L << (GLENGTH - 663)) | (1L << (GREATEST - 663)) | (1L << (GTID_SUBSET - 663)) | (1L << (GTID_SUBTRACT - 663)) | (1L << (HEX - 663)) | (1L << (IFNULL - 663)) | (1L << (INET6_ATON - 663)) | (1L << (INET6_NTOA - 663)) | (1L << (INET_ATON - 663)) | (1L << (INET_NTOA - 663)))) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & ((1L << (INSTR - 727)) | (1L << (INTERIORRINGN - 727)) | (1L << (INTERSECTS - 727)) | (1L << (ISCLOSED - 727)) | (1L << (ISEMPTY - 727)) | (1L << (ISNULL - 727)) | (1L << (ISSIMPLE - 727)) | (1L << (IS_FREE_LOCK - 727)) | (1L << (IS_IPV4 - 727)) | (1L << (IS_IPV4_COMPAT - 727)) | (1L << (IS_IPV4_MAPPED - 727)) | (1L << (IS_IPV6 - 727)) | (1L << (IS_USED_LOCK - 727)) | (1L << (LAST_INSERT_ID - 727)) | (1L << (LCASE - 727)) | (1L << (LEAST - 727)) | (1L << (LENGTH - 727)) | (1L << (LINEFROMTEXT - 727)) | (1L << (LINEFROMWKB - 727)) | (1L << (LINESTRINGFROMTEXT - 727)) | (1L << (LINESTRINGFROMWKB - 727)) | (1L << (LN - 727)) | (1L << (LOAD_FILE - 727)) | (1L << (LOCATE - 727)) | (1L << (LOG - 727)) | (1L << (LOG10 - 727)) | (1L << (LOG2 - 727)) | (1L << (LOWER - 727)) | (1L << (LPAD - 727)) | (1L << (LTRIM - 727)) | (1L << (MAKEDATE - 727)) | (1L << (MAKETIME - 727)) | (1L << (MAKE_SET - 727)) | (1L << (MASTER_POS_WAIT - 727)) | (1L << (MBRCONTAINS - 727)) | (1L << (MBRDISJOINT - 727)) | (1L << (MBREQUAL - 727)) | (1L << (MBRINTERSECTS - 727)) | (1L << (MBROVERLAPS - 727)) | (1L << (MBRTOUCHES - 727)) | (1L << (MBRWITHIN - 727)) | (1L << (MD5 - 727)) | (1L << (MLINEFROMTEXT - 727)) | (1L << (MLINEFROMWKB - 727)) | (1L << (MONTHNAME - 727)) | (1L << (MPOINTFROMTEXT - 727)) | (1L << (MPOINTFROMWKB - 727)) | (1L << (MPOLYFROMTEXT - 727)) | (1L << (MPOLYFROMWKB - 727)) | (1L << (MULTILINESTRINGFROMTEXT - 727)) | (1L << (MULTILINESTRINGFROMWKB - 727)) | (1L << (MULTIPOINTFROMTEXT - 727)) | (1L << (MULTIPOINTFROMWKB - 727)) | (1L << (MULTIPOLYGONFROMTEXT - 727)) | (1L << (MULTIPOLYGONFROMWKB - 727)) | (1L << (NAME_CONST - 727)) | (1L << (NULLIF - 727)) | (1L << (NUMGEOMETRIES - 727)) | (1L << (NUMINTERIORRINGS - 727)) | (1L << (NUMPOINTS - 727)) | (1L << (OCT - 727)) | (1L << (OCTET_LENGTH - 727)) | (1L << (ORD - 727)) | (1L << (OVERLAPS - 727)))) != 0) || ((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (PERIOD_ADD - 791)) | (1L << (PERIOD_DIFF - 791)) | (1L << (PI - 791)) | (1L << (POINTFROMTEXT - 791)) | (1L << (POINTFROMWKB - 791)) | (1L << (POINTN - 791)) | (1L << (POLYFROMTEXT - 791)) | (1L << (POLYFROMWKB - 791)) | (1L << (POLYGONFROMTEXT - 791)) | (1L << (POLYGONFROMWKB - 791)) | (1L << (POW - 791)) | (1L << (POWER - 791)) | (1L << (QUOTE - 791)) | (1L << (RADIANS - 791)) | (1L << (RAND - 791)) | (1L << (RANDOM_BYTES - 791)) | (1L << (RELEASE_LOCK - 791)) | (1L << (REVERSE - 791)) | (1L << (ROUND - 791)) | (1L << (ROW_COUNT - 791)) | (1L << (RPAD - 791)) | (1L << (RTRIM - 791)) | (1L << (SEC_TO_TIME - 791)) | (1L << (SESSION_USER - 791)) | (1L << (SHA - 791)) | (1L << (SHA1 - 791)) | (1L << (SHA2 - 791)) | (1L << (SIGN - 791)) | (1L << (SIN - 791)) | (1L << (SLEEP - 791)) | (1L << (SOUNDEX - 791)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1L << (SQRT - 791)) | (1L << (SRID - 791)) | (1L << (STARTPOINT - 791)) | (1L << (STRCMP - 791)) | (1L << (STR_TO_DATE - 791)) | (1L << (ST_AREA - 791)) | (1L << (ST_ASBINARY - 791)) | (1L << (ST_ASTEXT - 791)) | (1L << (ST_ASWKB - 791)) | (1L << (ST_ASWKT - 791)) | (1L << (ST_BUFFER - 791)) | (1L << (ST_CENTROID - 791)) | (1L << (ST_CONTAINS - 791)) | (1L << (ST_CROSSES - 791)) | (1L << (ST_DIFFERENCE - 791)) | (1L << (ST_DIMENSION - 791)) | (1L << (ST_DISJOINT - 791)) | (1L << (ST_DISTANCE - 791)) | (1L << (ST_ENDPOINT - 791)) | (1L << (ST_ENVELOPE - 791)) | (1L << (ST_EQUALS - 791)) | (1L << (ST_EXTERIORRING - 791)) | (1L << (ST_GEOMCOLLFROMTEXT - 791)) | (1L << (ST_GEOMCOLLFROMTXT - 791)) | (1L << (ST_GEOMCOLLFROMWKB - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1L << (ST_GEOMETRYFROMTEXT - 791)) | (1L << (ST_GEOMETRYFROMWKB - 791)) | (1L << (ST_GEOMETRYN - 791)) | (1L << (ST_GEOMETRYTYPE - 791)) | (1L << (ST_GEOMFROMTEXT - 791)))) != 0) || ((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (ST_GEOMFROMWKB - 855)) | (1L << (ST_INTERIORRINGN - 855)) | (1L << (ST_INTERSECTION - 855)) | (1L << (ST_INTERSECTS - 855)) | (1L << (ST_ISCLOSED - 855)) | (1L << (ST_ISEMPTY - 855)) | (1L << (ST_ISSIMPLE - 855)) | (1L << (ST_LINEFROMTEXT - 855)) | (1L << (ST_LINEFROMWKB - 855)) | (1L << (ST_LINESTRINGFROMTEXT - 855)) | (1L << (ST_LINESTRINGFROMWKB - 855)) | (1L << (ST_NUMGEOMETRIES - 855)) | (1L << (ST_NUMINTERIORRING - 855)) | (1L << (ST_NUMINTERIORRINGS - 855)) | (1L << (ST_NUMPOINTS - 855)) | (1L << (ST_OVERLAPS - 855)) | (1L << (ST_POINTFROMTEXT - 855)) | (1L << (ST_POINTFROMWKB - 855)) | (1L << (ST_POINTN - 855)) | (1L << (ST_POLYFROMTEXT - 855)) | (1L << (ST_POLYFROMWKB - 855)) | (1L << (ST_POLYGONFROMTEXT - 855)) | (1L << (ST_POLYGONFROMWKB - 855)) | (1L << (ST_SRID - 855)) | (1L << (ST_STARTPOINT - 855)) | (1L << (ST_SYMDIFFERENCE - 855)) | (1L << (ST_TOUCHES - 855)) | (1L << (ST_UNION - 855)) | (1L << (ST_WITHIN - 855)) | (1L << (ST_X - 855)) | (1L << (ST_Y - 855)) | (1L << (SUBDATE - 855)) | (1L << (SUBSTRING_INDEX - 855)) | (1L << (SUBTIME - 855)) | (1L << (SYSTEM_USER - 855)) | (1L << (TAN - 855)) | (1L << (TIMEDIFF - 855)) | (1L << (TIMESTAMPADD - 855)) | (1L << (TIMESTAMPDIFF - 855)) | (1L << (TIME_FORMAT - 855)) | (1L << (TIME_TO_SEC - 855)) | (1L << (TOUCHES - 855)) | (1L << (TO_BASE64 - 855)) | (1L << (TO_DAYS - 855)) | (1L << (TO_SECONDS - 855)) | (1L << (UCASE - 855)) | (1L << (UNCOMPRESS - 855)) | (1L << (UNCOMPRESSED_LENGTH - 855)) | (1L << (UNHEX - 855)) | (1L << (UNIX_TIMESTAMP - 855)) | (1L << (UPDATEXML - 855)) | (1L << (UPPER - 855)) | (1L << (UUID - 855)) | (1L << (UUID_SHORT - 855)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 855)) | (1L << (VERSION - 855)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1L << (WEEKDAY - 855)) | (1L << (WEEKOFYEAR - 855)) | (1L << (WEIGHT_STRING - 855)) | (1L << (WITHIN - 855)) | (1L << (YEARWEEK - 855)) | (1L << (Y_FUNCTION - 855)) | (1L << (X_FUNCTION - 855)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)) | (1L << (LR_BRACKET - 931)) | (1L << (ZERO_DECIMAL - 931)) | (1L << (ONE_DECIMAL - 931)) | (1L << (TWO_DECIMAL - 931)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 931)) | (1L << (START_NATIONAL_STRING_LITERAL - 931)) | (1L << (STRING_LITERAL - 931)) | (1L << (DECIMAL_LITERAL - 931)) | (1L << (HEXADECIMAL_LITERAL - 931)) | (1L << (REAL_LITERAL - 931)) | (1L << (NULL_SPEC_LITERAL - 931)) | (1L << (BIT_STRING - 931)) | (1L << (STRING_CHARSET_NAME - 931)) | (1L << (ID - 931)) | (1L << (REVERSE_QUOTE_ID - 931)) | (1L << (LOCAL_ID - 931)) | (1L << (GLOBAL_ID - 931)))) != 0)) {
					{
					setState(5584); functionArgs();
					}
				}

				setState(5587); match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5589); passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_specificFunction);
		int _la;
		try {
			setState(5749);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5592);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (CURRENT_DATE - 225)) | (1L << (CURRENT_TIME - 225)) | (1L << (CURRENT_TIMESTAMP - 225)) | (1L << (LOCALTIME - 225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5593); match(CONVERT);
				setState(5594); match(LR_BRACKET);
				setState(5595); expression(0);
				setState(5596); ((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(5597); convertedDataType();
				setState(5598); match(RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5600); match(CONVERT);
				setState(5601); match(LR_BRACKET);
				setState(5602); expression(0);
				setState(5603); match(USING);
				setState(5604); charsetName();
				setState(5605); match(RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5607); match(CAST);
				setState(5608); match(LR_BRACKET);
				setState(5609); expression(0);
				setState(5610); match(AS);
				setState(5611); convertedDataType();
				setState(5612); match(RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5614); match(VALUES);
				setState(5615); match(LR_BRACKET);
				setState(5616); fullColumnName();
				setState(5617); match(RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5619); match(CASE);
				setState(5620); expression(0);
				setState(5622); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5621); caseFuncAlternative();
					}
					}
					setState(5624); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5628);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5626); match(ELSE);
					setState(5627); ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5630); match(END);
				}
				break;

			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5632); match(CASE);
				setState(5634); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5633); caseFuncAlternative();
					}
					}
					setState(5636); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5640);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5638); match(ELSE);
					setState(5639); ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5642); match(END);
				}
				break;

			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5644); match(CHAR);
				setState(5645); match(LR_BRACKET);
				setState(5646); functionArgs();
				setState(5649);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5647); match(USING);
					setState(5648); charsetName();
					}
				}

				setState(5651); match(RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5653); match(POSITION);
				setState(5654); match(LR_BRACKET);
				setState(5657);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5655); ((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5656); ((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(5659); match(IN);
				setState(5662);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(5660); ((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5661); ((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(5664); match(RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5666);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5667); match(LR_BRACKET);
				setState(5670);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(5668); ((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5669); ((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5672); match(FROM);
				setState(5675);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(5673); ((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;

				case 2:
					{
					setState(5674); ((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5682);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5677); match(FOR);
					setState(5680);
					switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
					case 1:
						{
						setState(5678); ((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;

					case 2:
						{
						setState(5679); ((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(5684); match(RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5686); match(TRIM);
				setState(5687); match(LR_BRACKET);
				setState(5688);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5691);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(5689); ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5690); ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5693); match(FROM);
				setState(5696);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(5694); ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5695); ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5698); match(RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5700); match(TRIM);
				setState(5701); match(LR_BRACKET);
				setState(5704);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(5702); ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5703); ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5706); match(FROM);
				setState(5709);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(5707); ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5708); ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5711); match(RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5713); match(WEIGHT_STRING);
				setState(5714); match(LR_BRACKET);
				setState(5717);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5715); stringLiteral();
					}
					break;

				case 2:
					{
					setState(5716); expression(0);
					}
					break;
				}
				setState(5725);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5719); match(AS);
					setState(5720);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(5721); match(LR_BRACKET);
					setState(5722); decimalLiteral();
					setState(5723); match(RR_BRACKET);
					}
				}

				setState(5728);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(5727); levelsInWeightString();
					}
				}

				setState(5730); match(RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5732); match(EXTRACT);
				setState(5733); match(LR_BRACKET);
				setState(5734); intervalType();
				setState(5735); match(FROM);
				setState(5738);
				switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
				case 1:
					{
					setState(5736); ((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;

				case 2:
					{
					setState(5737); ((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5740); match(RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5742); match(GET_FORMAT);
				setState(5743); match(LR_BRACKET);
				setState(5744);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (DATETIME - 180)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5745); match(COMMA);
				setState(5746); stringLiteral();
				setState(5747); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5751); match(WHEN);
			setState(5752); ((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(5753); match(THEN);
			setState(5754); ((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5770);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5756); match(LEVEL);
				setState(5757); levelInWeightListElement();
				setState(5762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5758); match(COMMA);
					setState(5759); levelInWeightListElement();
					}
					}
					setState(5764);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5765); match(LEVEL);
				setState(5766); ((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(5767); match(MINUS);
				setState(5768); ((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5772); decimalLiteral();
			setState(5774);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5773);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(5832);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5776);
				_la = _input.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (AVG - 209)) | (1L << (MAX - 209)) | (1L << (MIN - 209)) | (1L << (SUM - 209)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5777); match(LR_BRACKET);
				setState(5779);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5778);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(5781); functionArg();
				setState(5782); match(RR_BRACKET);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5784); match(COUNT);
				setState(5785); match(LR_BRACKET);
				setState(5791);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5786); ((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT_USER:
				case EXISTS:
				case FALSE:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case REPLACE:
				case RIGHT:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5788);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5787); ((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
					}

					setState(5790); functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5793); match(RR_BRACKET);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5794); match(COUNT);
				setState(5795); match(LR_BRACKET);
				setState(5796); ((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(5797); functionArgs();
				setState(5798); match(RR_BRACKET);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5800);
				_la = _input.LA(1);
				if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (BIT_AND - 210)) | (1L << (BIT_OR - 210)) | (1L << (BIT_XOR - 210)) | (1L << (STD - 210)) | (1L << (STDDEV - 210)) | (1L << (STDDEV_POP - 210)) | (1L << (STDDEV_SAMP - 210)) | (1L << (VAR_POP - 210)) | (1L << (VAR_SAMP - 210)) | (1L << (VARIANCE - 210)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5801); match(LR_BRACKET);
				setState(5803);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(5802); ((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
				}

				setState(5805); functionArg();
				setState(5806); match(RR_BRACKET);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5808); match(GROUP_CONCAT);
				setState(5809); match(LR_BRACKET);
				setState(5811);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(5810); ((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(5813); functionArgs();
				setState(5824);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5814); match(ORDER);
					setState(5815); match(BY);
					setState(5816); orderByExpression();
					setState(5821);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5817); match(COMMA);
						setState(5818); orderByExpression();
						}
						}
						setState(5823);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5828);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(5826); match(SEPARATOR);
					setState(5827); ((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(5830); match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_scalarFunctionName);
		try {
			setState(5857);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5834); functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(5835); match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5836); match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5837); match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(5838); match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(5839); match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(5840); match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(5841); match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(5842); match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(5843); match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(5844); match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(5845); match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5846); match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(5847); match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(5848); match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(5849); match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(5850); match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(5851); match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5852); match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(5853); match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(5854); match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(5855); match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(5856); match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5859);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(5860); match(LR_BRACKET);
			setState(5861); functionArg();
			setState(5862); match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5868);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				setState(5864); constant();
				}
				break;

			case 2:
				{
				setState(5865); fullColumnName();
				}
				break;

			case 3:
				{
				setState(5866); functionCall();
				}
				break;

			case 4:
				{
				setState(5867); expression(0);
				}
				break;
			}
			setState(5879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5870); match(COMMA);
				setState(5875);
				switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
				case 1:
					{
					setState(5871); constant();
					}
					break;

				case 2:
					{
					setState(5872); fullColumnName();
					}
					break;

				case 3:
					{
					setState(5873); functionCall();
					}
					break;

				case 4:
					{
					setState(5874); expression(0);
					}
					break;
				}
				}
				}
				setState(5881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_functionArg);
		try {
			setState(5886);
			switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5882); constant();
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5883); fullColumnName();
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5884); functionCall();
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5885); expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 584;
		enterRecursionRule(_localctx, 584, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5899);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5889);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				consume();
				setState(5890); expression(4);
				}
				break;

			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5891); predicate(0);
				setState(5892); match(IS);
				setState(5894);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5893); match(NOT);
					}
				}

				setState(5896);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;

			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5898); predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5907);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(5901);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(5902); logicalOperator();
					setState(5903); expression(4);
					}
					} 
				}
				setState(5909);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparasionPredicate(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 586;
		enterRecursionRule(_localctx, 586, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5913);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				{
				setState(5911); match(LOCAL_ID);
				setState(5912); match(VAR_ASSIGN);
				}
				break;
			}
			setState(5915); expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5974);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,848,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5972);
					switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5917);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5918); comparisonOperator();
						setState(5919); ((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
						}
						break;

					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5921);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5923);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5922); match(NOT);
							}
						}

						setState(5925); match(BETWEEN);
						setState(5926); predicate(0);
						setState(5927); match(AND);
						setState(5928); predicate(6);
						}
						break;

					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5930);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5931); match(SOUNDS);
						setState(5932); match(LIKE);
						setState(5933); predicate(5);
						}
						break;

					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5934);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5936);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5935); match(NOT);
							}
						}

						setState(5938);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(5939); predicate(3);
						}
						break;

					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5940);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5942);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5941); match(NOT);
							}
						}

						setState(5944); match(IN);
						setState(5945); match(LR_BRACKET);
						setState(5948);
						switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
						case 1:
							{
							setState(5946); selectStatement();
							}
							break;

						case 2:
							{
							setState(5947); expressions();
							}
							break;
						}
						setState(5950); match(RR_BRACKET);
						}
						break;

					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5952);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5953); match(IS);
						setState(5954); nullNotnull();
						}
						break;

					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5955);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5956); comparisonOperator();
						setState(5957);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(5958); match(LR_BRACKET);
						setState(5959); selectStatement();
						setState(5960); match(RR_BRACKET);
						}
						break;

					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5962);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5964);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5963); match(NOT);
							}
						}

						setState(5966); match(LIKE);
						setState(5967); predicate(0);
						setState(5970);
						switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
						case 1:
							{
							setState(5968); match(ESCAPE);
							setState(5969); match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(5976);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,848,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
	}
	public static class SubqueryExpessionAtomContext extends ExpressionAtomContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SubqueryExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpessionAtom(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
	}
	public static class ExistsExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExistsExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpessionAtom(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 588;
		enterRecursionRule(_localctx, 588, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6022);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5978); unaryOperator();
				setState(5979); expressionAtom(9);
				}
				break;

			case 2:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5981); match(BINARY);
				setState(5982); expressionAtom(8);
				}
				break;

			case 3:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5983); constant();
				}
				break;

			case 4:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5984); fullColumnName();
				}
				break;

			case 5:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5985); functionCall();
				}
				break;

			case 6:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5986); mysqlVariable();
				}
				break;

			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5987); match(LR_BRACKET);
				setState(5988); expression(0);
				setState(5993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5989); match(COMMA);
					setState(5990); expression(0);
					}
					}
					setState(5995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5996); match(RR_BRACKET);
				}
				break;

			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5998); match(ROW);
				setState(5999); match(LR_BRACKET);
				setState(6000); expression(0);
				setState(6003); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6001); match(COMMA);
					setState(6002); expression(0);
					}
					}
					setState(6005); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6007); match(RR_BRACKET);
				}
				break;

			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6009); match(EXISTS);
				setState(6010); match(LR_BRACKET);
				setState(6011); selectStatement();
				setState(6012); match(RR_BRACKET);
				}
				break;

			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6014); match(LR_BRACKET);
				setState(6015); selectStatement();
				setState(6016); match(RR_BRACKET);
				}
				break;

			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6018); match(INTERVAL);
				setState(6019); expression(0);
				setState(6020); intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6035);
					switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6024);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6025); bitOperator();
						setState(6026); ((BitExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;

					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6028);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6029); mathOperator();
						setState(6030); ((MathExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;

					case 3:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6032);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6033); match(COLLATE);
						setState(6034); collationName();
						}
						break;
					}
					} 
				}
				setState(6039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6040);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_comparisonOperator);
		try {
			setState(6056);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6042); match(EQUAL_SYMBOL);
				}
				break;

			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6043); match(GREATER_SYMBOL);
				}
				break;

			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6044); match(LESS_SYMBOL);
				}
				break;

			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6045); match(LESS_SYMBOL);
				setState(6046); match(EQUAL_SYMBOL);
				}
				break;

			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6047); match(GREATER_SYMBOL);
				setState(6048); match(EQUAL_SYMBOL);
				}
				break;

			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6049); match(LESS_SYMBOL);
				setState(6050); match(GREATER_SYMBOL);
				}
				break;

			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6051); match(EXCLAMATION_SYMBOL);
				setState(6052); match(EQUAL_SYMBOL);
				}
				break;

			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6053); match(LESS_SYMBOL);
				setState(6054); match(EQUAL_SYMBOL);
				setState(6055); match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_logicalOperator);
		try {
			setState(6065);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6058); match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6059); match(BIT_AND_OP);
				setState(6060); match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6061); match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6062); match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6063); match(BIT_OR_OP);
				setState(6064); match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_bitOperator);
		try {
			setState(6074);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6067); match(LESS_SYMBOL);
				setState(6068); match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6069); match(GREATER_SYMBOL);
				setState(6070); match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6071); match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6072); match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6073); match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6076);
			_la = _input.LA(1);
			if ( !(((((_la - 928)) & ~0x3f) == 0 && ((1L << (_la - 928)) & ((1L << (STAR - 928)) | (1L << (DIVIDE - 928)) | (1L << (MODULE - 928)) | (1L << (PLUS - 928)) | (1L << (MINUSMINUS - 928)) | (1L << (MINUS - 928)) | (1L << (DIV - 928)) | (1L << (MOD - 928)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public AST value;
		public Token n;
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6078);
			((CharsetNameBaseContext)_localctx).n = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (ARMSCII8 - 567)) | (1L << (ASCII - 567)) | (1L << (BIG5 - 567)) | (1L << (CP1250 - 567)) | (1L << (CP1251 - 567)) | (1L << (CP1256 - 567)) | (1L << (CP1257 - 567)) | (1L << (CP850 - 567)) | (1L << (CP852 - 567)) | (1L << (CP866 - 567)) | (1L << (CP932 - 567)) | (1L << (DEC8 - 567)) | (1L << (EUCJPMS - 567)) | (1L << (EUCKR - 567)) | (1L << (GB2312 - 567)) | (1L << (GBK - 567)) | (1L << (GEOSTD8 - 567)) | (1L << (GREEK - 567)) | (1L << (HEBREW - 567)) | (1L << (HP8 - 567)) | (1L << (KEYBCS2 - 567)) | (1L << (KOI8R - 567)) | (1L << (KOI8U - 567)) | (1L << (LATIN1 - 567)) | (1L << (LATIN2 - 567)) | (1L << (LATIN5 - 567)) | (1L << (LATIN7 - 567)) | (1L << (MACCE - 567)) | (1L << (MACROMAN - 567)) | (1L << (SJIS - 567)) | (1L << (SWE7 - 567)) | (1L << (TIS620 - 567)) | (1L << (UCS2 - 567)) | (1L << (UJIS - 567)) | (1L << (UTF16 - 567)) | (1L << (UTF16LE - 567)) | (1L << (UTF32 - 567)) | (1L << (UTF8 - 567)) | (1L << (UTF8MB3 - 567)) | (1L << (UTF8MB4 - 567)))) != 0)) ) {
				((CharsetNameBaseContext)_localctx).n = (Token)_errHandler.recoverInline(this);
			}
			consume();
			((CharsetNameBaseContext)_localctx).value =  new CharsetNameBase((((CharsetNameBaseContext)_localctx).n!=null?((CharsetNameBaseContext)_localctx).n.getText():null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6081);
			_la = _input.LA(1);
			if ( !(((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (REPEATABLE - 618)) | (1L << (COMMITTED - 618)) | (1L << (UNCOMMITTED - 618)) | (1L << (SERIALIZABLE - 618)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6083);
			_la = _input.LA(1);
			if ( !(((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (TABLES - 558)) | (1L << (ROUTINE - 558)) | (1L << (EXECUTE - 558)) | (1L << (FILE - 558)) | (1L << (PROCESS - 558)) | (1L << (RELOAD - 558)) | (1L << (SHUTDOWN - 558)) | (1L << (SUPER - 558)) | (1L << (PRIVILEGES - 558)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6085);
			_la = _input.LA(1);
			if ( !(((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (QUARTER - 550)) | (1L << (MONTH - 550)) | (1L << (DAY - 550)) | (1L << (HOUR - 550)) | (1L << (MINUTE - 550)) | (1L << (WEEK - 550)) | (1L << (SECOND - 550)) | (1L << (MICROSECOND - 550)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6087);
			_la = _input.LA(1);
			if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6089);
			_la = _input.LA(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)))) != 0) || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6091);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (YEAR - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (QUARTER - 550)) | (1L << (MONTH - 550)) | (1L << (DAY - 550)) | (1L << (HOUR - 550)) | (1L << (MINUTE - 550)) | (1L << (WEEK - 550)) | (1L << (SECOND - 550)) | (1L << (MICROSECOND - 550)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (GEOMETRYCOLLECTION - 622)) | (1L << (LINESTRING - 622)) | (1L << (MULTILINESTRING - 622)) | (1L << (MULTIPOINT - 622)) | (1L << (MULTIPOLYGON - 622)) | (1L << (POINT - 622)) | (1L << (POLYGON - 622)) | (1L << (ABS - 622)) | (1L << (ACOS - 622)) | (1L << (ADDDATE - 622)) | (1L << (ADDTIME - 622)) | (1L << (AES_DECRYPT - 622)) | (1L << (AES_ENCRYPT - 622)) | (1L << (AREA - 622)) | (1L << (ASBINARY - 622)) | (1L << (ASIN - 622)) | (1L << (ASTEXT - 622)) | (1L << (ASWKB - 622)) | (1L << (ASWKT - 622)) | (1L << (ASYMMETRIC_DECRYPT - 622)) | (1L << (ASYMMETRIC_DERIVE - 622)) | (1L << (ASYMMETRIC_ENCRYPT - 622)) | (1L << (ASYMMETRIC_SIGN - 622)) | (1L << (ASYMMETRIC_VERIFY - 622)) | (1L << (ATAN - 622)) | (1L << (ATAN2 - 622)) | (1L << (BENCHMARK - 622)) | (1L << (BIN - 622)) | (1L << (BIT_COUNT - 622)) | (1L << (BIT_LENGTH - 622)) | (1L << (BUFFER - 622)) | (1L << (CEIL - 622)) | (1L << (CEILING - 622)) | (1L << (CENTROID - 622)) | (1L << (CHARACTER_LENGTH - 622)) | (1L << (CHARSET - 622)) | (1L << (CHAR_LENGTH - 622)) | (1L << (COERCIBILITY - 622)) | (1L << (COLLATION - 622)) | (1L << (COMPRESS - 622)) | (1L << (CONCAT - 622)) | (1L << (CONCAT_WS - 622)) | (1L << (CONNECTION_ID - 622)) | (1L << (CONV - 622)) | (1L << (CONVERT_TZ - 622)) | (1L << (COS - 622)) | (1L << (COT - 622)) | (1L << (CRC32 - 622)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 622)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 622)) | (1L << (CREATE_DH_PARAMETERS - 622)) | (1L << (CREATE_DIGEST - 622)) | (1L << (CROSSES - 622)) | (1L << (DATEDIFF - 622)) | (1L << (DATE_FORMAT - 622)) | (1L << (DAYNAME - 622)) | (1L << (DAYOFMONTH - 622)) | (1L << (DAYOFWEEK - 622)) | (1L << (DAYOFYEAR - 622)) | (1L << (DECODE - 622)) | (1L << (DEGREES - 622)) | (1L << (DES_DECRYPT - 622)) | (1L << (DES_ENCRYPT - 622)) | (1L << (DIMENSION - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (DISJOINT - 686)) | (1L << (ELT - 686)) | (1L << (ENCODE - 686)) | (1L << (ENCRYPT - 686)) | (1L << (ENDPOINT - 686)) | (1L << (ENVELOPE - 686)) | (1L << (EQUALS - 686)) | (1L << (EXP - 686)) | (1L << (EXPORT_SET - 686)) | (1L << (EXTERIORRING - 686)) | (1L << (EXTRACTVALUE - 686)) | (1L << (FIELD - 686)) | (1L << (FIND_IN_SET - 686)) | (1L << (FLOOR - 686)) | (1L << (FORMAT - 686)) | (1L << (FOUND_ROWS - 686)) | (1L << (FROM_BASE64 - 686)) | (1L << (FROM_DAYS - 686)) | (1L << (FROM_UNIXTIME - 686)) | (1L << (GEOMCOLLFROMTEXT - 686)) | (1L << (GEOMCOLLFROMWKB - 686)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 686)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 686)) | (1L << (GEOMETRYFROMTEXT - 686)) | (1L << (GEOMETRYFROMWKB - 686)) | (1L << (GEOMETRYN - 686)) | (1L << (GEOMETRYTYPE - 686)) | (1L << (GEOMFROMTEXT - 686)) | (1L << (GEOMFROMWKB - 686)) | (1L << (GET_FORMAT - 686)) | (1L << (GET_LOCK - 686)) | (1L << (GLENGTH - 686)) | (1L << (GREATEST - 686)) | (1L << (GTID_SUBSET - 686)) | (1L << (GTID_SUBTRACT - 686)) | (1L << (HEX - 686)) | (1L << (IFNULL - 686)) | (1L << (INET6_ATON - 686)) | (1L << (INET6_NTOA - 686)) | (1L << (INET_ATON - 686)) | (1L << (INET_NTOA - 686)) | (1L << (INSTR - 686)) | (1L << (INTERIORRINGN - 686)) | (1L << (INTERSECTS - 686)) | (1L << (ISCLOSED - 686)) | (1L << (ISEMPTY - 686)) | (1L << (ISNULL - 686)) | (1L << (ISSIMPLE - 686)) | (1L << (IS_FREE_LOCK - 686)) | (1L << (IS_IPV4 - 686)) | (1L << (IS_IPV4_COMPAT - 686)) | (1L << (IS_IPV4_MAPPED - 686)) | (1L << (IS_IPV6 - 686)) | (1L << (IS_USED_LOCK - 686)) | (1L << (LAST_INSERT_ID - 686)) | (1L << (LCASE - 686)) | (1L << (LEAST - 686)) | (1L << (LENGTH - 686)) | (1L << (LINEFROMTEXT - 686)) | (1L << (LINEFROMWKB - 686)) | (1L << (LINESTRINGFROMTEXT - 686)) | (1L << (LINESTRINGFROMWKB - 686)) | (1L << (LN - 686)) | (1L << (LOAD_FILE - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (LOCATE - 750)) | (1L << (LOG - 750)) | (1L << (LOG10 - 750)) | (1L << (LOG2 - 750)) | (1L << (LOWER - 750)) | (1L << (LPAD - 750)) | (1L << (LTRIM - 750)) | (1L << (MAKEDATE - 750)) | (1L << (MAKETIME - 750)) | (1L << (MAKE_SET - 750)) | (1L << (MASTER_POS_WAIT - 750)) | (1L << (MBRCONTAINS - 750)) | (1L << (MBRDISJOINT - 750)) | (1L << (MBREQUAL - 750)) | (1L << (MBRINTERSECTS - 750)) | (1L << (MBROVERLAPS - 750)) | (1L << (MBRTOUCHES - 750)) | (1L << (MBRWITHIN - 750)) | (1L << (MD5 - 750)) | (1L << (MLINEFROMTEXT - 750)) | (1L << (MLINEFROMWKB - 750)) | (1L << (MONTHNAME - 750)) | (1L << (MPOINTFROMTEXT - 750)) | (1L << (MPOINTFROMWKB - 750)) | (1L << (MPOLYFROMTEXT - 750)) | (1L << (MPOLYFROMWKB - 750)) | (1L << (MULTILINESTRINGFROMTEXT - 750)) | (1L << (MULTILINESTRINGFROMWKB - 750)) | (1L << (MULTIPOINTFROMTEXT - 750)) | (1L << (MULTIPOINTFROMWKB - 750)) | (1L << (MULTIPOLYGONFROMTEXT - 750)) | (1L << (MULTIPOLYGONFROMWKB - 750)) | (1L << (NAME_CONST - 750)) | (1L << (NULLIF - 750)) | (1L << (NUMGEOMETRIES - 750)) | (1L << (NUMINTERIORRINGS - 750)) | (1L << (NUMPOINTS - 750)) | (1L << (OCT - 750)) | (1L << (OCTET_LENGTH - 750)) | (1L << (ORD - 750)) | (1L << (OVERLAPS - 750)) | (1L << (PERIOD_ADD - 750)) | (1L << (PERIOD_DIFF - 750)) | (1L << (PI - 750)) | (1L << (POINTFROMTEXT - 750)) | (1L << (POINTFROMWKB - 750)) | (1L << (POINTN - 750)) | (1L << (POLYFROMTEXT - 750)) | (1L << (POLYFROMWKB - 750)) | (1L << (POLYGONFROMTEXT - 750)) | (1L << (POLYGONFROMWKB - 750)) | (1L << (POW - 750)) | (1L << (POWER - 750)) | (1L << (QUOTE - 750)) | (1L << (RADIANS - 750)) | (1L << (RAND - 750)) | (1L << (RANDOM_BYTES - 750)) | (1L << (RELEASE_LOCK - 750)) | (1L << (REVERSE - 750)) | (1L << (ROUND - 750)) | (1L << (ROW_COUNT - 750)) | (1L << (RPAD - 750)) | (1L << (RTRIM - 750)) | (1L << (SEC_TO_TIME - 750)))) != 0) || ((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & ((1L << (SESSION_USER - 814)) | (1L << (SHA - 814)) | (1L << (SHA1 - 814)) | (1L << (SHA2 - 814)) | (1L << (SIGN - 814)) | (1L << (SIN - 814)) | (1L << (SLEEP - 814)) | (1L << (SOUNDEX - 814)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 814)) | (1L << (SQRT - 814)) | (1L << (SRID - 814)) | (1L << (STARTPOINT - 814)) | (1L << (STRCMP - 814)) | (1L << (STR_TO_DATE - 814)) | (1L << (ST_AREA - 814)) | (1L << (ST_ASBINARY - 814)) | (1L << (ST_ASTEXT - 814)) | (1L << (ST_ASWKB - 814)) | (1L << (ST_ASWKT - 814)) | (1L << (ST_BUFFER - 814)) | (1L << (ST_CENTROID - 814)) | (1L << (ST_CONTAINS - 814)) | (1L << (ST_CROSSES - 814)) | (1L << (ST_DIFFERENCE - 814)) | (1L << (ST_DIMENSION - 814)) | (1L << (ST_DISJOINT - 814)) | (1L << (ST_DISTANCE - 814)) | (1L << (ST_ENDPOINT - 814)) | (1L << (ST_ENVELOPE - 814)) | (1L << (ST_EQUALS - 814)) | (1L << (ST_EXTERIORRING - 814)) | (1L << (ST_GEOMCOLLFROMTEXT - 814)) | (1L << (ST_GEOMCOLLFROMTXT - 814)) | (1L << (ST_GEOMCOLLFROMWKB - 814)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 814)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 814)) | (1L << (ST_GEOMETRYFROMTEXT - 814)) | (1L << (ST_GEOMETRYFROMWKB - 814)) | (1L << (ST_GEOMETRYN - 814)) | (1L << (ST_GEOMETRYTYPE - 814)) | (1L << (ST_GEOMFROMTEXT - 814)) | (1L << (ST_GEOMFROMWKB - 814)) | (1L << (ST_INTERIORRINGN - 814)) | (1L << (ST_INTERSECTION - 814)) | (1L << (ST_INTERSECTS - 814)) | (1L << (ST_ISCLOSED - 814)) | (1L << (ST_ISEMPTY - 814)) | (1L << (ST_ISSIMPLE - 814)) | (1L << (ST_LINEFROMTEXT - 814)) | (1L << (ST_LINEFROMWKB - 814)) | (1L << (ST_LINESTRINGFROMTEXT - 814)) | (1L << (ST_LINESTRINGFROMWKB - 814)) | (1L << (ST_NUMGEOMETRIES - 814)) | (1L << (ST_NUMINTERIORRING - 814)) | (1L << (ST_NUMINTERIORRINGS - 814)) | (1L << (ST_NUMPOINTS - 814)) | (1L << (ST_OVERLAPS - 814)) | (1L << (ST_POINTFROMTEXT - 814)) | (1L << (ST_POINTFROMWKB - 814)) | (1L << (ST_POINTN - 814)) | (1L << (ST_POLYFROMTEXT - 814)) | (1L << (ST_POLYFROMWKB - 814)) | (1L << (ST_POLYGONFROMTEXT - 814)) | (1L << (ST_POLYGONFROMWKB - 814)))) != 0) || ((((_la - 878)) & ~0x3f) == 0 && ((1L << (_la - 878)) & ((1L << (ST_SRID - 878)) | (1L << (ST_STARTPOINT - 878)) | (1L << (ST_SYMDIFFERENCE - 878)) | (1L << (ST_TOUCHES - 878)) | (1L << (ST_UNION - 878)) | (1L << (ST_WITHIN - 878)) | (1L << (ST_X - 878)) | (1L << (ST_Y - 878)) | (1L << (SUBDATE - 878)) | (1L << (SUBSTRING_INDEX - 878)) | (1L << (SUBTIME - 878)) | (1L << (SYSTEM_USER - 878)) | (1L << (TAN - 878)) | (1L << (TIMEDIFF - 878)) | (1L << (TIMESTAMPADD - 878)) | (1L << (TIMESTAMPDIFF - 878)) | (1L << (TIME_FORMAT - 878)) | (1L << (TIME_TO_SEC - 878)) | (1L << (TOUCHES - 878)) | (1L << (TO_BASE64 - 878)) | (1L << (TO_DAYS - 878)) | (1L << (TO_SECONDS - 878)) | (1L << (UCASE - 878)) | (1L << (UNCOMPRESS - 878)) | (1L << (UNCOMPRESSED_LENGTH - 878)) | (1L << (UNHEX - 878)) | (1L << (UNIX_TIMESTAMP - 878)) | (1L << (UPDATEXML - 878)) | (1L << (UPPER - 878)) | (1L << (UUID - 878)) | (1L << (UUID_SHORT - 878)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 878)) | (1L << (VERSION - 878)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 878)) | (1L << (WEEKDAY - 878)) | (1L << (WEEKOFYEAR - 878)) | (1L << (WEIGHT_STRING - 878)) | (1L << (WITHIN - 878)) | (1L << (YEARWEEK - 878)) | (1L << (Y_FUNCTION - 878)) | (1L << (X_FUNCTION - 878)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 292: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 293: return predicate_sempred((PredicateContext)_localctx, predIndex);

		case 294: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return precpred(_ctx, 7);

		case 2: return precpred(_ctx, 5);

		case 3: return precpred(_ctx, 4);

		case 4: return precpred(_ctx, 2);

		case 5: return precpred(_ctx, 9);

		case 6: return precpred(_ctx, 8);

		case 7: return precpred(_ctx, 6);

		case 8: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return precpred(_ctx, 2);

		case 10: return precpred(_ctx, 1);

		case 11: return precpred(_ctx, 11);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u03cf\u17d0\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\3\2\5\2\u026a\n\2\3\2\5\2\u026d\n\2\3\2\3\2\3\3\3\3\3\3\5\3\u0274\n\3"+
		"\3\3\3\3\3\3\7\3\u0279\n\3\f\3\16\3\u027c\13\3\3\3\3\3\3\3\5\3\u0281\n"+
		"\3\3\3\5\3\u0284\n\3\3\3\5\3\u0287\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4"+
		"\u0290\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\5\6\u02b7\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\5\7\u02c3\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02ce\n\b\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u02df\n\t"+
		"\3\n\3\n\3\n\5\n\u02e4\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\5\13\u02f0\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u030b\n\f\3\r"+
		"\3\r\3\r\3\r\5\r\u0311\n\r\3\16\3\16\3\16\5\16\u0316\n\16\3\16\3\16\7"+
		"\16\u031a\n\16\f\16\16\16\u031d\13\16\3\17\3\17\5\17\u0321\n\17\3\17\3"+
		"\17\5\17\u0325\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u032e\n\17"+
		"\3\17\5\17\u0331\n\17\3\17\5\17\u0334\n\17\3\17\3\17\5\17\u0338\n\17\3"+
		"\17\3\17\3\17\3\20\3\20\5\20\u033f\n\20\3\20\5\20\u0342\n\20\3\20\3\20"+
		"\3\20\5\20\u0347\n\20\3\20\3\20\3\20\3\20\7\20\u034d\n\20\f\20\16\20\u0350"+
		"\13\20\3\20\3\20\5\20\u0354\n\20\3\20\3\20\3\20\5\20\u0359\n\20\3\20\5"+
		"\20\u035c\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0367"+
		"\n\21\3\21\5\21\u036a\n\21\3\21\3\21\5\21\u036e\n\21\3\21\5\21\u0371\n"+
		"\21\3\21\3\21\5\21\u0375\n\21\3\21\5\21\u0378\n\21\3\21\3\21\5\21\u037c"+
		"\n\21\3\21\5\21\u037f\n\21\3\21\5\21\u0382\n\21\3\21\3\21\5\21\u0386\n"+
		"\21\3\21\5\21\u0389\n\21\3\21\3\21\5\21\u038d\n\21\3\21\3\21\3\22\3\22"+
		"\5\22\u0393\n\22\3\22\3\22\3\22\3\22\5\22\u0399\n\22\3\22\3\22\7\22\u039d"+
		"\n\22\f\22\16\22\u03a0\13\22\3\22\3\22\7\22\u03a4\n\22\f\22\16\22\u03a7"+
		"\13\22\3\22\3\22\3\23\3\23\5\23\u03ad\n\23\3\23\3\23\3\23\3\23\5\23\u03b3"+
		"\n\23\3\23\3\23\7\23\u03b7\n\23\f\23\16\23\u03ba\13\23\3\23\3\23\3\23"+
		"\3\23\7\23\u03c0\n\23\f\23\16\23\u03c3\13\23\3\23\3\23\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u03d3\n\24\f\24\16"+
		"\24\u03d6\13\24\3\24\3\24\3\25\3\25\3\25\5\25\u03dd\n\25\3\25\3\25\3\25"+
		"\3\25\5\25\u03e3\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u03f0\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u03f7\n\25\3\25\3"+
		"\25\3\25\3\25\5\25\u03fd\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u0404\n\25"+
		"\3\25\3\25\3\25\5\25\u0409\n\25\3\25\3\25\3\25\7\25\u040e\n\25\f\25\16"+
		"\25\u0411\13\25\5\25\u0413\n\25\3\25\5\25\u0416\n\25\3\25\5\25\u0419\n"+
		"\25\3\25\5\25\u041c\n\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0424\n\25"+
		"\3\25\3\25\3\25\3\25\5\25\u042a\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\5\25\u0433\n\25\3\25\3\25\3\25\7\25\u0438\n\25\f\25\16\25\u043b\13\25"+
		"\5\25\u043d\n\25\3\25\5\25\u0440\n\25\3\25\3\25\5\25\u0444\n\25\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u044f\n\26\3\26\3\26\5\26"+
		"\u0453\n\26\3\26\5\26\u0456\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\5\27\u0464\n\27\3\27\5\27\u0467\n\27\3\27\3\27"+
		"\5\27\u046b\n\27\3\27\5\27\u046e\n\27\3\27\3\27\5\27\u0472\n\27\3\27\5"+
		"\27\u0475\n\27\3\27\3\27\5\27\u0479\n\27\3\27\5\27\u047c\n\27\3\27\3\27"+
		"\5\27\u0480\n\27\3\27\5\27\u0483\n\27\3\27\5\27\u0486\n\27\3\27\3\27\5"+
		"\27\u048a\n\27\3\27\5\27\u048d\n\27\3\27\3\27\5\27\u0491\n\27\3\27\3\27"+
		"\3\30\3\30\5\30\u0497\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\5\30\u04a4\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u04ab\n\31\3"+
		"\31\3\31\3\31\5\31\u04b0\n\31\3\31\5\31\u04b3\n\31\3\31\3\31\3\31\5\31"+
		"\u04b8\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u04c0\n\31\3\31\3\31\3"+
		"\31\3\31\5\31\u04c6\n\31\3\31\3\31\5\31\u04ca\n\31\3\32\5\32\u04cd\n\32"+
		"\3\32\3\32\3\32\5\32\u04d2\n\32\3\32\3\32\5\32\u04d6\n\32\3\32\3\32\5"+
		"\32\u04da\n\32\3\32\5\32\u04dd\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33"+
		"\u04e5\n\33\5\33\u04e7\n\33\3\34\3\34\3\34\7\34\u04ec\n\34\f\34\16\34"+
		"\u04ef\13\34\3\34\3\34\3\34\5\34\u04f4\n\34\3\34\3\34\3\34\3\34\7\34\u04fa"+
		"\n\34\f\34\16\34\u04fd\13\34\5\34\u04ff\n\34\3\34\3\34\3\34\7\34\u0504"+
		"\n\34\f\34\16\34\u0507\13\34\5\34\u0509\n\34\5\34\u050b\n\34\3\35\3\35"+
		"\3\35\3\35\5\35\u0511\n\35\3\36\3\36\3\36\3\36\5\36\u0517\n\36\3\36\3"+
		"\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5"+
		"\37\u0528\n\37\3 \3 \3 \3 \3 \5 \u052f\n \3!\3!\3!\3\"\3\"\5\"\u0536\n"+
		"\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u053f\n\"\3#\3#\3#\3#\3$\3$\3$\3%\3"+
		"%\3%\3%\3%\5%\u054d\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u055a\n%\3"+
		"%\3%\3%\5%\u055f\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u056f"+
		"\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\7\'\u0578\n\'\f\'\16\'\u057b\13\'\3\'"+
		"\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u058a\n(\3)\3)\3)\3)\7)\u0590"+
		"\n)\f)\16)\u0593\13)\3*\3*\3*\3*\3*\3*\3*\5*\u059c\n*\3*\3*\3*\3*\3*\3"+
		"*\5*\u05a4\n*\3*\3*\3*\3*\3*\3*\3*\5*\u05ad\n*\3+\3+\5+\u05b1\n+\5+\u05b3"+
		"\n+\3+\3+\3+\3+\5+\u05b9\n+\3+\3+\3+\7+\u05be\n+\f+\16+\u05c1\13+\3+\3"+
		"+\5+\u05c5\n+\5+\u05c7\n+\3+\3+\5+\u05cb\n+\3+\3+\5+\u05cf\n+\3+\5+\u05d2"+
		"\n+\3+\3+\3+\7+\u05d7\n+\f+\16+\u05da\13+\3+\3+\5+\u05de\n+\5+\u05e0\n"+
		"+\3+\3+\3+\5+\u05e5\n+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u05ef\n+\3,\3,\3,\3"+
		",\3,\5,\u05f6\n,\3,\5,\u05f9\n,\3-\3-\3-\3-\3-\3-\5-\u0601\n-\3-\3-\3"+
		"-\3-\3-\3-\5-\u0609\n-\5-\u060b\n-\3.\3.\3.\3.\3.\3.\5.\u0613\n.\3/\3"+
		"/\3/\5/\u0618\n/\3/\5/\u061b\n/\3/\3/\3/\7/\u0620\n/\f/\16/\u0623\13/"+
		"\3/\3/\5/\u0627\n/\3/\5/\u062a\n/\3/\3/\7/\u062e\n/\f/\16/\u0631\13/\5"+
		"/\u0633\n/\3\60\3\60\5\60\u0637\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u063e"+
		"\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u0645\n\60\3\60\3\60\3\60\3\60\5\60"+
		"\u064b\n\60\3\60\3\60\3\60\5\60\u0650\n\60\3\60\5\60\u0653\n\60\3\60\3"+
		"\60\3\60\3\60\3\60\5\60\u065a\n\60\3\60\3\60\3\60\5\60\u065f\n\60\3\60"+
		"\3\60\5\60\u0663\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u066a\n\60\3\60\3"+
		"\60\3\60\3\60\5\60\u0670\n\60\3\60\3\60\3\60\3\60\5\60\u0676\n\60\3\60"+
		"\3\60\3\60\3\60\3\60\5\60\u067d\n\60\3\60\3\60\3\60\3\60\5\60\u0683\n"+
		"\60\3\60\3\60\3\60\3\60\5\60\u0689\n\60\3\60\3\60\3\60\3\60\3\60\5\60"+
		"\u0690\n\60\3\60\3\60\3\60\3\60\5\60\u0696\n\60\3\60\3\60\3\60\3\60\5"+
		"\60\u069c\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u06a3\n\60\3\60\3\60\3\60"+
		"\3\60\3\60\5\60\u06aa\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u06b1\n\60\3"+
		"\60\3\60\3\60\3\60\5\60\u06b7\n\60\3\60\3\60\3\60\3\60\5\60\u06bd\n\60"+
		"\3\60\3\60\3\60\3\60\5\60\u06c3\n\60\3\60\3\60\3\60\3\60\5\60\u06c9\n"+
		"\60\3\60\3\60\3\60\3\60\5\60\u06cf\n\60\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\5\60\u06d7\n\60\3\60\3\60\3\60\3\60\5\60\u06dd\n\60\3\60\3\60\3\60\3"+
		"\60\3\60\5\60\u06e4\n\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62"+
		"\u06ee\n\62\3\62\3\62\3\62\3\62\3\62\5\62\u06f5\n\62\5\62\u06f7\n\62\3"+
		"\62\3\62\3\62\3\62\7\62\u06fd\n\62\f\62\16\62\u0700\13\62\3\62\3\62\5"+
		"\62\u0704\n\62\3\63\5\63\u0707\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63"+
		"\u070f\n\63\3\63\3\63\3\63\3\63\5\63\u0715\n\63\3\63\3\63\3\63\3\63\3"+
		"\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0725\n\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0731\n\63\5\63\u0733"+
		"\n\63\3\64\5\64\u0736\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u073e\n"+
		"\64\3\64\3\64\3\64\3\64\5\64\u0744\n\64\3\64\3\64\3\64\3\64\5\64\u074a"+
		"\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0755\n\65\f\65"+
		"\16\65\u0758\13\65\3\65\3\65\7\65\u075c\n\65\f\65\16\65\u075f\13\65\3"+
		"\65\3\65\3\65\7\65\u0764\n\65\f\65\16\65\u0767\13\65\5\65\u0769\n\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0773\n\65\f\65\16\65\u0776"+
		"\13\65\3\65\3\65\7\65\u077a\n\65\f\65\16\65\u077d\13\65\3\65\3\65\3\65"+
		"\7\65\u0782\n\65\f\65\16\65\u0785\13\65\5\65\u0787\n\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\7\65\u0791\n\65\f\65\16\65\u0794\13\65\3\65"+
		"\3\65\7\65\u0798\n\65\f\65\16\65\u079b\13\65\3\65\3\65\3\65\7\65\u07a0"+
		"\n\65\f\65\16\65\u07a3\13\65\5\65\u07a5\n\65\3\65\3\65\3\65\7\65\u07aa"+
		"\n\65\f\65\16\65\u07ad\13\65\3\65\3\65\3\65\7\65\u07b2\n\65\f\65\16\65"+
		"\u07b5\13\65\5\65\u07b7\n\65\5\65\u07b9\n\65\3\66\3\66\3\66\5\66\u07be"+
		"\n\66\3\67\3\67\3\67\3\67\6\67\u07c4\n\67\r\67\16\67\u07c5\3\67\3\67\3"+
		"8\38\38\78\u07cd\n8\f8\168\u07d0\138\39\59\u07d3\n9\39\39\59\u07d7\n9"+
		"\39\39\39\59\u07dc\n9\39\39\39\39\59\u07e2\n9\39\39\39\39\59\u07e8\n9"+
		"\39\39\39\59\u07ed\n9\39\39\39\59\u07f2\n9\39\39\39\59\u07f7\n9\39\39"+
		"\39\59\u07fc\n9\39\59\u07ff\n9\3:\3:\3:\5:\u0804\n:\3:\6:\u0807\n:\r:"+
		"\16:\u0808\3:\3:\3:\3:\3:\3:\3:\3:\5:\u0813\n:\3;\3;\5;\u0817\n;\3;\3"+
		";\3;\3;\3;\5;\u081e\n;\3;\3;\3;\5;\u0823\n;\3;\5;\u0826\n;\3;\3;\3;\5"+
		";\u082b\n;\3;\5;\u082e\n;\3;\3;\5;\u0832\n;\3;\3;\5;\u0836\n;\3<\3<\3"+
		"<\3<\7<\u083c\n<\f<\16<\u083f\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>"+
		"\3>\3>\3>\3>\5>\u0851\n>\3>\5>\u0854\n>\3>\5>\u0857\n>\3>\3>\5>\u085b"+
		"\n>\3>\3>\3?\3?\3?\3?\7?\u0863\n?\f?\16?\u0866\13?\3@\3@\3@\3@\3@\3@\3"+
		"@\3@\7@\u0870\n@\f@\16@\u0873\13@\3@\3@\3A\3A\5A\u0879\nA\3A\5A\u087c"+
		"\nA\3A\3A\3A\3A\3A\7A\u0883\nA\fA\16A\u0886\13A\3A\5A\u0889\nA\3B\3B\3"+
		"B\3B\3B\3B\3B\3B\3B\5B\u0894\nB\3B\5B\u0897\nB\3B\3B\5B\u089b\nB\3B\3"+
		"B\3C\3C\3C\3C\5C\u08a3\nC\3C\5C\u08a6\nC\3C\3C\3C\5C\u08ab\nC\3C\3C\3"+
		"C\3C\3C\3C\5C\u08b3\nC\3C\3C\3C\3C\5C\u08b9\nC\3C\3C\5C\u08bd\nC\3D\3"+
		"D\3D\5D\u08c2\nD\3D\3D\3D\3D\3D\5D\u08c9\nD\3D\3D\5D\u08cd\nD\3D\3D\3"+
		"D\3D\3D\3D\3D\7D\u08d6\nD\fD\16D\u08d9\13D\3D\3D\3D\3D\3D\5D\u08e0\nD"+
		"\3D\5D\u08e3\nD\3D\3D\7D\u08e7\nD\fD\16D\u08ea\13D\3D\3D\3D\5D\u08ef\n"+
		"D\5D\u08f1\nD\3D\3D\3D\5D\u08f6\nD\3D\3D\7D\u08fa\nD\fD\16D\u08fd\13D"+
		"\3D\3D\3D\5D\u0902\nD\5D\u0904\nD\3D\3D\5D\u0908\nD\3D\5D\u090b\nD\3D"+
		"\5D\u090e\nD\3D\3D\7D\u0912\nD\fD\16D\u0915\13D\3D\3D\3D\5D\u091a\nD\3"+
		"D\5D\u091d\nD\3D\3D\7D\u0921\nD\fD\16D\u0924\13D\3D\3D\3D\5D\u0929\nD"+
		"\5D\u092b\nD\3D\3D\3D\5D\u0930\nD\3D\3D\3D\3D\3D\5D\u0937\nD\3D\3D\3D"+
		"\5D\u093c\nD\3D\3D\3D\3D\3D\3D\5D\u0944\nD\3D\3D\5D\u0948\nD\3D\3D\3D"+
		"\3D\3D\3D\5D\u0950\nD\3D\3D\5D\u0954\nD\3D\3D\3D\5D\u0959\nD\3D\3D\3D"+
		"\3D\3D\5D\u0960\nD\3D\3D\5D\u0964\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\5D\u0977\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0984"+
		"\nD\3D\5D\u0987\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0990\nD\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09a3\nD\3D\3D\3D\3D\3D\5D\u09aa"+
		"\nD\3D\3D\3D\3D\3D\5D\u09b1\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09be"+
		"\nD\fD\16D\u09c1\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09cd\nD\3D\3D\3"+
		"D\3D\5D\u09d3\nD\3D\3D\3D\3D\5D\u09d9\nD\3D\3D\3D\3D\5D\u09df\nD\3D\3"+
		"D\3D\3D\5D\u09e5\nD\3D\3D\3D\3D\5D\u09eb\nD\3D\3D\3D\3D\5D\u09f1\nD\3"+
		"E\3E\3E\5E\u09f6\nE\3E\3E\3F\3F\3F\5F\u09fd\nF\3F\3F\3G\3G\3G\5G\u0a04"+
		"\nG\3G\3G\3G\3G\3G\5G\u0a0b\nG\3G\5G\u0a0e\nG\3G\3G\5G\u0a12\nG\3G\5G"+
		"\u0a15\nG\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\5I\u0a22\nI\3I\3I\3J\3J\3J"+
		"\5J\u0a29\nJ\3J\3J\3K\3K\3K\5K\u0a30\nK\3K\3K\3L\3L\5L\u0a36\nL\3L\3L"+
		"\5L\u0a3a\nL\3L\3L\5L\u0a3e\nL\3M\3M\3M\3M\3M\5M\u0a45\nM\3M\5M\u0a48"+
		"\nM\3N\3N\3N\5N\u0a4d\nN\3N\3N\3O\3O\3O\5O\u0a54\nO\3O\3O\3O\7O\u0a59"+
		"\nO\fO\16O\u0a5c\13O\3O\5O\u0a5f\nO\3P\3P\3P\3P\3P\7P\u0a66\nP\fP\16P"+
		"\u0a69\13P\3Q\3Q\3Q\3Q\3R\3R\5R\u0a71\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0a7a"+
		"\nS\3S\5S\u0a7d\nS\3T\3T\5T\u0a81\nT\3U\3U\3U\3V\3V\3V\3V\5V\u0a8a\nV"+
		"\3W\3W\5W\u0a8e\nW\3W\5W\u0a91\nW\3W\5W\u0a94\nW\3W\3W\3W\3W\3W\3W\5W"+
		"\u0a9c\nW\3W\3W\3W\3W\5W\u0aa2\nW\3W\3W\3W\3W\3W\7W\u0aa9\nW\fW\16W\u0aac"+
		"\13W\5W\u0aae\nW\3W\3W\3W\3W\3W\3W\3W\7W\u0ab7\nW\fW\16W\u0aba\13W\5W"+
		"\u0abc\nW\3X\3X\3X\5X\u0ac1\nX\3X\5X\u0ac4\nX\3X\3X\3X\5X\u0ac9\nX\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\5X\u0ad3\nX\3X\3X\3X\5X\u0ad8\nX\3X\3X\6X\u0adc"+
		"\nX\rX\16X\u0add\5X\u0ae0\nX\3X\3X\6X\u0ae4\nX\rX\16X\u0ae5\5X\u0ae8\n"+
		"X\3X\3X\3X\3X\5X\u0aee\nX\3X\3X\3X\3X\7X\u0af4\nX\fX\16X\u0af7\13X\3X"+
		"\3X\5X\u0afb\nX\3X\3X\3X\3X\7X\u0b01\nX\fX\16X\u0b04\13X\5X\u0b06\nX\3"+
		"Y\3Y\3Y\5Y\u0b0b\nY\3Y\5Y\u0b0e\nY\3Y\3Y\3Y\5Y\u0b13\nY\3Y\3Y\3Y\3Y\3"+
		"Y\3Y\5Y\u0b1b\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b23\nY\3Y\3Y\3Y\3Y\5Y\u0b29\n"+
		"Y\3Y\3Y\3Y\3Y\7Y\u0b2f\nY\fY\16Y\u0b32\13Y\3Y\3Y\5Y\u0b36\nY\3Y\3Y\3Y"+
		"\3Y\7Y\u0b3c\nY\fY\16Y\u0b3f\13Y\5Y\u0b41\nY\3Z\3Z\5Z\u0b45\nZ\3Z\5Z\u0b48"+
		"\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b50\nZ\3Z\3Z\3Z\3Z\5Z\u0b56\nZ\3Z\3Z\3Z\3Z"+
		"\3Z\7Z\u0b5d\nZ\fZ\16Z\u0b60\13Z\5Z\u0b62\nZ\3[\3[\5[\u0b66\n[\3[\3[\5"+
		"[\u0b6a\n[\3[\3[\6[\u0b6e\n[\r[\16[\u0b6f\3[\3[\5[\u0b74\n[\3[\3[\5[\u0b78"+
		"\n[\5[\u0b7a\n[\3[\5[\u0b7d\n[\3[\5[\u0b80\n[\3[\5[\u0b83\n[\3[\3[\6["+
		"\u0b87\n[\r[\16[\u0b88\3[\3[\5[\u0b8d\n[\3[\5[\u0b90\n[\3[\5[\u0b93\n"+
		"[\3[\5[\u0b96\n[\3[\5[\u0b99\n[\5[\u0b9b\n[\3\\\3\\\5\\\u0b9f\n\\\3]\3"+
		"]\3]\3]\3]\3]\3]\3]\3]\3]\7]\u0bab\n]\f]\16]\u0bae\13]\5]\u0bb0\n]\3^"+
		"\3^\3^\3^\5^\u0bb6\n^\3_\3_\5_\u0bba\n_\3`\3`\3`\3`\3`\3`\5`\u0bc2\n`"+
		"\3a\3a\5a\u0bc6\na\3a\5a\u0bc9\na\3a\5a\u0bcc\na\3a\3a\3a\3a\3a\3a\3a"+
		"\5a\u0bd5\na\3a\3a\5a\u0bd9\na\3a\5a\u0bdc\na\3a\3a\5a\u0be0\na\3b\3b"+
		"\5b\u0be4\nb\3b\5b\u0be7\nb\3b\5b\u0bea\nb\3b\3b\3b\5b\u0bef\nb\3b\3b"+
		"\3b\3b\5b\u0bf5\nb\7b\u0bf7\nb\fb\16b\u0bfa\13b\3b\3b\3b\3b\3b\3b\3b\5"+
		"b\u0c03\nb\3b\3b\3b\3b\5b\u0c09\nb\7b\u0c0b\nb\fb\16b\u0c0e\13b\3b\3b"+
		"\3b\5b\u0c13\nb\3b\3b\5b\u0c17\nb\3c\3c\3c\3c\5c\u0c1d\nc\3c\5c\u0c20"+
		"\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0c2c\nd\3d\3d\5d\u0c30\nd\3d\3d"+
		"\5d\u0c34\nd\3e\3e\3e\3e\3e\3e\5e\u0c3c\ne\3e\3e\5e\u0c40\ne\3f\3f\3f"+
		"\3f\3g\3g\5g\u0c48\ng\3g\5g\u0c4b\ng\3g\3g\5g\u0c4f\ng\3g\5g\u0c52\ng"+
		"\3g\3g\3g\3g\7g\u0c58\ng\fg\16g\u0c5b\13g\3g\3g\5g\u0c5f\ng\3g\5g\u0c62"+
		"\ng\3g\5g\u0c65\ng\3h\3h\5h\u0c69\nh\3h\5h\u0c6c\nh\3h\3h\3h\3h\3h\7h"+
		"\u0c73\nh\fh\16h\u0c76\13h\3h\3h\5h\u0c7a\nh\3i\3i\3i\3i\3i\7i\u0c81\n"+
		"i\fi\16i\u0c84\13i\3j\3j\5j\u0c88\nj\3k\3k\3k\7k\u0c8d\nk\fk\16k\u0c90"+
		"\13k\3l\3l\7l\u0c94\nl\fl\16l\u0c97\13l\3l\3l\3l\7l\u0c9c\nl\fl\16l\u0c9f"+
		"\13l\3l\3l\5l\u0ca3\nl\3m\3m\3m\3m\3m\3m\5m\u0cab\nm\3m\5m\u0cae\nm\3"+
		"m\5m\u0cb1\nm\3m\3m\3m\7m\u0cb6\nm\fm\16m\u0cb9\13m\5m\u0cbb\nm\3m\3m"+
		"\3m\3m\3m\5m\u0cc2\nm\3m\5m\u0cc5\nm\3m\3m\3m\3m\3m\3m\5m\u0ccd\nm\3n"+
		"\3n\3n\3n\5n\u0cd3\nn\3n\3n\3n\3n\3o\3o\3o\3o\3o\5o\u0cde\no\3p\5p\u0ce1"+
		"\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0cec\np\3p\3p\3p\3p\5p\u0cf2\np\3p"+
		"\3p\5p\u0cf6\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d01\np\3p\3p\3p\5p\u0d06"+
		"\np\5p\u0d08\np\3p\3p\5p\u0d0c\np\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0d16\nq"+
		"\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d20\nr\3s\3s\7s\u0d24\ns\fs\16s\u0d27\13"+
		"s\3s\3s\5s\u0d2b\ns\3s\5s\u0d2e\ns\3s\5s\u0d31\ns\3s\5s\u0d34\ns\3s\3"+
		"s\7s\u0d38\ns\fs\16s\u0d3b\13s\3s\3s\5s\u0d3f\ns\3s\5s\u0d42\ns\3s\5s"+
		"\u0d45\ns\3s\5s\u0d48\ns\5s\u0d4a\ns\3t\3t\7t\u0d4e\nt\ft\16t\u0d51\13"+
		"t\3t\3t\5t\u0d55\nt\3t\5t\u0d58\nt\3t\5t\u0d5b\nt\3u\3u\5u\u0d5f\nu\3"+
		"u\3u\3v\3v\5v\u0d65\nv\3v\3v\5v\u0d69\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0d73"+
		"\nw\3x\3x\5x\u0d77\nx\3x\3x\7x\u0d7b\nx\fx\16x\u0d7e\13x\3y\3y\3y\3y\3"+
		"y\3y\5y\u0d86\ny\3y\5y\u0d89\ny\3y\3y\5y\u0d8d\ny\3y\5y\u0d90\ny\3y\3"+
		"y\5y\u0d94\ny\3y\3y\5y\u0d98\ny\3y\5y\u0d9b\ny\5y\u0d9d\ny\3z\3z\3z\3"+
		"z\7z\u0da3\nz\fz\16z\u0da6\13z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0db1\nz"+
		"\3z\3z\6z\u0db5\nz\rz\16z\u0db6\5z\u0db9\nz\3z\3z\6z\u0dbd\nz\rz\16z\u0dbe"+
		"\5z\u0dc1\nz\5z\u0dc3\nz\3{\3{\3{\3{\5{\u0dc9\n{\3{\3{\3{\3{\3{\3{\5{"+
		"\u0dd1\n{\3|\3|\3|\3|\3|\3|\5|\u0dd9\n|\3}\3}\3}\3}\5}\u0ddf\n}\3}\3}"+
		"\3}\3}\3}\7}\u0de6\n}\f}\16}\u0de9\13}\3}\3}\5}\u0ded\n}\5}\u0def\n}\3"+
		"}\3}\5}\u0df3\n}\3~\3~\5~\u0df7\n~\3\177\3\177\3\177\3\177\5\177\u0dfd"+
		"\n\177\3\177\3\177\3\177\3\177\3\177\5\177\u0e04\n\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\7\u0080\u0e0b\n\u0080\f\u0080\16\u0080\u0e0e"+
		"\13\u0080\5\u0080\u0e10\n\u0080\3\u0081\3\u0081\5\u0081\u0e14\n\u0081"+
		"\3\u0082\3\u0082\5\u0082\u0e18\n\u0082\3\u0082\3\u0082\5\u0082\u0e1c\n"+
		"\u0082\3\u0082\5\u0082\u0e1f\n\u0082\3\u0082\5\u0082\u0e22\n\u0082\3\u0082"+
		"\5\u0082\u0e25\n\u0082\3\u0083\3\u0083\5\u0083\u0e29\n\u0083\3\u0083\3"+
		"\u0083\5\u0083\u0e2d\n\u0083\3\u0083\5\u0083\u0e30\n\u0083\3\u0083\5\u0083"+
		"\u0e33\n\u0083\3\u0083\5\u0083\u0e36\n\u0083\3\u0084\3\u0084\3\u0084\3"+
		"\u0085\3\u0085\5\u0085\u0e3d\n\u0085\3\u0085\3\u0085\5\u0085\u0e41\n\u0085"+
		"\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\7\u0087\u0e4e\n\u0087\f\u0087\16\u0087\u0e51\13\u0087"+
		"\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a"+
		"\3\u008a\5\u008a\u0e5d\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a"+
		"\u0e63\n\u008a\f\u008a\16\u008a\u0e66\13\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0e6f\n\u008b\3\u008c\3\u008c"+
		"\5\u008c\u0e73\n\u008c\3\u008c\5\u008c\u0e76\n\u008c\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\5\u008d\u0e7c\n\u008d\3\u008d\5\u008d\u0e7f\n\u008d\3\u008d"+
		"\5\u008d\u0e82\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0e8b\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\5\u008f\u0e94\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\7\u0090\u0e9c\n\u0090\f\u0090\16\u0090\u0e9f\13\u0090"+
		"\3\u0090\5\u0090\u0ea2\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\7\u0091\u0eaa\n\u0091\f\u0091\16\u0091\u0ead\13\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0eb6\n\u0092"+
		"\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u0ebe\n\u0094"+
		"\3\u0094\5\u0094\u0ec1\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\7\u0095\u0ec8\n\u0095\f\u0095\16\u0095\u0ecb\13\u0095\5\u0095\u0ecd\n"+
		"\u0095\3\u0095\3\u0095\5\u0095\u0ed1\n\u0095\3\u0095\7\u0095\u0ed4\n\u0095"+
		"\f\u0095\16\u0095\u0ed7\13\u0095\3\u0095\5\u0095\u0eda\n\u0095\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0ee1\n\u0096\f\u0096\16\u0096"+
		"\u0ee4\13\u0096\5\u0096\u0ee6\n\u0096\3\u0097\3\u0097\3\u0097\3\u0098"+
		"\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\7\u0099\u0f03\n\u0099\f\u0099"+
		"\16\u0099\u0f06\13\u0099\5\u0099\u0f08\n\u0099\3\u0099\5\u0099\u0f0b\n"+
		"\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e"+
		"\u0f41\n\u009e\f\u009e\16\u009e\u0f44\13\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0f48\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0"+
		"\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0f64\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f72"+
		"\n\u00a2\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u0f77\n\u00a3\f\u00a3\16\u00a3"+
		"\u0f7a\13\u00a3\3\u00a3\5\u00a3\u0f7d\n\u00a3\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\5\u00a4\u0f83\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0f8b\n\u00a5\5\u00a5\u0f8d\n\u00a5\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0f98\n"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\5\u00a9\u0fa2\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0fa9\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0faf\n\u00ab\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\5\u00ad\u0fb7\n\u00ad\3"+
		"\u00ae\3\u00ae\3\u00ae\5\u00ae\u0fbc\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3"+
		"\u00ae\7\u00ae\u0fc2\n\u00ae\f\u00ae\16\u00ae\u0fc5\13\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\7\u00ae\u0fca\n\u00ae\f\u00ae\16\u00ae\u0fcd\13\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\7\u00ae\u0fd2\n\u00ae\f\u00ae\16\u00ae\u0fd5\13"+
		"\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0fda\n\u00ae\f\u00ae\16\u00ae"+
		"\u0fdd\13\u00ae\3\u00ae\6\u00ae\u0fe0\n\u00ae\r\u00ae\16\u00ae\u0fe1\5"+
		"\u00ae\u0fe4\n\u00ae\3\u00ae\3\u00ae\5\u00ae\u0fe8\n\u00ae\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0fed\n\u00af\3\u00af\6\u00af\u0ff0\n\u00af\r\u00af\16"+
		"\u00af\u0ff1\3\u00af\3\u00af\6\u00af\u0ff6\n\u00af\r\u00af\16\u00af\u0ff7"+
		"\5\u00af\u0ffa\n\u00af\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\6\u00b0\u1003\n\u00b0\r\u00b0\16\u00b0\u1004\3\u00b0\7\u00b0"+
		"\u1008\n\u00b0\f\u00b0\16\u00b0\u100b\13\u00b0\3\u00b0\3\u00b0\6\u00b0"+
		"\u100f\n\u00b0\r\u00b0\16\u00b0\u1010\5\u00b0\u1013\n\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b3\5\u00b3\u1021\n\u00b3\3\u00b3\3\u00b3\6\u00b3\u1025\n"+
		"\u00b3\r\u00b3\16\u00b3\u1026\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u102c\n"+
		"\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1031\n\u00b4\3\u00b4\3\u00b4\6"+
		"\u00b4\u1035\n\u00b4\r\u00b4\16\u00b4\u1036\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\5\u00b4\u103e\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u1046\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\6"+
		"\u00b6\u104c\n\u00b6\r\u00b6\16\u00b6\u104d\3\u00b6\3\u00b6\3\u00b6\5"+
		"\u00b6\u1053\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1059\n\u00b7"+
		"\3\u00b7\5\u00b7\u105c\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u1064\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u106b\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\5\u00b9\u1074\n\u00b9\3\u00b9\5\u00b9\u1077\n\u00b9\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u1086\n\u00bb\f\u00bb\16\u00bb\u1089"+
		"\13\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1090\n\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1098\n\u00bc"+
		"\3\u00bd\3\u00bd\5\u00bd\u109c\n\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u10a3\n\u00be\3\u00be\3\u00be\6\u00be\u10a7\n\u00be\r"+
		"\u00be\16\u00be\u10a8\3\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf\u10af\n"+
		"\u00bf\r\u00bf\16\u00bf\u10b0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\7\u00c0\u10b8\n\u00c0\f\u00c0\16\u00c0\u10bb\13\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u10c0\n\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u10c5\n"+
		"\u00c0\f\u00c0\16\u00c0\u10c8\13\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\5\u00c0\u10ce\n\u00c0\3\u00c0\7\u00c0\u10d1\n\u00c0\f\u00c0\16\u00c0"+
		"\u10d4\13\u00c0\5\u00c0\u10d6\n\u00c0\5\u00c0\u10d8\n\u00c0\3\u00c0\3"+
		"\u00c0\6\u00c0\u10dc\n\u00c0\r\u00c0\16\u00c0\u10dd\5\u00c0\u10e0\n\u00c0"+
		"\3\u00c0\3\u00c0\7\u00c0\u10e4\n\u00c0\f\u00c0\16\u00c0\u10e7\13\u00c0"+
		"\5\u00c0\u10e9\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1"+
		"\u10f0\n\u00c1\f\u00c1\16\u00c1\u10f3\13\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\5\u00c1\u10f8\n\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10fd\n\u00c1\f"+
		"\u00c1\16\u00c1\u1100\13\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u1106\n\u00c1\3\u00c1\7\u00c1\u1109\n\u00c1\f\u00c1\16\u00c1\u110c\13"+
		"\u00c1\5\u00c1\u110e\n\u00c1\5\u00c1\u1110\n\u00c1\3\u00c1\3\u00c1\6\u00c1"+
		"\u1114\n\u00c1\r\u00c1\16\u00c1\u1115\5\u00c1\u1118\n\u00c1\3\u00c1\3"+
		"\u00c1\7\u00c1\u111c\n\u00c1\f\u00c1\16\u00c1\u111f\13\u00c1\5\u00c1\u1121"+
		"\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1126\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\7\u00c2\u112b\n\u00c2\f\u00c2\16\u00c2\u112e\13\u00c2\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u1134\n\u00c3\f\u00c3\16\u00c3\u1137"+
		"\13\u00c3\3\u00c3\3\u00c3\5\u00c3\u113b\n\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\7\u00c3\u1142\n\u00c3\f\u00c3\16\u00c3\u1145\13\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u114b\n\u00c3\3\u00c3\7\u00c3"+
		"\u114e\n\u00c3\f\u00c3\16\u00c3\u1151\13\u00c3\5\u00c3\u1153\n\u00c3\5"+
		"\u00c3\u1155\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u115b\n\u00c3"+
		"\f\u00c3\16\u00c3\u115e\13\u00c3\5\u00c3\u1160\n\u00c3\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u116a\n\u00c4"+
		"\f\u00c4\16\u00c4\u116d\13\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1172"+
		"\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u1179\n\u00c5"+
		"\f\u00c5\16\u00c5\u117c\13\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6"+
		"\u1182\n\u00c6\f\u00c6\16\u00c6\u1185\13\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u1189\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u1190\n"+
		"\u00c6\f\u00c6\16\u00c6\u1193\13\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u1198\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\7\u00c6\u11a1\n\u00c6\f\u00c6\16\u00c6\u11a4\13\u00c6\5\u00c6\u11a6\n"+
		"\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\7\u00c7\u11b0\n\u00c7\f\u00c7\16\u00c7\u11b3\13\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\5\u00c8\u11b9\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u11be\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u11cd\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\5\u00ca\u11d8\n\u00ca\3\u00ca\5\u00ca\u11db\n\u00ca\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11e5\n\u00cb\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u11ef\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u11f9\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1203\n\u00cf\3\u00d0\3\u00d0\5\u00d0"+
		"\u1207\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u120b\n\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1214\n\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u122f\n\u00d0"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u123e\n\u00d1\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d3\3\u00d3\5\u00d3\u1246\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u124f\n\u00d4\f\u00d4"+
		"\16\u00d4\u1252\13\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1258"+
		"\n\u00d5\3\u00d6\3\u00d6\5\u00d6\u125c\n\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d7\3\u00d7\5\u00d7\u1263\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u1268\n\u00d7\3\u00d7\5\u00d7\u126b\n\u00d7\3\u00d7\5\u00d7\u126e\n\u00d7"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1277"+
		"\n\u00d8\3\u00d9\3\u00d9\5\u00d9\u127b\n\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u1297\n\u00dc\f\u00dc"+
		"\16\u00dc\u129a\13\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u12a0"+
		"\n\u00dc\3\u00dc\3\u00dc\5\u00dc\u12a4\n\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\5\u00dc\u12ab\n\u00dc\3\u00dc\5\u00dc\u12ae\n\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\5\u00dc\u12b3\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12bd\n\u00dd\3\u00dd\3"+
		"\u00dd\5\u00dd\u12c1\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12c7"+
		"\n\u00dd\3\u00dd\5\u00dd\u12ca\n\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u12cf\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u12d3\n\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\5\u00dd\u12da\n\u00dd\3\u00dd\5\u00dd\u12dd\n\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12e3\n\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u12fb\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1308"+
		"\n\u00dd\3\u00dd\5\u00dd\u130b\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1315\n\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u131d\n\u00dd\3\u00dd\3\u00dd"+
		"\5\u00dd\u1321\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u1328\n\u00dd\3\u00dd\5\u00dd\u132b\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\7\u00dd\u1332\n\u00dd\f\u00dd\16\u00dd\u1335\13\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\5\u00dd\u133a\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\5\u00dd\u1340\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\5\u00dd\u134a\n\u00dd\5\u00dd\u134c\n\u00dd\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u1352\n\u00de\3\u00de\5\u00de\u1355\n"+
		"\u00de\3\u00de\5\u00de\u1358\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1364\n\u00df\3"+
		"\u00df\5\u00df\u1367\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u136d"+
		"\n\u00e0\3\u00e1\5\u00e1\u1370\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u1378\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u1380\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u1386\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u138a\n\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\5\u00e3\u1398\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u13a2\n\u00e5\f\u00e5\16\u00e5"+
		"\u13a5\13\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u13ab\n\u00e5"+
		"\3\u00e5\5\u00e5\u13ae\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6"+
		"\5\u00e6\u13b5\n\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u13ba\n\u00e6\f"+
		"\u00e6\16\u00e6\u13bd\13\u00e6\3\u00e7\3\u00e7\5\u00e7\u13c1\n\u00e7\3"+
		"\u00e7\6\u00e7\u13c4\n\u00e7\r\u00e7\16\u00e7\u13c5\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u13cf\n\u00e8\f\u00e8\16"+
		"\u00e8\u13d2\13\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00eb\3\u00eb\5\u00eb\u13dc\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u13e2\n\u00eb\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u13e7\n\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\5\u00ec\u13f4\n\u00ec\5\u00ec\u13f6\n\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\5\u00ec\u13fb\n\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1400"+
		"\n\u00ec\5\u00ec\u1402\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\5\u00ed\u1409\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee"+
		"\u1410\n\u00ee\3\u00ee\5\u00ee\u1413\n\u00ee\3\u00ee\5\u00ee\u1416\n\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u141c\n\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u1420\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1426\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u142c\n\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u143b\n\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\5\u00f3\u1440\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\5\u00f4\u144a\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f6"+
		"\3\u00f6\3\u00f6\5\u00f6\u1452\n\u00f6\5\u00f6\u1454\n\u00f6\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u145c\n\u00f7\3\u00f7\5"+
		"\u00f7\u145f\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u146e\n"+
		"\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1475\n\u00fb\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\6\u00fd"+
		"\u1488\n\u00fd\r\u00fd\16\u00fd\u1489\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\5\u00fe\u1491\n\u00fe\5\u00fe\u1493\n\u00fe\3\u00ff\3\u00ff\3"+
		"\u00ff\6\u00ff\u1498\n\u00ff\r\u00ff\16\u00ff\u1499\5\u00ff\u149c\n\u00ff"+
		"\3\u0100\3\u0100\5\u0100\u14a0\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\5\u0101\u14a8\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u14b4\n\u0102"+
		"\3\u0103\3\u0103\3\u0103\5\u0103\u14b9\n\u0103\3\u0104\3\u0104\3\u0104"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u14c2\n\u0105\3\u0106\5\u0106"+
		"\u14c5\n\u0106\3\u0106\3\u0106\5\u0106\u14c9\n\u0106\3\u0106\6\u0106\u14cc"+
		"\n\u0106\r\u0106\16\u0106\u14cd\3\u0106\5\u0106\u14d1\n\u0106\3\u0106"+
		"\3\u0106\5\u0106\u14d5\n\u0106\3\u0106\3\u0106\5\u0106\u14d9\n\u0106\5"+
		"\u0106\u14db\n\u0106\3\u0107\3\u0107\3\u0108\5\u0108\u14e0\n\u0108\3\u0108"+
		"\3\u0108\3\u0109\5\u0109\u14e5\n\u0109\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u14f0\n\u010a\3\u010a"+
		"\5\u010a\u14f3\n\u010a\3\u010b\3\u010b\5\u010b\u14f7\n\u010b\3\u010b\5"+
		"\u010b\u14fa\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u14ff\n\u010b\3\u010b"+
		"\3\u010b\5\u010b\u1503\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1508\n"+
		"\u010b\3\u010b\5\u010b\u150b\n\u010b\3\u010b\5\u010b\u150e\n\u010b\3\u010b"+
		"\3\u010b\5\u010b\u1512\n\u010b\3\u010b\5\u010b\u1515\n\u010b\3\u010b\5"+
		"\u010b\u1518\n\u010b\3\u010b\3\u010b\5\u010b\u151c\n\u010b\3\u010b\5\u010b"+
		"\u151f\n\u010b\3\u010b\5\u010b\u1522\n\u010b\3\u010b\3\u010b\3\u010b\5"+
		"\u010b\u1527\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\7\u010b\u152e"+
		"\n\u010b\f\u010b\16\u010b\u1531\13\u010b\3\u010b\3\u010b\5\u010b\u1535"+
		"\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u153a\n\u010b\3\u010b\3\u010b"+
		"\5\u010b\u153e\n\u010b\3\u010b\5\u010b\u1541\n\u010b\3\u010c\3\u010c\5"+
		"\u010c\u1545\n\u010c\3\u010c\3\u010c\5\u010c\u1549\n\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u154e\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1553\n"+
		"\u010c\3\u010c\3\u010c\5\u010c\u1557\n\u010c\5\u010c\u1559\n\u010c\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1569\n\u010f\3\u010f\3\u010f"+
		"\3\u0110\3\u0110\3\u0110\7\u0110\u1570\n\u0110\f\u0110\16\u0110\u1573"+
		"\13\u0110\3\u0111\3\u0111\3\u0111\7\u0111\u1578\n\u0111\f\u0111\16\u0111"+
		"\u157b\13\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\7\u0112\u1584\n\u0112\f\u0112\16\u0112\u1587\13\u0112\3\u0112\3\u0112"+
		"\3\u0113\3\u0113\3\u0113\7\u0113\u158e\n\u0113\f\u0113\16\u0113\u1591"+
		"\13\u0113\3\u0114\3\u0114\3\u0114\7\u0114\u1596\n\u0114\f\u0114\16\u0114"+
		"\u1599\13\u0114\3\u0115\3\u0115\3\u0115\7\u0115\u159e\n\u0115\f\u0115"+
		"\16\u0115\u15a1\13\u0115\3\u0116\3\u0116\3\u0116\7\u0116\u15a6\n\u0116"+
		"\f\u0116\16\u0116\u15a9\13\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u15ae"+
		"\n\u0117\f\u0117\16\u0117\u15b1\13\u0117\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\5\u0118\u15b9\n\u0118\5\u0118\u15bb\n\u0118\3\u0119\3"+
		"\u0119\5\u0119\u15bf\n\u0119\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3"+
		"\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u15cd\n"+
		"\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u15d4\n\u011c\3"+
		"\u011c\3\u011c\3\u011c\5\u011c\u15d9\n\u011c\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\6\u011d\u15f9\n\u011d\r\u011d\16\u011d\u15fa\3\u011d\3\u011d\5\u011d"+
		"\u15ff\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\6\u011d\u1605\n\u011d\r"+
		"\u011d\16\u011d\u1606\3\u011d\3\u011d\5\u011d\u160b\n\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1614\n\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u161c\n\u011d\3"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1621\n\u011d\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1629\n\u011d\3\u011d\3\u011d\3\u011d\5"+
		"\u011d\u162e\n\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1633\n\u011d\5\u011d"+
		"\u1635\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u163e\n\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1643\n\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u164b\n\u011d\3"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1650\n\u011d\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1658\n\u011d\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1660\n\u011d\3\u011d\5\u011d\u1663\n\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d"+
		"\u166d\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u1678\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1683\n\u011f\f\u011f"+
		"\16\u011f\u1686\13\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u168d\n\u011f\3\u0120\3\u0120\5\u0120\u1691\n\u0120\3\u0121\3\u0121\3"+
		"\u0121\5\u0121\u1696\n\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3"+
		"\u0121\3\u0121\5\u0121\u169f\n\u0121\3\u0121\5\u0121\u16a2\n\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\5\u0121\u16ae\n\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\5\u0121\u16b6\n\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\7\u0121\u16be\n\u0121\f\u0121\16\u0121\u16c1\13\u0121\5\u0121\u16c3\n"+
		"\u0121\3\u0121\3\u0121\5\u0121\u16c7\n\u0121\3\u0121\3\u0121\5\u0121\u16cb"+
		"\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u16e4\n\u0122"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u16ef\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124"+
		"\u16f6\n\u0124\7\u0124\u16f8\n\u0124\f\u0124\16\u0124\u16fb\13\u0124\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1701\n\u0125\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1709\n\u0126\3\u0126\3\u0126\3"+
		"\u0126\5\u0126\u170e\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\7\u0126\u1714"+
		"\n\u0126\f\u0126\16\u0126\u1717\13\u0126\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u171c\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u1726\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u1733\n\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u1739\n\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\5\u0127\u173f\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u174f\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u1755\n\u0127\7\u0127\u1757\n\u0127\f\u0127\16\u0127\u175a\13\u0127\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u176a\n\u0128\f\u0128"+
		"\16\u0128\u176d\13\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\6\u0128\u1776\n\u0128\r\u0128\16\u0128\u1777\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1789\n\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\7\u0128\u1796\n\u0128\f\u0128\16\u0128\u1799\13\u0128\3\u0129\3\u0129"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u17ab\n\u012a\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u17b4\n\u012b"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17bd"+
		"\n\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u0130"+
		"\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134"+
		"\3\u0134\2\5\u024a\u024c\u024e\u0135\2\4\6\b\n\f\16\20\22\24\26\30\32"+
		"\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\2s\4\2##\u0082\u0082\4\2\u01a1\u01a1\u01a6\u01a6\5"+
		"\2==\u0088\u0088\u009c\u009c\5\2&&\u0122\u0122\u0160\u0160\6\2&&\u0141"+
		"\u0141\u01a0\u01a0\u01e4\u01e4\4\2\u0198\u0198\u03c2\u03c2\4\2CC{{\4\2"+
		"\16\16\u00f8\u00f8\5\2((II\u009f\u009f\4\2\u014e\u014e\u01b8\u01b8\5\2"+
		"\u0191\u0191\u0207\u0207\u020d\u020d\4\2\u0128\u0128\u0164\u0164\4\2\u010a"+
		"\u010a\u0172\u0172\4\2\u0108\u0108\u0157\u0157\5\2DDHHll\5\2&&\u0132\u0132"+
		"\u014c\u014c\5\2&&\u012e\u012e\u0266\u0266\4\2EEOO\5\2\u0150\u0150\u01af"+
		"\u01af\u01e6\u01e6\4\2==\u0088\u0088\3\2\u03b8\u03b9\5\2\u014b\u014b\u016d"+
		"\u016d\u019e\u019e\4\2&&\u03b8\u03b9\b\2&&\u0118\u0118\u011a\u011a\u0132"+
		"\u0132\u014c\u014c\u01c5\u01c5\3\2\u03b9\u03ba\4\2\7\7..\4\2\f\f\u0096"+
		"\u0096\4\2\u00a7\u00a7\u021d\u021d\4\2\23\23}}\5\2\'\'AA\\\\\4\2\\\\\u011c"+
		"\u011c\4\2\u0114\u0114\u0148\u0148\4\2XX\u01dc\u01dc\4\2\'\'\\\\\4\2\b"+
		"\b,,\4\2\u00a3\u00a3\u0218\u0218\6\2\u014b\u014b\u016d\u016d\u019d\u019d"+
		"\u01bb\u01bb\4\2\u014b\u014b\u019d\u019d\4\2\r\r))\5\2::CC\u00a1\u00a1"+
		"\4\2  GG\4\2TT\u0080\u0080\4\2\b\b,-\3\2\u01f3\u01f4\4\2\u0153\u0153\u01e2"+
		"\u01e2\4\2\u00bd\u00bd\u0175\u0175\7\2]]\u017a\u017b\u017d\u017d\u0181"+
		"\u0189\u01c7\u01c7\6\2\u0177\u0178\u017c\u017c\u017e\u017f\u01c8\u01c8"+
		"\5\2^^\u0176\u0176\u0180\u0180\4\2\u0166\u0166\u01f5\u01f5\4\2\u01ef\u01ef"+
		"\u01f1\u01f1\4\2\u0102\u0102\u01f6\u01f6\4\2NN\u01d6\u01d6\4\2..\u0126"+
		"\u0126\5\2\35\35\65\65\u009a\u009a\5\2qq\u0093\u0093\u0151\u0151\4\2Z"+
		"Z\u009d\u009d\4\2\u0110\u0110\u01e7\u01e7\4\2$$\u021a\u021a\4\2dd\u0172"+
		"\u0172\4\2\u0144\u0144\u01c1\u01c1\6\2\u00af\u00af\u00b1\u00b1\u00b4\u00b4"+
		"\u01fe\u01fe\4\2\u0103\u0103\u01c9\u01c9\4\2<<DD\b\2qq\u0093\u0093\u0098"+
		"\u0098\u013d\u013d\u0151\u0151\u021a\u021a\4\2\u0197\u0197\u01fb\u01fb"+
		"\4\2\u013a\u013a\u021c\u021c\4\2qq\u0151\u0151\5\2EEPP\u015e\u015e\4\2"+
		"\u01fb\u01fb\u0219\u0219\4\2\u011d\u011d\u01c0\u01c0\b\2\u00bd\u00bd\u0137"+
		"\u0137\u0139\u0139\u0152\u0152\u01c6\u01c6\u01e8\u01e8\4\2)*\66\66\5\2"+
		"\u0144\u0144\u01b1\u01b1\u02be\u02be\4\2\u016a\u016a\u0209\u0209\4\2\u03ca"+
		"\u03ca\u03cc\u03cc\3\2\u03cd\u03ce\3\2\u0261\u026b\4\2\u03b8\u03ba\u03c3"+
		"\u03c3\4\2\67\67\u0099\u0099\4\2ee\u03c6\u03c6\4\2\u00bb\u00bc\u00c3\u00c6"+
		"\3\2\u00ab\u00b0\3\2\u00b1\u00b3\3\2\u00b4\u00b5\5\2\u00b6\u00b6\u00bf"+
		"\u00c2\u0106\u0107\5\2\u00b7\u00ba\u00bd\u00be\u0104\u0104\4\2\u0085\u0085"+
		"\u00c7\u00c7\3\2\u0270\u0276\4\2\u00bd\u00bd\u019b\u019b\4\2\u00b6\u00b7"+
		"\u00b9\u00b9\4\2\u009e\u009e\u01e5\u01e5\4\2!!\u00e3\u00e6\3\2\u00ef\u00f0"+
		"\5\2\20\20RR\u0097\u0097\4\2\u00bb\u00bb\u00bd\u00bd\5\2\r\r))\u032a\u032a"+
		"\5\2\u00d3\u00d3\u00d9\u00da\u00df\u00df\5\2\u00d4\u00d6\u00db\u00de\u00e0"+
		"\u00e2\4\2\u01a4\u01a4\u01b2\u01b2\4\2cc\u03ad\u03ad\5\2\67\67\u0099\u0099"+
		"\u0211\u0211\4\2ww\u0081\u0081\5\2\b\b\u00fb\u00fb\u01eb\u01eb\6\2cc\u03a5"+
		"\u03a5\u03a7\u03a7\u03ad\u03ae\3\2\u03a2\u03a9\3\2\u0239\u0260\3\2\u026c"+
		"\u026f\3\2\u0230\u0238\3\2\u0228\u022f\5\2\u00b6\u00ba\u00c4\u00c4\u00c7"+
		"\u00c7!\2\u00f6\u0108\u010a\u010b\u010d\u0110\u0112\u0129\u012b\u0134"+
		"\u0136\u0142\u0145\u0145\u0147\u014c\u014e\u014e\u0150\u0151\u0153\u0155"+
		"\u0157\u0157\u0159\u0159\u015b\u0161\u0163\u0169\u016b\u018f\u0191\u0194"+
		"\u0196\u019c\u019e\u01a7\u01a9\u01b3\u01b5\u01c5\u01c7\u01d4\u01d6\u01e7"+
		"\u01e9\u01eb\u01ed\u0208\u020a\u020a\u020c\u020f\u0211\u0211\u0213\u0214"+
		"\u0217\u0222\u0266\u0266\n\2TT\u0080\u0080\u00b6\u00b8\u00ba\u00ba\u00d7"+
		"\u00d7\u00ee\u00ee\u0228\u022f\u0270\u0398\u1bbf\2\u0269\3\2\2\2\4\u027a"+
		"\3\2\2\2\6\u028f\3\2\2\2\b\u0291\3\2\2\2\n\u02b6\3\2\2\2\f\u02c2\3\2\2"+
		"\2\16\u02cd\3\2\2\2\20\u02de\3\2\2\2\22\u02e3\3\2\2\2\24\u02ef\3\2\2\2"+
		"\26\u030a\3\2\2\2\30\u0310\3\2\2\2\32\u0312\3\2\2\2\34\u031e\3\2\2\2\36"+
		"\u033c\3\2\2\2 \u035d\3\2\2\2\"\u0390\3\2\2\2$\u03aa\3\2\2\2&\u03c6\3"+
		"\2\2\2(\u0443\3\2\2\2*\u0445\3\2\2\2,\u0457\3\2\2\2.\u0494\3\2\2\2\60"+
		"\u04a7\3\2\2\2\62\u04dc\3\2\2\2\64\u04de\3\2\2\2\66\u050a\3\2\2\28\u0510"+
		"\3\2\2\2:\u0512\3\2\2\2<\u0527\3\2\2\2>\u052e\3\2\2\2@\u0530\3\2\2\2B"+
		"\u053e\3\2\2\2D\u0540\3\2\2\2F\u0544\3\2\2\2H\u055e\3\2\2\2J\u056e\3\2"+
		"\2\2L\u0570\3\2\2\2N\u0589\3\2\2\2P\u058b\3\2\2\2R\u05ac\3\2\2\2T\u05ee"+
		"\3\2\2\2V\u05f0\3\2\2\2X\u060a\3\2\2\2Z\u0612\3\2\2\2\\\u0632\3\2\2\2"+
		"^\u06e3\3\2\2\2`\u06e5\3\2\2\2b\u06e8\3\2\2\2d\u0732\3\2\2\2f\u0749\3"+
		"\2\2\2h\u07b8\3\2\2\2j\u07bd\3\2\2\2l\u07bf\3\2\2\2n\u07c9\3\2\2\2p\u07fe"+
		"\3\2\2\2r\u0812\3\2\2\2t\u0814\3\2\2\2v\u0837\3\2\2\2x\u0840\3\2\2\2z"+
		"\u0847\3\2\2\2|\u085e\3\2\2\2~\u0867\3\2\2\2\u0080\u0876\3\2\2\2\u0082"+
		"\u088a\3\2\2\2\u0084\u089e\3\2\2\2\u0086\u09f0\3\2\2\2\u0088\u09f2\3\2"+
		"\2\2\u008a\u09f9\3\2\2\2\u008c\u0a00\3\2\2\2\u008e\u0a16\3\2\2\2\u0090"+
		"\u0a1e\3\2\2\2\u0092\u0a25\3\2\2\2\u0094\u0a2c\3\2\2\2\u0096\u0a33\3\2"+
		"\2\2\u0098\u0a3f\3\2\2\2\u009a\u0a49\3\2\2\2\u009c\u0a50\3\2\2\2\u009e"+
		"\u0a60\3\2\2\2\u00a0\u0a6a\3\2\2\2\u00a2\u0a6e\3\2\2\2\u00a4\u0a74\3\2"+
		"\2\2\u00a6\u0a80\3\2\2\2\u00a8\u0a82\3\2\2\2\u00aa\u0a89\3\2\2\2\u00ac"+
		"\u0a8b\3\2\2\2\u00ae\u0abd\3\2\2\2\u00b0\u0b07\3\2\2\2\u00b2\u0b42\3\2"+
		"\2\2\u00b4\u0b9a\3\2\2\2\u00b6\u0b9e\3\2\2\2\u00b8\u0baf\3\2\2\2\u00ba"+
		"\u0bb1\3\2\2\2\u00bc\u0bb9\3\2\2\2\u00be\u0bc1\3\2\2\2\u00c0\u0bc3\3\2"+
		"\2\2\u00c2\u0be1\3\2\2\2\u00c4\u0c18\3\2\2\2\u00c6\u0c21\3\2\2\2\u00c8"+
		"\u0c35\3\2\2\2\u00ca\u0c41\3\2\2\2\u00cc\u0c45\3\2\2\2\u00ce\u0c66\3\2"+
		"\2\2\u00d0\u0c7b\3\2\2\2\u00d2\u0c85\3\2\2\2\u00d4\u0c89\3\2\2\2\u00d6"+
		"\u0ca2\3\2\2\2\u00d8\u0ccc\3\2\2\2\u00da\u0cce\3\2\2\2\u00dc\u0cdd\3\2"+
		"\2\2\u00de\u0d0b\3\2\2\2\u00e0\u0d15\3\2\2\2\u00e2\u0d1f\3\2\2\2\u00e4"+
		"\u0d49\3\2\2\2\u00e6\u0d4b\3\2\2\2\u00e8\u0d5c\3\2\2\2\u00ea\u0d62\3\2"+
		"\2\2\u00ec\u0d72\3\2\2\2\u00ee\u0d76\3\2\2\2\u00f0\u0d9c\3\2\2\2\u00f2"+
		"\u0dc2\3\2\2\2\u00f4\u0dd0\3\2\2\2\u00f6\u0dd8\3\2\2\2\u00f8\u0dda\3\2"+
		"\2\2\u00fa\u0df4\3\2\2\2\u00fc\u0df8\3\2\2\2\u00fe\u0e05\3\2\2\2\u0100"+
		"\u0e11\3\2\2\2\u0102\u0e15\3\2\2\2\u0104\u0e26\3\2\2\2\u0106\u0e37\3\2"+
		"\2\2\u0108\u0e3a\3\2\2\2\u010a\u0e44\3\2\2\2\u010c\u0e48\3\2\2\2\u010e"+
		"\u0e52\3\2\2\2\u0110\u0e55\3\2\2\2\u0112\u0e5a\3\2\2\2\u0114\u0e6e\3\2"+
		"\2\2\u0116\u0e70\3\2\2\2\u0118\u0e81\3\2\2\2\u011a\u0e8a\3\2\2\2\u011c"+
		"\u0e93\3\2\2\2\u011e\u0e95\3\2\2\2\u0120\u0ea3\3\2\2\2\u0122\u0eae\3\2"+
		"\2\2\u0124\u0eb7\3\2\2\2\u0126\u0eba\3\2\2\2\u0128\u0ec2\3\2\2\2\u012a"+
		"\u0edb\3\2\2\2\u012c\u0ee7\3\2\2\2\u012e\u0eea\3\2\2\2\u0130\u0f0a\3\2"+
		"\2\2\u0132\u0f0c\3\2\2\2\u0134\u0f0e\3\2\2\2\u0136\u0f10\3\2\2\2\u0138"+
		"\u0f12\3\2\2\2\u013a\u0f47\3\2\2\2\u013c\u0f49\3\2\2\2\u013e\u0f4f\3\2"+
		"\2\2\u0140\u0f63\3\2\2\2\u0142\u0f71\3\2\2\2\u0144\u0f7c\3\2\2\2\u0146"+
		"\u0f7e\3\2\2\2\u0148\u0f84\3\2\2\2\u014a\u0f8e\3\2\2\2\u014c\u0f92\3\2"+
		"\2\2\u014e\u0f99\3\2\2\2\u0150\u0f9d\3\2\2\2\u0152\u0fa3\3\2\2\2\u0154"+
		"\u0faa\3\2\2\2\u0156\u0fb0\3\2\2\2\u0158\u0fb6\3\2\2\2\u015a\u0fbb\3\2"+
		"\2\2\u015c\u0fe9\3\2\2\2\u015e\u0ffe\3\2\2\2\u0160\u1017\3\2\2\2\u0162"+
		"\u101a\3\2\2\2\u0164\u1020\3\2\2\2\u0166\u1030\3\2\2\2\u0168\u103f\3\2"+
		"\2\2\u016a\u1045\3\2\2\2\u016c\u1063\3\2\2\2\u016e\u1065\3\2\2\2\u0170"+
		"\u106c\3\2\2\2\u0172\u1078\3\2\2\2\u0174\u107e\3\2\2\2\u0176\u1097\3\2"+
		"\2\2\u0178\u109b\3\2\2\2\u017a\u109f\3\2\2\2\u017c\u10aa\3\2\2\2\u017e"+
		"\u10e8\3\2\2\2\u0180\u1120\3\2\2\2\u0182\u1122\3\2\2\2\u0184\u112f\3\2"+
		"\2\2\u0186\u1161\3\2\2\2\u0188\u1173\3\2\2\2\u018a\u11a5\3\2\2\2\u018c"+
		"\u11a7\3\2\2\2\u018e\u11b4\3\2\2\2\u0190\u11bf\3\2\2\2\u0192\u11da\3\2"+
		"\2\2\u0194\u11e4\3\2\2\2\u0196\u11ee\3\2\2\2\u0198\u11f0\3\2\2\2\u019a"+
		"\u11fa\3\2\2\2\u019c\u11fd\3\2\2\2\u019e\u122e\3\2\2\2\u01a0\u123d\3\2"+
		"\2\2\u01a2\u123f\3\2\2\2\u01a4\u1243\3\2\2\2\u01a6\u124a\3\2\2\2\u01a8"+
		"\u1253\3\2\2\2\u01aa\u1259\3\2\2\2\u01ac\u1260\3\2\2\2\u01ae\u1276\3\2"+
		"\2\2\u01b0\u1278\3\2\2\2\u01b2\u1283\3\2\2\2\u01b4\u1289\3\2\2\2\u01b6"+
		"\u12b2\3\2\2\2\u01b8\u134b\3\2\2\2\u01ba\u1357\3\2\2\2\u01bc\u1366\3\2"+
		"\2\2\u01be\u136c\3\2\2\2\u01c0\u137f\3\2\2\2\u01c2\u1389\3\2\2\2\u01c4"+
		"\u1397\3\2\2\2\u01c6\u1399\3\2\2\2\u01c8\u139c\3\2\2\2\u01ca\u13b2\3\2"+
		"\2\2\u01cc\u13be\3\2\2\2\u01ce\u13c7\3\2\2\2\u01d0\u13d3\3\2\2\2\u01d2"+
		"\u13d7\3\2\2\2\u01d4\u13d9\3\2\2\2\u01d6\u1401\3\2\2\2\u01d8\u1408\3\2"+
		"\2\2\u01da\u140a\3\2\2\2\u01dc\u1421\3\2\2\2\u01de\u1427\3\2\2\2\u01e0"+
		"\u142f\3\2\2\2\u01e2\u1432\3\2\2\2\u01e4\u143f\3\2\2\2\u01e6\u1441\3\2"+
		"\2\2\u01e8\u144b\3\2\2\2\u01ea\u144e\3\2\2\2\u01ec\u1455\3\2\2\2\u01ee"+
		"\u1460\3\2\2\2\u01f0\u1462\3\2\2\2\u01f2\u146d\3\2\2\2\u01f4\u1474\3\2"+
		"\2\2\u01f6\u1476\3\2\2\2\u01f8\u1479\3\2\2\2\u01fa\u148b\3\2\2\2\u01fc"+
		"\u149b\3\2\2\2\u01fe\u149f\3\2\2\2\u0200\u14a7\3\2\2\2\u0202\u14b3\3\2"+
		"\2\2\u0204\u14b8\3\2\2\2\u0206\u14ba\3\2\2\2\u0208\u14c1\3\2\2\2\u020a"+
		"\u14da\3\2\2\2\u020c\u14dc\3\2\2\2\u020e\u14df\3\2\2\2\u0210\u14e4\3\2"+
		"\2\2\u0212\u14f2\3\2\2\2\u0214\u1540\3\2\2\2\u0216\u1558\3\2\2\2\u0218"+
		"\u155a\3\2\2\2\u021a\u155e\3\2\2\2\u021c\u1564\3\2\2\2\u021e\u156c\3\2"+
		"\2\2\u0220\u1574\3\2\2\2\u0222\u157c\3\2\2\2\u0224\u158a\3\2\2\2\u0226"+
		"\u1592\3\2\2\2\u0228\u159a\3\2\2\2\u022a\u15a2\3\2\2\2\u022c\u15aa\3\2"+
		"\2\2\u022e\u15ba\3\2\2\2\u0230\u15be\3\2\2\2\u0232\u15c0\3\2\2\2\u0234"+
		"\u15c3\3\2\2\2\u0236\u15d8\3\2\2\2\u0238\u1677\3\2\2\2\u023a\u1679\3\2"+
		"\2\2\u023c\u168c\3\2\2\2\u023e\u168e\3\2\2\2\u0240\u16ca\3\2\2\2\u0242"+
		"\u16e3\3\2\2\2\u0244\u16e5\3\2\2\2\u0246\u16ee\3\2\2\2\u0248\u1700\3\2"+
		"\2\2\u024a\u170d\3\2\2\2\u024c\u1718\3\2\2\2\u024e\u1788\3\2\2\2\u0250"+
		"\u179a\3\2\2\2\u0252\u17aa\3\2\2\2\u0254\u17b3\3\2\2\2\u0256\u17bc\3\2"+
		"\2\2\u0258\u17be\3\2\2\2\u025a\u17c0\3\2\2\2\u025c\u17c3\3\2\2\2\u025e"+
		"\u17c5\3\2\2\2\u0260\u17c7\3\2\2\2\u0262\u17c9\3\2\2\2\u0264\u17cb\3\2"+
		"\2\2\u0266\u17cd\3\2\2\2\u0268\u026a\5\4\3\2\u0269\u0268\3\2\2\2\u0269"+
		"\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b\u026d\7\u03a6\2\2\u026c\u026b"+
		"\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f\7\2\2\3\u026f"+
		"\3\3\2\2\2\u0270\u0271\5\6\4\2\u0271\u0273\b\3\1\2\u0272\u0274\7\u03a6"+
		"\2\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0275\3\2\2\2\u0275"+
		"\u0276\7\u03b6\2\2\u0276\u0279\3\2\2\2\u0277\u0279\5\b\5\2\u0278\u0270"+
		"\3\2\2\2\u0278\u0277\3\2\2\2\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a"+
		"\u027b\3\2\2\2\u027b\u0286\3\2\2\2\u027c\u027a\3\2\2\2\u027d\u027e\5\6"+
		"\4\2\u027e\u0283\b\3\1\2\u027f\u0281\7\u03a6\2\2\u0280\u027f\3\2\2\2\u0280"+
		"\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0284\7\u03b6\2\2\u0283\u0280"+
		"\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0287\5\b\5\2\u0286"+
		"\u027d\3\2\2\2\u0286\u0285\3\2\2\2\u0287\5\3\2\2\2\u0288\u0290\5\n\6\2"+
		"\u0289\u0290\5\f\7\2\u028a\u0290\5\16\b\2\u028b\u0290\5\20\t\2\u028c\u0290"+
		"\5\22\n\2\u028d\u0290\5\26\f\2\u028e\u0290\5\30\r\2\u028f\u0288\3\2\2"+
		"\2\u028f\u0289\3\2\2\2\u028f\u028a\3\2\2\2\u028f\u028b\3\2\2\2\u028f\u028c"+
		"\3\2\2\2\u028f\u028d\3\2\2\2\u028f\u028e\3\2\2\2\u0290\7\3\2\2\2\u0291"+
		"\u0292\7\u03b6\2\2\u0292\t\3\2\2\2\u0293\u02b7\5\32\16\2\u0294\u02b7\5"+
		"\34\17\2\u0295\u02b7\5\36\20\2\u0296\u02b7\5 \21\2\u0297\u02b7\5\"\22"+
		"\2\u0298\u02b7\5$\23\2\u0299\u02b7\5&\24\2\u029a\u02b7\5(\25\2\u029b\u02b7"+
		"\5*\26\2\u029c\u02b7\5,\27\2\u029d\u02b7\5.\30\2\u029e\u02b7\5\60\31\2"+
		"\u029f\u02b7\5r:\2\u02a0\u02b7\5t;\2\u02a1\u02b7\5v<\2\u02a2\u02b7\5x"+
		"=\2\u02a3\u02b7\5z>\2\u02a4\u02b7\5|?\2\u02a5\u02b7\5~@\2\u02a6\u02b7"+
		"\5\u0080A\2\u02a7\u02b7\5\u0082B\2\u02a8\u02b7\5\u0084C\2\u02a9\u02b7"+
		"\5\u0088E\2\u02aa\u02b7\5\u008aF\2\u02ab\u02b7\5\u008cG\2\u02ac\u02b7"+
		"\5\u008eH\2\u02ad\u02b7\5\u0090I\2\u02ae\u02b7\5\u0092J\2\u02af\u02b7"+
		"\5\u0094K\2\u02b0\u02b7\5\u0096L\2\u02b1\u02b7\5\u0098M\2\u02b2\u02b7"+
		"\5\u009aN\2\u02b3\u02b7\5\u009cO\2\u02b4\u02b7\5\u009eP\2\u02b5\u02b7"+
		"\5\u00a2R\2\u02b6\u0293\3\2\2\2\u02b6\u0294\3\2\2\2\u02b6\u0295\3\2\2"+
		"\2\u02b6\u0296\3\2\2\2\u02b6\u0297\3\2\2\2\u02b6\u0298\3\2\2\2\u02b6\u0299"+
		"\3\2\2\2\u02b6\u029a\3\2\2\2\u02b6\u029b\3\2\2\2\u02b6\u029c\3\2\2\2\u02b6"+
		"\u029d\3\2\2\2\u02b6\u029e\3\2\2\2\u02b6\u029f\3\2\2\2\u02b6\u02a0\3\2"+
		"\2\2\u02b6\u02a1\3\2\2\2\u02b6\u02a2\3\2\2\2\u02b6\u02a3\3\2\2\2\u02b6"+
		"\u02a4\3\2\2\2\u02b6\u02a5\3\2\2\2\u02b6\u02a6\3\2\2\2\u02b6\u02a7\3\2"+
		"\2\2\u02b6\u02a8\3\2\2\2\u02b6\u02a9\3\2\2\2\u02b6\u02aa\3\2\2\2\u02b6"+
		"\u02ab\3\2\2\2\u02b6\u02ac\3\2\2\2\u02b6\u02ad\3\2\2\2\u02b6\u02ae\3\2"+
		"\2\2\u02b6\u02af\3\2\2\2\u02b6\u02b0\3\2\2\2\u02b6\u02b1\3\2\2\2\u02b6"+
		"\u02b2\3\2\2\2\u02b6\u02b3\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b5\3\2"+
		"\2\2\u02b7\13\3\2\2\2\u02b8\u02c3\5\u00b4[\2\u02b9\u02c3\5\u00acW\2\u02ba"+
		"\u02c3\5\u00b6\\\2\u02bb\u02c3\5\u00a6T\2\u02bc\u02c3\5\u00b2Z\2\u02bd"+
		"\u02c3\5\u00a4S\2\u02be\u02c3\5\u00aeX\2\u02bf\u02c3\5\u00b0Y\2\u02c0"+
		"\u02c3\5\u00a8U\2\u02c1\u02c3\5\u00aaV\2\u02c2\u02b8\3\2\2\2\u02c2\u02b9"+
		"\3\2\2\2\u02c2\u02ba\3\2\2\2\u02c2\u02bb\3\2\2\2\u02c2\u02bc\3\2\2\2\u02c2"+
		"\u02bd\3\2\2\2\u02c2\u02be\3\2\2\2\u02c2\u02bf\3\2\2\2\u02c2\u02c0\3\2"+
		"\2\2\u02c2\u02c1\3\2\2\2\u02c3\r\3\2\2\2\u02c4\u02ce\5\u00fe\u0080\2\u02c5"+
		"\u02ce\5\u0100\u0081\2\u02c6\u02ce\5\u0102\u0082\2\u02c7\u02ce\5\u0104"+
		"\u0083\2\u02c8\u02ce\5\u0106\u0084\2\u02c9\u02ce\5\u0108\u0085\2\u02ca"+
		"\u02ce\5\u010a\u0086\2\u02cb\u02ce\5\u010c\u0087\2\u02cc\u02ce\5\u010e"+
		"\u0088\2\u02cd\u02c4\3\2\2\2\u02cd\u02c5\3\2\2\2\u02cd\u02c6\3\2\2\2\u02cd"+
		"\u02c7\3\2\2\2\u02cd\u02c8\3\2\2\2\u02cd\u02c9\3\2\2\2\u02cd\u02ca\3\2"+
		"\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce\17\3\2\2\2\u02cf\u02df"+
		"\5\u011e\u0090\2\u02d0\u02df\5\u0120\u0091\2\u02d1\u02df\5\u0122\u0092"+
		"\2\u02d2\u02df\5\u0124\u0093\2\u02d3\u02df\5\u0126\u0094\2\u02d4\u02df"+
		"\5\u0128\u0095\2\u02d5\u02df\5\u012a\u0096\2\u02d6\u02df\5\u012c\u0097"+
		"\2\u02d7\u02df\5\u012e\u0098\2\u02d8\u02df\5\u0146\u00a4\2\u02d9\u02df"+
		"\5\u0148\u00a5\2\u02da\u02df\5\u014a\u00a6\2\u02db\u02df\5\u014c\u00a7"+
		"\2\u02dc\u02df\5\u014e\u00a8\2\u02dd\u02df\5\u0150\u00a9\2\u02de\u02cf"+
		"\3\2\2\2\u02de\u02d0\3\2\2\2\u02de\u02d1\3\2\2\2\u02de\u02d2\3\2\2\2\u02de"+
		"\u02d3\3\2\2\2\u02de\u02d4\3\2\2\2\u02de\u02d5\3\2\2\2\u02de\u02d6\3\2"+
		"\2\2\u02de\u02d7\3\2\2\2\u02de\u02d8\3\2\2\2\u02de\u02d9\3\2\2\2\u02de"+
		"\u02da\3\2\2\2\u02de\u02db\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02dd\3\2"+
		"\2\2\u02df\21\3\2\2\2\u02e0\u02e4\5\u0152\u00aa\2\u02e1\u02e4\5\u0154"+
		"\u00ab\2\u02e2\u02e4\5\u0156\u00ac\2\u02e3\u02e0\3\2\2\2\u02e3\u02e1\3"+
		"\2\2\2\u02e3\u02e2\3\2\2\2\u02e4\23\3\2\2\2\u02e5\u02f0\5\u015a\u00ae"+
		"\2\u02e6\u02f0\5\u015c\u00af\2\u02e7\u02f0\5\u015e\u00b0\2\u02e8\u02f0"+
		"\5\u0162\u00b2\2\u02e9\u02f0\5\u0164\u00b3\2\u02ea\u02f0\5\u0166\u00b4"+
		"\2\u02eb\u02f0\5\u016a\u00b6\2\u02ec\u02f0\5\u0160\u00b1\2\u02ed\u02f0"+
		"\5\u0168\u00b5\2\u02ee\u02f0\5\u016c\u00b7\2\u02ef\u02e5\3\2\2\2\u02ef"+
		"\u02e6\3\2\2\2\u02ef\u02e7\3\2\2\2\u02ef\u02e8\3\2\2\2\u02ef\u02e9\3\2"+
		"\2\2\u02ef\u02ea\3\2\2\2\u02ef\u02eb\3\2\2\2\u02ef\u02ec\3\2\2\2\u02ef"+
		"\u02ed\3\2\2\2\u02ef\u02ee\3\2\2\2\u02f0\25\3\2\2\2\u02f1\u030b\5\u017e"+
		"\u00c0\2\u02f2\u030b\5\u0180\u00c1\2\u02f3\u030b\5\u0182\u00c2\2\u02f4"+
		"\u030b\5\u0184\u00c3\2\u02f5\u030b\5\u0186\u00c4\2\u02f6\u030b\5\u0188"+
		"\u00c5\2\u02f7\u030b\5\u018a\u00c6\2\u02f8\u030b\5\u018c\u00c7\2\u02f9"+
		"\u030b\5\u01a4\u00d3\2\u02fa\u030b\5\u01a6\u00d4\2\u02fb\u030b\5\u01a8"+
		"\u00d5\2\u02fc\u030b\5\u01aa\u00d6\2\u02fd\u030b\5\u01ac\u00d7\2\u02fe"+
		"\u030b\5\u01b0\u00d9\2\u02ff\u030b\5\u01b2\u00da\2\u0300\u030b\5\u01b4"+
		"\u00db\2\u0301\u030b\5\u01b6\u00dc\2\u0302\u030b\5\u01b8\u00dd\2\u0303"+
		"\u030b\5\u01c6\u00e4\2\u0304\u030b\5\u01c8\u00e5\2\u0305\u030b\5\u01ca"+
		"\u00e6\2\u0306\u030b\5\u01cc\u00e7\2\u0307\u030b\5\u01ce\u00e8\2\u0308"+
		"\u030b\5\u01d0\u00e9\2\u0309\u030b\5\u01d2\u00ea\2\u030a\u02f1\3\2\2\2"+
		"\u030a\u02f2\3\2\2\2\u030a\u02f3\3\2\2\2\u030a\u02f4\3\2\2\2\u030a\u02f5"+
		"\3\2\2\2\u030a\u02f6\3\2\2\2\u030a\u02f7\3\2\2\2\u030a\u02f8\3\2\2\2\u030a"+
		"\u02f9\3\2\2\2\u030a\u02fa\3\2\2\2\u030a\u02fb\3\2\2\2\u030a\u02fc\3\2"+
		"\2\2\u030a\u02fd\3\2\2\2\u030a\u02fe\3\2\2\2\u030a\u02ff\3\2\2\2\u030a"+
		"\u0300\3\2\2\2\u030a\u0301\3\2\2\2\u030a\u0302\3\2\2\2\u030a\u0303\3\2"+
		"\2\2\u030a\u0304\3\2\2\2\u030a\u0305\3\2\2\2\u030a\u0306\3\2\2\2\u030a"+
		"\u0307\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u0309\3\2\2\2\u030b\27\3\2\2"+
		"\2\u030c\u0311\5\u01dc\u00ef\2\u030d\u0311\5\u01de\u00f0\2\u030e\u0311"+
		"\5\u01e0\u00f1\2\u030f\u0311\5\u01e2\u00f2\2\u0310\u030c\3\2\2\2\u0310"+
		"\u030d\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u030f\3\2\2\2\u0311\31\3\2\2"+
		"\2\u0312\u0313\7\37\2\2\u0313\u0315\t\2\2\2\u0314\u0316\5\u0234\u011b"+
		"\2\u0315\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u031b"+
		"\5\u0200\u0101\2\u0318\u031a\5\62\32\2\u0319\u0318\3\2\2\2\u031a\u031d"+
		"\3\2\2\2\u031b\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c\33\3\2\2\2\u031d"+
		"\u031b\3\2\2\2\u031e\u0320\7\37\2\2\u031f\u0321\5\64\33\2\u0320\u031f"+
		"\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324\7\u013d\2"+
		"\2\u0323\u0325\5\u0234\u011b\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2"+
		"\u0325\u0326\3\2\2\2\u0326\u0327\5\u01e6\u00f4\2\u0327\u0328\7f\2\2\u0328"+
		"\u0329\7\u01df\2\2\u0329\u0330\5\66\34\2\u032a\u032b\7f\2\2\u032b\u032d"+
		"\7\u0119\2\2\u032c\u032e\7c\2\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2"+
		"\2\u032e\u032f\3\2\2\2\u032f\u0331\7\u01ba\2\2\u0330\u032a\3\2\2\2\u0330"+
		"\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0334\5> \2\u0333\u0332\3\2\2"+
		"\2\u0333\u0334\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0336\7\u0116\2\2\u0336"+
		"\u0338\7\u03c2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339"+
		"\3\2\2\2\u0339\u033a\7\u012f\2\2\u033a\u033b\5\u0158\u00ad\2\u033b\35"+
		"\3\2\2\2\u033c\u033e\7\37\2\2\u033d\u033f\t\3\2\2\u033e\u033d\3\2\2\2"+
		"\u033e\u033f\3\2\2\2\u033f\u0341\3\2\2\2\u0340\u0342\t\4\2\2\u0341\u0340"+
		"\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0344\7E\2\2\u0344"+
		"\u0346\5\u0200\u0101\2\u0345\u0347\5@!\2\u0346\u0345\3\2\2\2\u0346\u0347"+
		"\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\7f\2\2\u0349\u034a\5\u01e8\u00f5"+
		"\2\u034a\u034e\5\u0222\u0112\2\u034b\u034d\5B\"\2\u034c\u034b\3\2\2\2"+
		"\u034d\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u035b"+
		"\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0353\7\u00fa\2\2\u0352\u0354\7\u03aa"+
		"\2\2\u0353\u0352\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355"+
		"\u035c\t\5\2\2\u0356\u0358\7Z\2\2\u0357\u0359\7\u03aa\2\2\u0358\u0357"+
		"\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\t\6\2\2\u035b"+
		"\u0351\3\2\2\2\u035b\u0356\3\2\2\2\u035b\u035c\3\2\2\2\u035c\37\3\2\2"+
		"\2\u035d\u035e\7\37\2\2\u035e\u035f\7\u0173\2\2\u035f\u0360\7?\2\2\u0360"+
		"\u0361\5\u0200\u0101\2\u0361\u0362\7\7\2\2\u0362\u0363\7\u020e\2\2\u0363"+
		"\u0369\7\u03c2\2\2\u0364\u0366\7\u015f\2\2\u0365\u0367\7\u03aa\2\2\u0366"+
		"\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\5\u0208"+
		"\u0105\2\u0369\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0370\3\2\2\2\u036b"+
		"\u036d\7\u020f\2\2\u036c\u036e\7\u03aa\2\2\u036d\u036c\3\2\2\2\u036d\u036e"+
		"\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0371\5\u0208\u0105\2\u0370\u036b\3"+
		"\2\2\2\u0370\u0371\3\2\2\2\u0371\u0377\3\2\2\2\u0372\u0374\7\u01c4\2\2"+
		"\u0373\u0375\7\u03aa\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375"+
		"\u0376\3\2\2\2\u0376\u0378\5\u0208\u0105\2\u0377\u0372\3\2\2\2\u0377\u0378"+
		"\3\2\2\2\u0378\u037e\3\2\2\2\u0379\u037b\7\u019f\2\2\u037a\u037c\7\u03aa"+
		"\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2\u037d"+
		"\u037f\5\u0200\u0101\2\u037e\u0379\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381"+
		"\3\2\2\2\u0380\u0382\7\u021b\2\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2"+
		"\2\u0382\u0388\3\2\2\2\u0383\u0385\7\u0116\2\2\u0384\u0386\7\u03aa\2\2"+
		"\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389"+
		"\7\u03c2\2\2\u0388\u0383\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2"+
		"\2\u038a\u038c\7\u0137\2\2\u038b\u038d\7\u03aa\2\2\u038c\u038b\3\2\2\2"+
		"\u038c\u038d\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f\5\u01f6\u00fc\2\u038f"+
		"!\3\2\2\2\u0390\u0392\7\37\2\2\u0391\u0393\5\64\33\2\u0392\u0391\3\2\2"+
		"\2\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\7q\2\2\u0395\u0396"+
		"\5\u01e6\u00f4\2\u0396\u0398\7\u03b3\2\2\u0397\u0399\5D#\2\u0398\u0397"+
		"\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039e\3\2\2\2\u039a\u039b\7\u03b5\2"+
		"\2\u039b\u039d\5D#\2\u039c\u039a\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c"+
		"\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1"+
		"\u03a5\7\u03b4\2\2\u03a2\u03a4\5H%\2\u03a3\u03a2\3\2\2\2\u03a4\u03a7\3"+
		"\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7"+
		"\u03a5\3\2\2\2\u03a8\u03a9\5\u0158\u00ad\2\u03a9#\3\2\2\2\u03aa\u03ac"+
		"\7\37\2\2\u03ab\u03ad\5\64\33\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2\2"+
		"\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\7\u0151\2\2\u03af\u03b0\5\u01e6\u00f4"+
		"\2\u03b0\u03b2\7\u03b3\2\2\u03b1\u03b3\5F$\2\u03b2\u03b1\3\2\2\2\u03b2"+
		"\u03b3\3\2\2\2\u03b3\u03b8\3\2\2\2\u03b4\u03b5\7\u03b5\2\2\u03b5\u03b7"+
		"\5F$\2\u03b6\u03b4\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8"+
		"\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc\7\u03b4"+
		"\2\2\u03bc\u03bd\7\u01d7\2\2\u03bd\u03c1\5\u0214\u010b\2\u03be\u03c0\5"+
		"H%\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1"+
		"\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c5\5\u0158"+
		"\u00ad\2\u03c5%\3\2\2\2\u03c6\u03c7\7\37\2\2\u03c7\u03c8\7\u01e1\2\2\u03c8"+
		"\u03c9\5\u0200\u0101\2\u03c9\u03ca\7;\2\2\u03ca\u03cb\7\u0124\2\2\u03cb"+
		"\u03cc\7\u021f\2\2\u03cc\u03cd\t\7\2\2\u03cd\u03ce\7\u01aa\2\2\u03ce\u03cf"+
		"\7\u03b3\2\2\u03cf\u03d4\5J&\2\u03d0\u03d1\7\u03b5\2\2\u03d1\u03d3\5J"+
		"&\2\u03d2\u03d0\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4"+
		"\u03d5\3\2\2\2\u03d5\u03d7\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\7\u03b4"+
		"\2\2\u03d8\'\3\2\2\2\u03d9\u03dc\7\37\2\2\u03da\u03db\7\u0206\2\2\u03db"+
		"\u03dd\b\25\1\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3"+
		"\2\2\2\u03de\u03e2\7\u0093\2\2\u03df\u03e0\5\u0234\u011b\2\u03e0\u03e1"+
		"\b\25\1\2\u03e1\u03e3\3\2\2\2\u03e2\u03df\3\2\2\2\u03e2\u03e3\3\2\2\2"+
		"\u03e3\u03e4\3\2\2\2\u03e4\u03ef\5\u01e8\u00f5\2\u03e5\u03e6\7U\2\2\u03e6"+
		"\u03e7\5\u01e8\u00f5\2\u03e7\u03e8\b\25\1\2\u03e8\u03f0\3\2\2\2\u03e9"+
		"\u03ea\7\u03b3\2\2\u03ea\u03eb\7U\2\2\u03eb\u03ec\5\u01e8\u00f5\2\u03ec"+
		"\u03ed\b\25\1\2\u03ed\u03ee\7\u03b4\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03e5"+
		"\3\2\2\2\u03ef\u03e9\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\b\25\1\2"+
		"\u03f2\u0444\3\2\2\2\u03f3\u03f6\7\37\2\2\u03f4\u03f5\7\u0206\2\2\u03f5"+
		"\u03f7\b\25\1\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3"+
		"\2\2\2\u03f8\u03fc\7\u0093\2\2\u03f9\u03fa\5\u0234\u011b\2\u03fa\u03fb"+
		"\b\25\1\2\u03fb\u03fd\3\2\2\2\u03fc\u03f9\3\2\2\2\u03fc\u03fd\3\2\2\2"+
		"\u03fd\u03fe\3\2\2\2\u03fe\u03ff\5\u01e8\u00f5\2\u03ff\u0403\b\25\1\2"+
		"\u0400\u0401\5L\'\2\u0401\u0402\b\25\1\2\u0402\u0404\3\2\2\2\u0403\u0400"+
		"\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0412\3\2\2\2\u0405\u0406\5^\60\2\u0406"+
		"\u040f\b\25\1\2\u0407\u0409\7\u03b5\2\2\u0408\u0407\3\2\2\2\u0408\u0409"+
		"\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b\5^\60\2\u040b\u040c\b\25\1\2"+
		"\u040c\u040e\3\2\2\2\u040d\u0408\3\2\2\2\u040e\u0411\3\2\2\2\u040f\u040d"+
		"\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0413\3\2\2\2\u0411\u040f\3\2\2\2\u0412"+
		"\u0405\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414\u0416\5b"+
		"\62\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2\u0417"+
		"\u0419\t\b\2\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041b\3\2"+
		"\2\2\u041a\u041c\7\f\2\2\u041b\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c"+
		"\u041d\3\2\2\2\u041d\u041e\5\u00b4[\2\u041e\u041f\b\25\1\2\u041f\u0444"+
		"\3\2\2\2\u0420\u0423\7\37\2\2\u0421\u0422\7\u0206\2\2\u0422\u0424\b\25"+
		"\1\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425"+
		"\u0429\7\u0093\2\2\u0426\u0427\5\u0234\u011b\2\u0427\u0428\b\25\1\2\u0428"+
		"\u042a\3\2\2\2\u0429\u0426\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b\3\2"+
		"\2\2\u042b\u042c\5\u01e8\u00f5\2\u042c\u042d\b\25\1\2\u042d\u042e\5L\'"+
		"\2\u042e\u043c\b\25\1\2\u042f\u0430\5^\60\2\u0430\u0439\b\25\1\2\u0431"+
		"\u0433\7\u03b5\2\2\u0432\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434"+
		"\3\2\2\2\u0434\u0435\5^\60\2\u0435\u0436\b\25\1\2\u0436\u0438\3\2\2\2"+
		"\u0437\u0432\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u043a"+
		"\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043c\u042f\3\2\2\2\u043c"+
		"\u043d\3\2\2\2\u043d\u043f\3\2\2\2\u043e\u0440\5b\62\2\u043f\u043e\3\2"+
		"\2\2\u043f\u0440\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442\b\25\1\2\u0442"+
		"\u0444\3\2\2\2\u0443\u03d9\3\2\2\2\u0443\u03f3\3\2\2\2\u0443\u0420\3\2"+
		"\2\2\u0444)\3\2\2\2\u0445\u0446\7\37\2\2\u0446\u0447\7\u0205\2\2\u0447"+
		"\u0448\5\u0200\u0101\2\u0448\u0449\7\7\2\2\u0449\u044a\7\u0125\2\2\u044a"+
		"\u044e\7\u03c2\2\2\u044b\u044c\7\u0149\2\2\u044c\u044d\7\u03aa\2\2\u044d"+
		"\u044f\5\u0208\u0105\2\u044e\u044b\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0455"+
		"\3\2\2\2\u0450\u0452\7\u0137\2\2\u0451\u0453\7\u03aa\2\2\u0452\u0451\3"+
		"\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\5\u01f6\u00fc"+
		"\2\u0455\u0450\3\2\2\2\u0455\u0456\3\2\2\2\u0456+\3\2\2\2\u0457\u0458"+
		"\7\37\2\2\u0458\u0459\7\u0205\2\2\u0459\u045a\5\u0200\u0101\2\u045a\u045b"+
		"\7\7\2\2\u045b\u045c\7\u0125\2\2\u045c\u045d\7\u03c2\2\2\u045d\u045e\7"+
		"\u00a1\2\2\u045e\u045f\7\u0173\2\2\u045f\u0460\7?\2\2\u0460\u0466\5\u0200"+
		"\u0101\2\u0461\u0463\7\u0145\2\2\u0462\u0464\7\u03aa\2\2\u0463\u0462\3"+
		"\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\5\u0208\u0105"+
		"\2\u0466\u0461\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u046d\3\2\2\2\u0468\u046a"+
		"\7\u015f\2\2\u0469\u046b\7\u03aa\2\2\u046a\u0469\3\2\2\2\u046a\u046b\3"+
		"\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\5\u0208\u0105\2\u046d\u0468\3\2"+
		"\2\2\u046d\u046e\3\2\2\2\u046e\u0474\3\2\2\2\u046f\u0471\7\u00ff\2\2\u0470"+
		"\u0472\7\u03aa\2\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473"+
		"\3\2\2\2\u0473\u0475\5\u0208\u0105\2\u0474\u046f\3\2\2\2\u0474\u0475\3"+
		"\2\2\2\u0475\u047b\3\2\2\2\u0476\u0478\7\u018d\2\2\u0477\u0479\7\u03aa"+
		"\2\2\u0478\u0477\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2\u047a"+
		"\u047c\5\u0208\u0105\2\u047b\u0476\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u0482"+
		"\3\2\2\2\u047d\u047f\7\u019f\2\2\u047e\u0480\7\u03aa\2\2\u047f\u047e\3"+
		"\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\5\u0200\u0101"+
		"\2\u0482\u047d\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\3\2\2\2\u0484\u0486"+
		"\7\u021b\2\2\u0485\u0484\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u048c\3\2\2"+
		"\2\u0487\u0489\7\u0116\2\2\u0488\u048a\7\u03aa\2\2\u0489\u0488\3\2\2\2"+
		"\u0489\u048a\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048d\7\u03c2\2\2\u048c"+
		"\u0487\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\7\u0137"+
		"\2\2\u048f\u0491\7\u03aa\2\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491"+
		"\u0492\3\2\2\2\u0492\u0493\5\u01f6\u00fc\2\u0493-\3\2\2\2\u0494\u0496"+
		"\7\37\2\2\u0495\u0497\5\64\33\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2"+
		"\2\u0497\u0498\3\2\2\2\u0498\u0499\7\u0098\2\2\u0499\u049a\5\u01e6\u00f4"+
		"\2\u049a\u049b\t\t\2\2\u049b\u049c\t\n\2\2\u049c\u049d\7f\2\2\u049d\u049e"+
		"\5\u01e8\u00f5\2\u049e\u049f\79\2\2\u049f\u04a0\7/\2\2\u04a0\u04a3\7\u01db"+
		"\2\2\u04a1\u04a2\t\13\2\2\u04a2\u04a4\5\u01e6\u00f4\2\u04a3\u04a1\3\2"+
		"\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\5\u0158\u00ad"+
		"\2\u04a6/\3\2\2\2\u04a7\u04aa\7\37\2\2\u04a8\u04a9\7j\2\2\u04a9\u04ab"+
		"\7{\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04af\3\2\2\2\u04ac"+
		"\u04ad\7\u00fa\2\2\u04ad\u04ae\7\u03aa\2\2\u04ae\u04b0\t\f\2\2\u04af\u04ac"+
		"\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1\u04b3\5\64\33\2"+
		"\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b7\3\2\2\2\u04b4\u04b5"+
		"\7\u0089\2\2\u04b5\u04b6\7\u01e0\2\2\u04b6\u04b8\t\r\2\2\u04b7\u04b4\3"+
		"\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\7\u021a\2\2"+
		"\u04ba\u04bf\5\u01e6\u00f4\2\u04bb\u04bc\7\u03b3\2\2\u04bc\u04bd\5\u021e"+
		"\u0110\2\u04bd\u04be\7\u03b4\2\2\u04be\u04c0\3\2\2\2\u04bf\u04bb\3\2\2"+
		"\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\7\f\2\2\u04c2\u04c9"+
		"\5\u00b4[\2\u04c3\u04c5\7\u00a7\2\2\u04c4\u04c6\t\16\2\2\u04c5\u04c4\3"+
		"\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\7\30\2\2\u04c8"+
		"\u04ca\7h\2\2\u04c9\u04c3\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\61\3\2\2\2"+
		"\u04cb\u04cd\7&\2\2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd\u04ce"+
		"\3\2\2\2\u04ce\u04cf\7\27\2\2\u04cf\u04d1\7\u0085\2\2\u04d0\u04d2\7\u03aa"+
		"\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3"+
		"\u04dd\5\u01f2\u00fa\2\u04d4\u04d6\7&\2\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6"+
		"\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d9\7\31\2\2\u04d8\u04da\7\u03aa"+
		"\2\2\u04d9\u04d8\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2\u04db"+
		"\u04dd\5\u01f4\u00fb\2\u04dc\u04cc\3\2\2\2\u04dc\u04d5\3\2\2\2\u04dd\63"+
		"\3\2\2\2\u04de\u04df\7\u0128\2\2\u04df\u04e6\7\u03aa\2\2\u04e0\u04e7\5"+
		"\u01ee\u00f8\2\u04e1\u04e4\7!\2\2\u04e2\u04e3\7\u03b3\2\2\u04e3\u04e5"+
		"\7\u03b4\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\3\2\2"+
		"\2\u04e6\u04e0\3\2\2\2\u04e6\u04e1\3\2\2\2\u04e7\65\3\2\2\2\u04e8\u04e9"+
		"\7\u00fc\2\2\u04e9\u04ed\58\35\2\u04ea\u04ec\5:\36\2\u04eb\u04ea\3\2\2"+
		"\2\u04ec\u04ef\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u050b"+
		"\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04f3\7\u013f\2\2\u04f1\u04f4\5\u0206"+
		"\u0104\2\u04f2\u04f4\5\u024a\u0126\2\u04f3\u04f1\3\2\2\2\u04f3\u04f2\3"+
		"\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04fe\5<\37\2\u04f6\u04f7\7\u01f7\2\2"+
		"\u04f7\u04fb\58\35\2\u04f8\u04fa\5:\36\2\u04f9\u04f8\3\2\2\2\u04fa\u04fd"+
		"\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd"+
		"\u04fb\3\2\2\2\u04fe\u04f6\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0508\3\2"+
		"\2\2\u0500\u0501\7\u0136\2\2\u0501\u0505\58\35\2\u0502\u0504\5:\36\2\u0503"+
		"\u0502\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2"+
		"\2\2\u0506\u0509\3\2\2\2\u0507\u0505\3\2\2\2\u0508\u0500\3\2\2\2\u0508"+
		"\u0509\3\2\2\2\u0509\u050b\3\2\2\2\u050a\u04e8\3\2\2\2\u050a\u04f0\3\2"+
		"\2\2\u050b\67\3\2\2\2\u050c\u0511\7\u00e5\2\2\u050d\u0511\5\u020a\u0106"+
		"\2\u050e\u0511\5\u0206\u0104\2\u050f\u0511\5\u024a\u0126\2\u0510\u050c"+
		"\3\2\2\2\u0510\u050d\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u050f\3\2\2\2\u0511"+
		"9\3\2\2\2\u0512\u0513\7\u03a5\2\2\u0513\u0516\7J\2\2\u0514\u0517\5\u0206"+
		"\u0104\2\u0515\u0517\5\u024a\u0126\2\u0516\u0514\3\2\2\2\u0516\u0515\3"+
		"\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\5<\37\2\u0519;\3\2\2\2\u051a\u0528"+
		"\5\u0260\u0131\2\u051b\u0528\7\u00ba\2\2\u051c\u0528\7\u00c8\2\2\u051d"+
		"\u0528\7\u00c9\2\2\u051e\u0528\7\u00ca\2\2\u051f\u0528\7\u00cb\2\2\u0520"+
		"\u0528\7\u00cc\2\2\u0521\u0528\7\u00cd\2\2\u0522\u0528\7\u00ce\2\2\u0523"+
		"\u0528\7\u00cf\2\2\u0524\u0528\7\u00d0\2\2\u0525\u0528\7\u00d1\2\2\u0526"+
		"\u0528\7\u00d2\2\2\u0527\u051a\3\2\2\2\u0527\u051b\3\2\2\2\u0527\u051c"+
		"\3\2\2\2\u0527\u051d\3\2\2\2\u0527\u051e\3\2\2\2\u0527\u051f\3\2\2\2\u0527"+
		"\u0520\3\2\2\2\u0527\u0521\3\2\2\2\u0527\u0522\3\2\2\2\u0527\u0523\3\2"+
		"\2\2\u0527\u0524\3\2\2\2\u0527\u0525\3\2\2\2\u0527\u0526\3\2\2\2\u0528"+
		"=\3\2\2\2\u0529\u052f\7\u0133\2\2\u052a\u052f\7\u012c\2\2\u052b\u052c"+
		"\7\u012c\2\2\u052c\u052d\7f\2\2\u052d\u052f\7\u01e7\2\2\u052e\u0529\3"+
		"\2\2\2\u052e\u052a\3\2\2\2\u052e\u052b\3\2\2\2\u052f?\3\2\2\2\u0530\u0531";
	private static final String _serializedATNSegment1 =
		"\7\u00a2\2\2\u0531\u0532\t\17\2\2\u0532A\3\2\2\2\u0533\u0535\7\u016b\2"+
		"\2\u0534\u0536\7\u03aa\2\2\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2\2\u0536"+
		"\u0537\3\2\2\2\u0537\u053f\5\u0208\u0105\2\u0538\u053f\5@!\2\u0539\u053a"+
		"\7\u00a7\2\2\u053a\u053b\7\u01ae\2\2\u053b\u053f\5\u0200\u0101\2\u053c"+
		"\u053d\7\u0116\2\2\u053d\u053f\7\u03c2\2\2\u053e\u0533\3\2\2\2\u053e\u0538"+
		"\3\2\2\2\u053e\u0539\3\2\2\2\u053e\u053c\3\2\2\2\u053fC\3\2\2\2\u0540"+
		"\u0541\t\20\2\2\u0541\u0542\5\u0200\u0101\2\u0542\u0543\5\u0214\u010b"+
		"\2\u0543E\3\2\2\2\u0544\u0545\5\u0200\u0101\2\u0545\u0546\5\u0214\u010b"+
		"\2\u0546G\3\2\2\2\u0547\u0548\7\u0116\2\2\u0548\u055f\7\u03c2\2\2\u0549"+
		"\u054a\7\u016c\2\2\u054a\u055f\7\u0089\2\2\u054b\u054d\7c\2\2\u054c\u054b"+
		"\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u055f\7+\2\2\u054f"+
		"\u0550\7\u011f\2\2\u0550\u055a\7\u0089\2\2\u0551\u0552\7\u019e\2\2\u0552"+
		"\u055a\7\u0089\2\2\u0553\u0554\7u\2\2\u0554\u0555\7\u0089\2\2\u0555\u055a"+
		"\7\u0124\2\2\u0556\u0557\7a\2\2\u0557\u0558\7\u0089\2\2\u0558\u055a\7"+
		"\u0124\2\2\u0559\u054f\3\2\2\2\u0559\u0551\3\2\2\2\u0559\u0553\3\2\2\2"+
		"\u0559\u0556\3\2\2\2\u055a\u055f\3\2\2\2\u055b\u055c\7\u0089\2\2\u055c"+
		"\u055d\7\u01e0\2\2\u055d\u055f\t\r\2\2\u055e\u0547\3\2\2\2\u055e\u0549"+
		"\3\2\2\2\u055e\u054c\3\2\2\2\u055e\u0559\3\2\2\2\u055e\u055b\3\2\2\2\u055f"+
		"I\3\2\2\2\u0560\u0561\7\u0159\2\2\u0561\u056f\7\u03c2\2\2\u0562\u0563"+
		"\7#\2\2\u0563\u056f\7\u03c2\2\2\u0564\u0565\7\u0214\2\2\u0565\u056f\7"+
		"\u03c2\2\2\u0566\u0567\7\u01b2\2\2\u0567\u056f\7\u03c2\2\2\u0568\u0569"+
		"\7\u01ea\2\2\u0569\u056f\7\u03c2\2\2\u056a\u056b\7\u01ab\2\2\u056b\u056f"+
		"\7\u03c2\2\2\u056c\u056d\7\u01b7\2\2\u056d\u056f\5\u0206\u0104\2\u056e"+
		"\u0560\3\2\2\2\u056e\u0562\3\2\2\2\u056e\u0564\3\2\2\2\u056e\u0566\3\2"+
		"\2\2\u056e\u0568\3\2\2\2\u056e\u056a\3\2\2\2\u056e\u056c\3\2\2\2\u056f"+
		"K\3\2\2\2\u0570\u0571\7\u03b3\2\2\u0571\u0572\5N(\2\u0572\u0579\b\'\1"+
		"\2\u0573\u0574\7\u03b5\2\2\u0574\u0575\5N(\2\u0575\u0576\b\'\1\2\u0576"+
		"\u0578\3\2\2\2\u0577\u0573\3\2\2\2\u0578\u057b\3\2\2\2\u0579\u0577\3\2"+
		"\2\2\u0579\u057a\3\2\2\2\u057a\u057c\3\2\2\2\u057b\u0579\3\2\2\2\u057c"+
		"\u057d\7\u03b4\2\2\u057d\u057e\b\'\1\2\u057eM\3\2\2\2\u057f\u0580\5\u0200"+
		"\u0101\2\u0580\u0581\5P)\2\u0581\u0582\b(\1\2\u0582\u058a\3\2\2\2\u0583"+
		"\u0584\5T+\2\u0584\u0585\b(\1\2\u0585\u058a\3\2\2\2\u0586\u0587\5\\/\2"+
		"\u0587\u0588\b(\1\2\u0588\u058a\3\2\2\2\u0589\u057f\3\2\2\2\u0589\u0583"+
		"\3\2\2\2\u0589\u0586\3\2\2\2\u058aO\3\2\2\2\u058b\u0591\5\u0214\u010b"+
		"\2\u058c\u058d\5R*\2\u058d\u058e\b)\1\2\u058e\u0590\3\2\2\2\u058f\u058c"+
		"\3\2\2\2\u0590\u0593\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0592\3\2\2\2\u0592"+
		"Q\3\2\2\2\u0593\u0591\3\2\2\2\u0594\u05ad\5\u0210\u0109\2\u0595\u0596"+
		"\7&\2\2\u0596\u05ad\5\u022e\u0118\2\u0597\u0598\7\u0100\2\2\u0598\u05ad"+
		"\b*\1\2\u0599\u059a\7p\2\2\u059a\u059c\b*\1\2\u059b\u0599\3\2\2\2\u059b"+
		"\u059c\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\7O\2\2\u059e\u05ad\b*\1"+
		"\2\u059f\u05a0\7\u009c\2\2\u05a0\u05a3\b*\1\2\u05a1\u05a2\7O\2\2\u05a2"+
		"\u05a4\b*\1\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05ad\3\2"+
		"\2\2\u05a5\u05a6\7\u0116\2\2\u05a6\u05ad\7\u03c2\2\2\u05a7\u05a8\7\u0115"+
		"\2\2\u05a8\u05ad\t\21\2\2\u05a9\u05aa\7\u01fd\2\2\u05aa\u05ad\t\22\2\2"+
		"\u05ab\u05ad\5V,\2\u05ac\u0594\3\2\2\2\u05ac\u0595\3\2\2\2\u05ac\u0597"+
		"\3\2\2\2\u05ac\u059b\3\2\2\2\u05ac\u059f\3\2\2\2\u05ac\u05a5\3\2\2\2\u05ac"+
		"\u05a7\3\2\2\2\u05ac\u05a9\3\2\2\2\u05ac\u05ab\3\2\2\2\u05adS\3\2\2\2"+
		"\u05ae\u05b0\7\34\2\2\u05af\u05b1\5\u0200\u0101\2\u05b0\u05af\3\2\2\2"+
		"\u05b0\u05b1\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05ae\3\2\2\2\u05b2\u05b3"+
		"\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\7p\2\2\u05b5\u05b6\7O\2\2\u05b6"+
		"\u05b8\b+\1\2\u05b7\u05b9\5@!\2\u05b8\u05b7\3\2\2\2\u05b8\u05b9\3\2\2"+
		"\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\5\u0222\u0112\2\u05bb\u05bf\b+\1\2"+
		"\u05bc\u05be\5B\"\2\u05bd\u05bc\3\2\2\2\u05be\u05c1\3\2\2\2\u05bf\u05bd"+
		"\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05ef\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c2"+
		"\u05c4\7\34\2\2\u05c3\u05c5\5\u0200\u0101\2\u05c4\u05c3\3\2\2\2\u05c4"+
		"\u05c5\3\2\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c2\3\2\2\2\u05c6\u05c7\3\2"+
		"\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca\7\u009c\2\2\u05c9\u05cb\t\23\2\2"+
		"\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05ce"+
		"\b+\1\2\u05cd\u05cf\5\u0200\u0101\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3"+
		"\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05d2\5@!\2\u05d1\u05d0\3\2\2\2\u05d1"+
		"\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\5\u0222\u0112\2\u05d4\u05d8"+
		"\b+\1\2\u05d5\u05d7\5B\"\2\u05d6\u05d5\3\2\2\2\u05d7\u05da\3\2\2\2\u05d8"+
		"\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05ef\3\2\2\2\u05da\u05d8\3\2"+
		"\2\2\u05db\u05dd\7\34\2\2\u05dc\u05de\5\u0200\u0101\2\u05dd\u05dc\3\2"+
		"\2\2\u05dd\u05de\3\2\2\2\u05de\u05e0\3\2\2\2\u05df\u05db\3\2\2\2\u05df"+
		"\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2\7;\2\2\u05e2\u05e4\7O\2"+
		"\2\u05e3\u05e5\5\u0200\u0101\2\u05e4\u05e3\3\2\2\2\u05e4\u05e5\3\2\2\2"+
		"\u05e5\u05e6\3\2\2\2\u05e6\u05e7\5\u0222\u0112\2\u05e7\u05e8\5V,\2\u05e8"+
		"\u05ef\3\2\2\2\u05e9\u05ea\7\30\2\2\u05ea\u05eb\7\u03b3\2\2\u05eb\u05ec"+
		"\5\u024a\u0126\2\u05ec\u05ed\7\u03b4\2\2\u05ed\u05ef\3\2\2\2\u05ee\u05b2"+
		"\3\2\2\2\u05ee\u05c6\3\2\2\2\u05ee\u05df\3\2\2\2\u05ee\u05e9\3\2\2\2\u05ef"+
		"U\3\2\2\2\u05f0\u05f1\7v\2\2\u05f1\u05f2\5\u01e8\u00f5\2\u05f2\u05f5\5"+
		"\u0222\u0112\2\u05f3\u05f4\7_\2\2\u05f4\u05f6\t\24\2\2\u05f5\u05f3\3\2"+
		"\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f9\5X-\2\u05f8\u05f7"+
		"\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9W\3\2\2\2\u05fa\u05fb\7f\2\2\u05fb\u05fc"+
		"\7(\2\2\u05fc\u0600\5Z.\2\u05fd\u05fe\7f\2\2\u05fe\u05ff\7\u009f\2\2\u05ff"+
		"\u0601\5Z.\2\u0600\u05fd\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u060b\3\2\2"+
		"\2\u0602\u0603\7f\2\2\u0603\u0604\7\u009f\2\2\u0604\u0608\5Z.\2\u0605"+
		"\u0606\7f\2\2\u0606\u0607\7(\2\2\u0607\u0609\5Z.\2\u0608\u0605\3\2\2\2"+
		"\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2\u060a\u05fa\3\2\2\2\u060a\u0602"+
		"\3\2\2\2\u060bY\3\2\2\2\u060c\u0613\7}\2\2\u060d\u0613\7\23\2\2\u060e"+
		"\u060f\7\u0085\2\2\u060f\u0613\7e\2\2\u0610\u0611\7\u019e\2\2\u0611\u0613"+
		"\7\u00f7\2\2\u0612\u060c\3\2\2\2\u0612\u060d\3\2\2\2\u0612\u060e\3\2\2"+
		"\2\u0612\u0610\3\2\2\2\u0613[\3\2\2\2\u0614\u0615\t\23\2\2\u0615\u0617"+
		"\b/\1\2\u0616\u0618\5\u0200\u0101\2\u0617\u0616\3\2\2\2\u0617\u0618\3"+
		"\2\2\2\u0618\u061a\3\2\2\2\u0619\u061b\5@!\2\u061a\u0619\3\2\2\2\u061a"+
		"\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\5\u0222\u0112\2\u061d\u0621"+
		"\b/\1\2\u061e\u0620\5B\"\2\u061f\u061e\3\2\2\2\u0620\u0623\3\2\2\2\u0621"+
		"\u061f\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0633\3\2\2\2\u0623\u0621\3\2"+
		"\2\2\u0624\u0626\t\25\2\2\u0625\u0627\t\23\2\2\u0626\u0625\3\2\2\2\u0626"+
		"\u0627\3\2\2\2\u0627\u0629\3\2\2\2\u0628\u062a\5\u0200\u0101\2\u0629\u0628"+
		"\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062f\5\u0222\u0112"+
		"\2\u062c\u062e\5B\"\2\u062d\u062c\3\2\2\2\u062e\u0631\3\2\2\2\u062f\u062d"+
		"\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0632"+
		"\u0614\3\2\2\2\u0632\u0624\3\2\2\2\u0633]\3\2\2\2\u0634\u0636\7\u0137"+
		"\2\2\u0635\u0637\7\u03aa\2\2\u0636\u0635\3\2\2\2\u0636\u0637\3\2\2\2\u0637"+
		"\u0638\3\2\2\2\u0638\u0639\5\u01f6\u00fc\2\u0639\u063a\b\60\1\2\u063a"+
		"\u06e4\3\2\2\2\u063b\u063d\7\u0100\2\2\u063c\u063e\7\u03aa\2\2\u063d\u063c"+
		"\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0640\5\u0206\u0104"+
		"\2\u0640\u0641\b\60\1\2\u0641\u06e4\3\2\2\2\u0642\u0644\7\u0101\2\2\u0643"+
		"\u0645\7\u03aa\2\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646"+
		"\3\2\2\2\u0646\u0647\5\u0206\u0104\2\u0647\u0648\b\60\1\2\u0648\u06e4"+
		"\3\2\2\2\u0649\u064b\7&\2\2\u064a\u0649\3\2\2\2\u064a\u064b\3\2\2\2\u064b"+
		"\u064f\3\2\2\2\u064c\u064d\7\27\2\2\u064d\u0650\7\u0085\2\2\u064e\u0650"+
		"\7\u0293\2\2\u064f\u064c\3\2\2\2\u064f\u064e\3\2\2\2\u0650\u0652\3\2\2"+
		"\2\u0651\u0653\7\u03aa\2\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653"+
		"\u0654\3\2\2\2\u0654\u0655\5\u01f2\u00fa\2\u0655\u0656\b\60\1\2\u0656"+
		"\u06e4\3\2\2\2\u0657\u0659\7\u010e\2\2\u0658\u065a\7\u03aa\2\2\u0659\u0658"+
		"\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065c\t\26\2\2"+
		"\u065c\u06e4\b\60\1\2\u065d\u065f\7&\2\2\u065e\u065d\3\2\2\2\u065e\u065f"+
		"\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0662\7\31\2\2\u0661\u0663\7\u03aa"+
		"\2\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664"+
		"\u0665\5\u01f4\u00fb\2\u0665\u0666\b\60\1\2\u0666\u06e4\3\2\2\2\u0667"+
		"\u0669\7\u0116\2\2\u0668\u066a\7\u03aa\2\2\u0669\u0668\3\2\2\2\u0669\u066a"+
		"\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\7\u03c2\2\2\u066c\u06e4\b\60"+
		"\1\2\u066d\u066f\7\u011b\2\2\u066e\u0670\7\u03aa\2\2\u066f\u066e\3\2\2"+
		"\2\u066f\u0670\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0672\7\u03c2\2\2\u0672"+
		"\u06e4\b\60\1\2\u0673\u0675\7\u011d\2\2\u0674\u0676\7\u03aa\2\2\u0675"+
		"\u0674\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u0678\7\u03c2"+
		"\2\2\u0678\u06e4\b\60\1\2\u0679\u067a\7\u0124\2\2\u067a\u067c\7\u012b"+
		"\2\2\u067b\u067d\7\u03aa\2\2\u067c\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067d"+
		"\u067e\3\2\2\2\u067e\u067f\7\u03c2\2\2\u067f\u06e4\b\60\1\2\u0680\u0682"+
		"\7\u0129\2\2\u0681\u0683\7\u03aa\2\2\u0682\u0681\3\2\2\2\u0682\u0683\3"+
		"\2\2\2\u0683\u0684\3\2\2\2\u0684\u0685\t\26\2\2\u0685\u06e4\b\60\1\2\u0686"+
		"\u0688\7\u0134\2\2\u0687\u0689\7\u03aa\2\2\u0688\u0687\3\2\2\2\u0688\u0689"+
		"\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b\7\u03c2\2\2\u068b\u06e4\b\60"+
		"\1\2\u068c\u068d\7E\2\2\u068d\u068f\7\u012b\2\2\u068e\u0690\7\u03aa\2"+
		"\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692"+
		"\7\u03c2\2\2\u0692\u06e4\b\60\1\2\u0693\u0695\7\u0161\2\2\u0694\u0696"+
		"\7\u03aa\2\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0697\3\2\2"+
		"\2\u0697\u0698\t\27\2\2\u0698\u06e4\b\60\1\2\u0699\u069b\7\u016b\2\2\u069a"+
		"\u069c\7\u03aa\2\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069d"+
		"\3\2\2\2\u069d\u069e\5\u0208\u0105\2\u069e\u069f\b\60\1\2\u069f\u06e4"+
		"\3\2\2\2\u06a0\u06a2\7\u018c\2\2\u06a1\u06a3\7\u03aa\2\2\u06a2\u06a1\3"+
		"\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\5\u0206\u0104"+
		"\2\u06a5\u06a6\b\60\1\2\u06a6\u06e4\3\2\2\2\u06a7\u06a9\7\u0194\2\2\u06a8"+
		"\u06aa\7\u03aa\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab"+
		"\3\2\2\2\u06ab\u06ac\5\u0206\u0104\2\u06ac\u06ad\b\60\1\2\u06ad\u06e4"+
		"\3\2\2\2\u06ae\u06b0\7\u01ac\2\2\u06af\u06b1\7\u03aa\2\2\u06b0\u06af\3"+
		"\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\t\30\2\2\u06b3"+
		"\u06e4\b\60\1\2\u06b4\u06b6\7\u01b2\2\2\u06b5\u06b7\7\u03aa\2\2\u06b6"+
		"\u06b5\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06b9\7\u03c2"+
		"\2\2\u06b9\u06e4\b\60\1\2\u06ba\u06bc\7\u01dd\2\2\u06bb\u06bd\7\u03aa"+
		"\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2\2\u06be"+
		"\u06bf\t\31\2\2\u06bf\u06e4\b\60\1\2\u06c0\u06c2\7\u01f8\2\2\u06c1\u06c3"+
		"\7\u03aa\2\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2"+
		"\2\u06c4\u06c5\t\30\2\2\u06c5\u06e4\b\60\1\2\u06c6\u06c8\7\u01f9\2\2\u06c7"+
		"\u06c9\7\u03aa\2\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca"+
		"\3\2\2\2\u06ca\u06cb\t\30\2\2\u06cb\u06e4\b\60\1\2\u06cc\u06ce\7\u01fa"+
		"\2\2\u06cd\u06cf\7\u03aa\2\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf"+
		"\u06d0\3\2\2\2\u06d0\u06d1\5\u0206\u0104\2\u06d1\u06d2\b\60\1\2\u06d2"+
		"\u06e4\3\2\2\2\u06d3\u06d4\7\u0205\2\2\u06d4\u06d6\5\u0200\u0101\2\u06d5"+
		"\u06d7\5`\61\2\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d8\3\2"+
		"\2\2\u06d8\u06d9\b\60\1\2\u06d9\u06e4\3\2\2\2\u06da\u06dc\7\u009b\2\2"+
		"\u06db\u06dd\7\u03aa\2\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd"+
		"\u06de\3\2\2\2\u06de\u06df\7\u03b3\2\2\u06df\u06e0\5\u0220\u0111\2\u06e0"+
		"\u06e1\7\u03b4\2\2\u06e1\u06e2\b\60\1\2\u06e2\u06e4\3\2\2\2\u06e3\u0634"+
		"\3\2\2\2\u06e3\u063b\3\2\2\2\u06e3\u0642\3\2\2\2\u06e3\u064a\3\2\2\2\u06e3"+
		"\u0657\3\2\2\2\u06e3\u065e\3\2\2\2\u06e3\u0667\3\2\2\2\u06e3\u066d\3\2"+
		"\2\2\u06e3\u0673\3\2\2\2\u06e3\u0679\3\2\2\2\u06e3\u0680\3\2\2\2\u06e3"+
		"\u0686\3\2\2\2\u06e3\u068c\3\2\2\2\u06e3\u0693\3\2\2\2\u06e3\u0699\3\2"+
		"\2\2\u06e3\u06a0\3\2\2\2\u06e3\u06a7\3\2\2\2\u06e3\u06ae\3\2\2\2\u06e3"+
		"\u06b4\3\2\2\2\u06e3\u06ba\3\2\2\2\u06e3\u06c0\3\2\2\2\u06e3\u06c6\3\2"+
		"\2\2\u06e3\u06cc\3\2\2\2\u06e3\u06d3\3\2\2\2\u06e3\u06da\3\2\2\2\u06e4"+
		"_\3\2\2\2\u06e5\u06e6\7\u01fd\2\2\u06e6\u06e7\t\22\2\2\u06e7a\3\2\2\2"+
		"\u06e8\u06e9\7o\2\2\u06e9\u06ea\7\21\2\2\u06ea\u06ed\5d\63\2\u06eb\u06ec"+
		"\7\u01b1\2\2\u06ec\u06ee\5\u0206\u0104\2\u06ed\u06eb\3\2\2\2\u06ed\u06ee"+
		"\3\2\2\2\u06ee\u06f6\3\2\2\2\u06ef\u06f0\7\u0200\2\2\u06f0\u06f1\7\21"+
		"\2\2\u06f1\u06f4\5f\64\2\u06f2\u06f3\7\u0201\2\2\u06f3\u06f5\5\u0206\u0104"+
		"\2\u06f4\u06f2\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f7\3\2\2\2\u06f6\u06ef"+
		"\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u0703\3\2\2\2\u06f8\u06f9\7\u03b3\2"+
		"\2\u06f9\u06fe\5h\65\2\u06fa\u06fb\7\u03b5\2\2\u06fb\u06fd\5h\65\2\u06fc"+
		"\u06fa\3\2\2\2\u06fd\u0700\3\2\2\2\u06fe\u06fc\3\2\2\2\u06fe\u06ff\3\2"+
		"\2\2\u06ff\u0701\3\2\2\2\u0700\u06fe\3\2\2\2\u0701\u0702\7\u03b4\2\2\u0702"+
		"\u0704\3\2\2\2\u0703\u06f8\3\2\2\2\u0703\u0704\3\2\2\2\u0704c\3\2\2\2"+
		"\u0705\u0707\7W\2\2\u0706\u0705\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708"+
		"\3\2\2\2\u0708\u0709\7\u0157\2\2\u0709\u070a\7\u03b3\2\2\u070a\u070b\5"+
		"\u024a\u0126\2\u070b\u070c\7\u03b4\2\2\u070c\u0733\3\2\2\2\u070d\u070f"+
		"\7W\2\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\3\2\2\2\u0710"+
		"\u0714\7O\2\2\u0711\u0712\7\u00fa\2\2\u0712\u0713\7\u03aa\2\2\u0713\u0715"+
		"\t\32\2\2\u0714\u0711\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0716\3\2\2\2"+
		"\u0716\u0717\7\u03b3\2\2\u0717\u0718\5\u021e\u0110\2\u0718\u0719\7\u03b4"+
		"\2\2\u0719\u0733\3\2\2\2\u071a\u0724\7s\2\2\u071b\u071c\7\u03b3\2\2\u071c"+
		"\u071d\5\u024a\u0126\2\u071d\u071e\7\u03b4\2\2\u071e\u0725\3\2\2\2\u071f"+
		"\u0720\7\u0114\2\2\u0720\u0721\7\u03b3\2\2\u0721\u0722\5\u021e\u0110\2"+
		"\u0722\u0723\7\u03b4\2\2\u0723\u0725\3\2\2\2\u0724\u071b\3\2\2\2\u0724"+
		"\u071f\3\2\2\2\u0725\u0733\3\2\2\2\u0726\u0730\7\u0171\2\2\u0727\u0728"+
		"\7\u03b3\2\2\u0728\u0729\5\u024a\u0126\2\u0729\u072a\7\u03b4\2\2\u072a"+
		"\u0731\3\2\2\2\u072b\u072c\7\u0114\2\2\u072c\u072d\7\u03b3\2\2\u072d\u072e"+
		"\5\u021e\u0110\2\u072e\u072f\7\u03b4\2\2\u072f\u0731\3\2\2\2\u0730\u0727"+
		"\3\2\2\2\u0730\u072b\3\2\2\2\u0731\u0733\3\2\2\2\u0732\u0706\3\2\2\2\u0732"+
		"\u070e\3\2\2\2\u0732\u071a\3\2\2\2\u0732\u0726\3\2\2\2\u0733e\3\2\2\2"+
		"\u0734\u0736\7W\2\2\u0735\u0734\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0737"+
		"\3\2\2\2\u0737\u0738\7\u0157\2\2\u0738\u0739\7\u03b3\2\2\u0739\u073a\5"+
		"\u024a\u0126\2\u073a\u073b\7\u03b4\2\2\u073b\u074a\3\2\2\2\u073c\u073e"+
		"\7W\2\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f"+
		"\u0743\7O\2\2\u0740\u0741\7\u00fa\2\2\u0741\u0742\7\u03aa\2\2\u0742\u0744"+
		"\t\32\2\2\u0743\u0740\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\3\2\2\2"+
		"\u0745\u0746\7\u03b3\2\2\u0746\u0747\5\u021e\u0110\2\u0747\u0748\7\u03b4"+
		"\2\2\u0748\u074a\3\2\2\2\u0749\u0735\3\2\2\2\u0749\u073d\3\2\2\2\u074a"+
		"g\3\2\2\2\u074b\u074c\7o\2\2\u074c\u074d\5\u0200\u0101\2\u074d\u074e\7"+
		"\u00a3\2\2\u074e\u074f\7\u016f\2\2\u074f\u0750\7\u0208\2\2\u0750\u0751"+
		"\7\u03b3\2\2\u0751\u0756\5j\66\2\u0752\u0753\7\u03b5\2\2\u0753\u0755\5"+
		"j\66\2\u0754\u0752\3\2\2\2\u0755\u0758\3\2\2\2\u0756\u0754\3\2\2\2\u0756"+
		"\u0757\3\2\2\2\u0757\u0759\3\2\2\2\u0758\u0756\3\2\2\2\u0759\u075d\7\u03b4"+
		"\2\2\u075a\u075c\5p9\2\u075b\u075a\3\2\2\2\u075c\u075f\3\2\2\2\u075d\u075b"+
		"\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0768\3\2\2\2\u075f\u075d\3\2\2\2\u0760"+
		"\u0765\5n8\2\u0761\u0762\7\u03b5\2\2\u0762\u0764\5n8\2\u0763\u0761\3\2"+
		"\2\2\u0764\u0767\3\2\2\2\u0765\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766"+
		"\u0769\3\2\2\2\u0767\u0765\3\2\2\2\u0768\u0760\3\2\2\2\u0768\u0769\3\2"+
		"\2\2\u0769\u07b9\3\2\2\2\u076a\u076b\7o\2\2\u076b\u076c\5\u0200\u0101"+
		"\2\u076c\u076d\7\u00a3\2\2\u076d\u076e\7D\2\2\u076e\u076f\7\u03b3\2\2"+
		"\u076f\u0774\5j\66\2\u0770\u0771\7\u03b5\2\2\u0771\u0773\5j\66\2\u0772"+
		"\u0770\3\2\2\2\u0773\u0776\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775\3\2"+
		"\2\2\u0775\u0777\3\2\2\2\u0776\u0774\3\2\2\2\u0777\u077b\7\u03b4\2\2\u0778"+
		"\u077a\5p9\2\u0779\u0778\3\2\2\2\u077a\u077d\3\2\2\2\u077b\u0779\3\2\2"+
		"\2\u077b\u077c\3\2\2\2\u077c\u0786\3\2\2\2\u077d\u077b\3\2\2\2\u077e\u0783"+
		"\5n8\2\u077f\u0780\7\u03b5\2\2\u0780\u0782\5n8\2\u0781\u077f\3\2\2\2\u0782"+
		"\u0785\3\2\2\2\u0783\u0781\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0787\3\2"+
		"\2\2\u0785\u0783\3\2\2\2\u0786\u077e\3\2\2\2\u0786\u0787\3\2\2\2\u0787"+
		"\u07b9\3\2\2\2\u0788\u0789\7o\2\2\u0789\u078a\5\u0200\u0101\2\u078a\u078b"+
		"\7\u00a3\2\2\u078b\u078c\7D\2\2\u078c\u078d\7\u03b3\2\2\u078d\u0792\5"+
		"l\67\2\u078e\u078f\7\u03b5\2\2\u078f\u0791\5l\67\2\u0790\u078e\3\2\2\2"+
		"\u0791\u0794\3\2\2\2\u0792\u0790\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0795"+
		"\3\2\2\2\u0794\u0792\3\2\2\2\u0795\u0799\7\u03b4\2\2\u0796\u0798\5p9\2"+
		"\u0797\u0796\3\2\2\2\u0798\u079b\3\2\2\2\u0799\u0797\3\2\2\2\u0799\u079a"+
		"\3\2\2\2\u079a\u07a4\3\2\2\2\u079b\u0799\3\2\2\2\u079c\u07a1\5n8\2\u079d"+
		"\u079e\7\u03b5\2\2\u079e\u07a0\5n8\2\u079f\u079d\3\2\2\2\u07a0\u07a3\3"+
		"\2\2\2\u07a1\u079f\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a5\3\2\2\2\u07a3"+
		"\u07a1\3\2\2\2\u07a4\u079c\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07b9\3\2"+
		"\2\2\u07a6\u07a7\7o\2\2\u07a7\u07ab\5\u0200\u0101\2\u07a8\u07aa\5p9\2"+
		"\u07a9\u07a8\3\2\2\2\u07aa\u07ad\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab\u07ac"+
		"\3\2\2\2\u07ac\u07b6\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ae\u07b3\5n8\2\u07af"+
		"\u07b0\7\u03b5\2\2\u07b0\u07b2\5n8\2\u07b1\u07af\3\2\2\2\u07b2\u07b5\3"+
		"\2\2\2\u07b3\u07b1\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5"+
		"\u07b3\3\2\2\2\u07b6\u07ae\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b9\3\2"+
		"\2\2\u07b8\u074b\3\2\2\2\u07b8\u076a\3\2\2\2\u07b8\u0788\3\2\2\2\u07b8"+
		"\u07a6\3\2\2\2\u07b9i\3\2\2\2\u07ba\u07be\5\u0212\u010a\2\u07bb\u07be"+
		"\7`\2\2\u07bc\u07be\5\u024a\u0126\2\u07bd\u07ba\3\2\2\2\u07bd\u07bb\3"+
		"\2\2\2\u07bd\u07bc\3\2\2\2\u07bek\3\2\2\2\u07bf\u07c0\7\u03b3\2\2\u07c0"+
		"\u07c3\5j\66\2\u07c1\u07c2\7\u03b5\2\2\u07c2\u07c4\5j\66\2\u07c3\u07c1"+
		"\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6"+
		"\u07c7\3\2\2\2\u07c7\u07c8\7\u03b4\2\2\u07c8m\3\2\2\2\u07c9\u07ca\7\u0200"+
		"\2\2\u07ca\u07ce\5\u0200\u0101\2\u07cb\u07cd\5p9\2\u07cc\u07cb\3\2\2\2"+
		"\u07cd\u07d0\3\2\2\2\u07ce\u07cc\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cfo\3"+
		"\2\2\2\u07d0\u07ce\3\2\2\2\u07d1\u07d3\7\u01fd\2\2\u07d2\u07d1\3\2\2\2"+
		"\u07d2\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\7\u0137\2\2\u07d5"+
		"\u07d7\7\u03aa\2\2\u07d6\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8"+
		"\3\2\2\2\u07d8\u07ff\5\u01f6\u00fc\2\u07d9\u07db\7\u0116\2\2\u07da\u07dc"+
		"\7\u03aa\2\2\u07db\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07dd\3\2\2"+
		"\2\u07dd\u07ff\7\u03c2\2\2\u07de\u07df\7\u0124\2\2\u07df\u07e1\7\u012b"+
		"\2\2\u07e0\u07e2\7\u03aa\2\2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2"+
		"\u07e3\3\2\2\2\u07e3\u07ff\7\u03c2\2\2\u07e4\u07e5\7E\2\2\u07e5\u07e7"+
		"\7\u012b\2\2\u07e6\u07e8\7\u03aa\2\2\u07e7\u07e6\3\2\2\2\u07e7\u07e8\3"+
		"\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ff\7\u03c2\2\2\u07ea\u07ec\7\u018c"+
		"\2\2\u07eb\u07ed\7\u03aa\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed"+
		"\u07ee\3\2\2\2\u07ee\u07ff\5\u0206\u0104\2\u07ef\u07f1\7\u0194\2\2\u07f0"+
		"\u07f2\7\u03aa\2\2\u07f1\u07f0\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3"+
		"\3\2\2\2\u07f3\u07ff\5\u0206\u0104\2\u07f4\u07f6\7\u0205\2\2\u07f5\u07f7"+
		"\7\u03aa\2\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f8\3\2\2"+
		"\2\u07f8\u07ff\5\u0200\u0101\2\u07f9\u07fb\7\u019f\2\2\u07fa\u07fc\7\u03aa"+
		"\2\2\u07fb\u07fa\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd"+
		"\u07ff\5\u0200\u0101\2\u07fe\u07d2\3\2\2\2\u07fe\u07d9\3\2\2\2\u07fe\u07de"+
		"\3\2\2\2\u07fe\u07e4\3\2\2\2\u07fe\u07ea\3\2\2\2\u07fe\u07ef\3\2\2\2\u07fe"+
		"\u07f4\3\2\2\2\u07fe\u07f9\3\2\2\2\u07ffq\3\2\2\2\u0800\u0801\7\t\2\2"+
		"\u0801\u0803\t\2\2\2\u0802\u0804\5\u0200\u0101\2\u0803\u0802\3\2\2\2\u0803"+
		"\u0804\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0807\5\62\32\2\u0806\u0805\3"+
		"\2\2\2\u0807\u0808\3\2\2\2\u0808\u0806\3\2\2\2\u0808\u0809\3\2\2\2\u0809"+
		"\u0813\3\2\2\2\u080a\u080b\7\t\2\2\u080b\u080c\t\2\2\2\u080c\u080d\5\u0200"+
		"\u0101\2\u080d\u080e\7\u0213\2\2\u080e\u080f\7\u0124\2\2\u080f\u0810\7"+
		"\u012b\2\2\u0810\u0811\7\u0199\2\2\u0811\u0813\3\2\2\2\u0812\u0800\3\2"+
		"\2\2\u0812\u080a\3\2\2\2\u0813s\3\2\2\2\u0814\u0816\7\t\2\2\u0815\u0817"+
		"\5\64\33\2\u0816\u0815\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818\3\2\2\2"+
		"\u0818\u0819\7\u013d\2\2\u0819\u081d\5\u01e6\u00f4\2\u081a\u081b\7f\2"+
		"\2\u081b\u081c\7\u01df\2\2\u081c\u081e\5\66\34\2\u081d\u081a\3\2\2\2\u081d"+
		"\u081e\3\2\2\2\u081e\u0825\3\2\2\2\u081f\u0820\7f\2\2\u0820\u0822\7\u0119"+
		"\2\2\u0821\u0823\7c\2\2\u0822\u0821\3\2\2\2\u0822\u0823\3\2\2\2\u0823"+
		"\u0824\3\2\2\2\u0824\u0826\7\u01ba\2\2\u0825\u081f\3\2\2\2\u0825\u0826"+
		"\3\2\2\2\u0826\u082a\3\2\2\2\u0827\u0828\7y\2\2\u0828\u0829\7\u0096\2"+
		"\2\u0829\u082b\5\u01e6\u00f4\2\u082a\u0827\3\2\2\2\u082a\u082b\3\2\2\2"+
		"\u082b\u082d\3\2\2\2\u082c\u082e\5> \2\u082d\u082c\3\2\2\2\u082d\u082e"+
		"\3\2\2\2\u082e\u0831\3\2\2\2\u082f\u0830\7\u0116\2\2\u0830\u0832\7\u03c2"+
		"\2\2\u0831\u082f\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0835\3\2\2\2\u0833"+
		"\u0834\7\u012f\2\2\u0834\u0836\5\u0158\u00ad\2\u0835\u0833\3\2\2\2\u0835"+
		"\u0836\3\2\2\2\u0836u\3\2\2\2\u0837\u0838\7\t\2\2\u0838\u0839\7\u0151"+
		"\2\2\u0839\u083d\5\u01e6\u00f4\2\u083a\u083c\5H%\2\u083b\u083a\3\2\2\2"+
		"\u083c\u083f\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2\2\2\u083ew\3"+
		"\2\2\2\u083f\u083d\3\2\2\2\u0840\u0841\7\t\2\2\u0841\u0842\7\u0163\2\2"+
		"\u0842\u0843\7\u01da\2\2\u0843\u0844\7\u0265\2\2\u0844\u0845\7\u0175\2"+
		"\2\u0845\u0846\7O\2\2\u0846y\3\2\2\2\u0847\u0848\7\t\2\2\u0848\u0849\7"+
		"\u0173\2\2\u0849\u084a\7?\2\2\u084a\u084b\5\u0200\u0101\2\u084b\u084c"+
		"\7\7\2\2\u084c\u084d\7\u020e\2\2\u084d\u0853\7\u03c2\2\2\u084e\u0850\7"+
		"\u015f\2\2\u084f\u0851\7\u03aa\2\2\u0850\u084f\3\2\2\2\u0850\u0851\3\2"+
		"\2\2\u0851\u0852\3\2\2\2\u0852\u0854\5\u0208\u0105\2\u0853\u084e\3\2\2"+
		"\2\u0853\u0854\3\2\2\2\u0854\u0856\3\2\2\2\u0855\u0857\7\u021b\2\2\u0856"+
		"\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u085a\7\u0137"+
		"\2\2\u0859\u085b\7\u03aa\2\2\u085a\u0859\3\2\2\2\u085a\u085b\3\2\2\2\u085b"+
		"\u085c\3\2\2\2\u085c\u085d\5\u01f6\u00fc\2\u085d{\3\2\2\2\u085e\u085f"+
		"\7\t\2\2\u085f\u0860\7q\2\2\u0860\u0864\5\u01e6\u00f4\2\u0861\u0863\5"+
		"H%\2\u0862\u0861\3\2\2\2\u0863\u0866\3\2\2\2\u0864\u0862\3\2\2\2\u0864"+
		"\u0865\3\2\2\2\u0865}\3\2\2\2\u0866\u0864\3\2\2\2\u0867\u0868\7\t\2\2"+
		"\u0868\u0869\7\u01e1\2\2\u0869\u086a\5\u0200\u0101\2\u086a\u086b\7\u01aa"+
		"\2\2\u086b\u086c\7\u03b3\2\2\u086c\u0871\5J&\2\u086d\u086e\7\u03b5\2\2"+
		"\u086e\u0870\5J&\2\u086f\u086d\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f"+
		"\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0874\3\2\2\2\u0873\u0871\3\2\2\2\u0874"+
		"\u0875\7\u03b4\2\2\u0875\177\3\2\2\2\u0876\u0878\7\t\2\2\u0877\u0879\t"+
		"\3\2\2\u0878\u0877\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a"+
		"\u087c\7C\2\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\3\2"+
		"\2\2\u087d\u087e\7\u0093\2\2\u087e\u087f\5\u01e8\u00f5\2\u087f\u0884\5"+
		"\u0086D\2\u0880\u0881\7\u03b5\2\2\u0881\u0883\5\u0086D\2\u0882\u0880\3"+
		"\2\2\2\u0883\u0886\3\2\2\2\u0884\u0882\3\2\2\2\u0884\u0885\3\2\2\2\u0885"+
		"\u0888\3\2\2\2\u0886\u0884\3\2\2\2\u0887\u0889\5b\62\2\u0888\u0887\3\2"+
		"\2\2\u0888\u0889\3\2\2\2\u0889\u0081\3\2\2\2\u088a\u088b\7\t\2\2\u088b"+
		"\u088c\7\u0205\2\2\u088c\u088d\5\u0200\u0101\2\u088d\u088e\t\33\2\2\u088e"+
		"\u088f\7\u0125\2\2\u088f\u0893\7\u03c2\2\2\u0890\u0891\7\u015f\2\2\u0891"+
		"\u0892\7\u03aa\2\2\u0892\u0894\5\u0208\u0105\2\u0893\u0890\3\2\2\2\u0893"+
		"\u0894\3\2\2\2\u0894\u0896\3\2\2\2\u0895\u0897\7\u021b\2\2\u0896\u0895"+
		"\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u089a\7\u0137\2"+
		"\2\u0899\u089b\7\u03aa\2\2\u089a\u0899\3\2\2\2\u089a\u089b\3\2\2\2\u089b"+
		"\u089c\3\2\2\2\u089c\u089d\5\u01f6\u00fc\2\u089d\u0083\3\2\2\2\u089e\u08a2"+
		"\7\t\2\2\u089f\u08a0\7\u00fa\2\2\u08a0\u08a1\7\u03aa\2\2\u08a1\u08a3\t"+
		"\f\2\2\u08a2\u089f\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a5\3\2\2\2\u08a4"+
		"\u08a6\5\64\33\2\u08a5\u08a4\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08aa\3"+
		"\2\2\2\u08a7\u08a8\7\u0089\2\2\u08a8\u08a9\7\u01e0\2\2\u08a9\u08ab\t\r"+
		"\2\2\u08aa\u08a7\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac"+
		"\u08ad\7\u021a\2\2\u08ad\u08b2\5\u01e6\u00f4\2\u08ae\u08af\7\u03b3\2\2"+
		"\u08af\u08b0\5\u021e\u0110\2\u08b0\u08b1\7\u03b4\2\2\u08b1\u08b3\3\2\2"+
		"\2\u08b2\u08ae\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5"+
		"\7\f\2\2\u08b5\u08bc\5\u00b4[\2\u08b6\u08b8\7\u00a7\2\2\u08b7\u08b9\t"+
		"\16\2\2\u08b8\u08b7\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba"+
		"\u08bb\7\30\2\2\u08bb\u08bd\7h\2\2\u08bc\u08b6\3\2\2\2\u08bc\u08bd\3\2"+
		"\2\2\u08bd\u0085\3\2\2\2\u08be\u09f1\5^\60\2\u08bf\u08c1\7\7\2\2\u08c0"+
		"\u08c2\7\32\2\2\u08c1\u08c0\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3\3"+
		"\2\2\2\u08c3\u08c4\5\u0200\u0101\2\u08c4\u08c8\5P)\2\u08c5\u08c9\7\u014b"+
		"\2\2\u08c6\u08c7\7\u00f8\2\2\u08c7\u08c9\5\u0200\u0101\2\u08c8\u08c5\3"+
		"\2\2\2\u08c8\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u09f1\3\2\2\2\u08ca"+
		"\u08cc\7\7\2\2\u08cb\u08cd\7\32\2\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3"+
		"\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf\7\u03b3\2\2\u08cf\u08d0\5\u0200"+
		"\u0101\2\u08d0\u08d7\5P)\2\u08d1\u08d2\7\u03b5\2\2\u08d2\u08d3\5\u0200"+
		"\u0101\2\u08d3\u08d4\5P)\2\u08d4\u08d6\3\2\2\2\u08d5\u08d1\3\2\2\2\u08d6"+
		"\u08d9\3\2\2\2\u08d7\u08d5\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08da\3\2"+
		"\2\2\u08d9\u08d7\3\2\2\2\u08da\u08db\7\u03b4\2\2\u08db\u09f1\3\2\2\2\u08dc"+
		"\u08dd\7\7\2\2\u08dd\u08df\t\23\2\2\u08de\u08e0\5\u0200\u0101\2\u08df"+
		"\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e2\3\2\2\2\u08e1\u08e3\5@"+
		"!\2\u08e2\u08e1\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4"+
		"\u08e8\5\u0222\u0112\2\u08e5\u08e7\5B\"\2\u08e6\u08e5\3\2\2\2\u08e7\u08ea"+
		"\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u09f1\3\2\2\2\u08ea"+
		"\u08e8\3\2\2\2\u08eb\u08f0\7\7\2\2\u08ec\u08ee\7\34\2\2\u08ed\u08ef\5"+
		"\u0200\u0101\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f1\3\2"+
		"\2\2\u08f0\u08ec\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2"+
		"\u08f3\7p\2\2\u08f3\u08f5\7O\2\2\u08f4\u08f6\5@!\2\u08f5\u08f4\3\2\2\2"+
		"\u08f5\u08f6\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08fb\5\u0222\u0112\2\u08f8"+
		"\u08fa\5B\"\2\u08f9\u08f8\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb\u08f9\3\2"+
		"\2\2\u08fb\u08fc\3\2\2\2\u08fc\u09f1\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fe"+
		"\u0903\7\7\2\2\u08ff\u0901\7\34\2\2\u0900\u0902\5\u0200\u0101\2\u0901"+
		"\u0900\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0904\3\2\2\2\u0903\u08ff\3\2"+
		"\2\2\u0903\u0904\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0907\7\u009c\2\2\u0906"+
		"\u0908\t\23\2\2\u0907\u0906\3\2\2\2\u0907\u0908\3\2\2\2\u0908\u090a\3"+
		"\2\2\2\u0909\u090b\5\u0200\u0101\2\u090a\u0909\3\2\2\2\u090a\u090b\3\2"+
		"\2\2\u090b\u090d\3\2\2\2\u090c\u090e\5@!\2\u090d\u090c\3\2\2\2\u090d\u090e"+
		"\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0913\5\u0222\u0112\2\u0910\u0912\5"+
		"B\"\2\u0911\u0910\3\2\2\2\u0912\u0915\3\2\2\2\u0913\u0911\3\2\2\2\u0913"+
		"\u0914\3\2\2\2\u0914\u09f1\3\2\2\2\u0915\u0913\3\2\2\2\u0916\u0917\7\7"+
		"\2\2\u0917\u0919\t\25\2\2\u0918\u091a\t\23\2\2\u0919\u0918\3\2\2\2\u0919"+
		"\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u091d\5\u0200\u0101\2\u091c\u091b"+
		"\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u0922\5\u0222\u0112"+
		"\2\u091f\u0921\5B\"\2\u0920\u091f\3\2\2\2\u0921\u0924\3\2\2\2\u0922\u0920"+
		"\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u09f1\3\2\2\2\u0924\u0922\3\2\2\2\u0925"+
		"\u092a\7\7\2\2\u0926\u0928\7\34\2\2\u0927\u0929\5\u0200\u0101\2\u0928"+
		"\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092b\3\2\2\2\u092a\u0926\3\2"+
		"\2\2\u092a\u092b\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u092d\7;\2\2\u092d"+
		"\u092f\7O\2\2\u092e\u0930\5\u0200\u0101\2\u092f\u092e\3\2\2\2\u092f\u0930"+
		"\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0932\5\u0222\u0112\2\u0932\u0933\5"+
		"V,\2\u0933\u09f1\3\2\2\2\u0934\u0936\7\u00fa\2\2\u0935\u0937\7\u03aa\2"+
		"\2\u0936\u0935\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u09f1"+
		"\t\5\2\2\u0939\u093b\7\t\2\2\u093a\u093c\7\32\2\2\u093b\u093a\3\2\2\2"+
		"\u093b\u093c\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u0943\5\u0200\u0101\2\u093e"+
		"\u093f\7\u0085\2\2\u093f\u0940\7&\2\2\u0940\u0944\5\u022e\u0118\2\u0941"+
		"\u0942\7.\2\2\u0942\u0944\7&\2\2\u0943\u093e\3\2\2\2\u0943\u0941\3\2\2"+
		"\2\u0944\u09f1\3\2\2\2\u0945\u0947\7\26\2\2\u0946\u0948\7\32\2\2\u0947"+
		"\u0946\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094a\5\u0200"+
		"\u0101\2\u094a\u094b\5\u0200\u0101\2\u094b\u094f\5P)\2\u094c\u0950\7\u014b"+
		"\2\2\u094d\u094e\7\u00f8\2\2\u094e\u0950\5\u0200\u0101\2\u094f\u094c\3"+
		"\2\2\2\u094f\u094d\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u09f1\3\2\2\2\u0951"+
		"\u0953\7Z\2\2\u0952\u0954\7\u03aa\2\2\u0953\u0952\3\2\2\2\u0953\u0954"+
		"\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u09f1\t\6\2\2\u0956\u0958\7\u0196\2"+
		"\2\u0957\u0959\7\32\2\2\u0958\u0957\3\2\2\2\u0958\u0959\3\2\2\2\u0959"+
		"\u095a\3\2\2\2\u095a\u095b\5\u0200\u0101\2\u095b\u095f\5P)\2\u095c\u0960"+
		"\7\u014b\2\2\u095d\u095e\7\u00f8\2\2\u095e\u0960\5\u0200\u0101\2\u095f"+
		"\u095c\3\2\2\2\u095f\u095d\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u09f1\3\2"+
		"\2\2\u0961\u0963\7.\2\2\u0962\u0964\7\32\2\2\u0963\u0962\3\2\2\2\u0963"+
		"\u0964\3\2\2\2\u0964\u0965\3\2\2\2\u0965\u09f1\5\u0200\u0101\2\u0966\u0967"+
		"\7.\2\2\u0967\u0968\7p\2\2\u0968\u09f1\7O\2\2\u0969\u096a\7.\2\2\u096a"+
		"\u096b\t\23\2\2\u096b\u09f1\5\u0200\u0101\2\u096c\u096d\7.\2\2\u096d\u096e"+
		"\7;\2\2\u096e\u096f\7O\2\2\u096f\u09f1\5\u0200\u0101\2\u0970\u0971\7\u012c"+
		"\2\2\u0971\u09f1\7P\2\2\u0972\u0973\7\u0133\2\2\u0973\u09f1\7P\2\2\u0974"+
		"\u0976\7y\2\2\u0975\u0977\t\34\2\2\u0976\u0975\3\2\2\2\u0976\u0977\3\2"+
		"\2\2\u0977\u0978\3\2\2\2\u0978\u09f1\5\u0200\u0101\2\u0979\u097a\7k\2"+
		"\2\u097a\u097b\7\21\2\2\u097b\u09f1\5\u021e\u0110\2\u097c\u097d\7\36\2"+
		"\2\u097d\u097e\7\u0096\2\2\u097e\u097f\7\27\2\2\u097f\u0980\7\u0085\2"+
		"\2\u0980\u0983\5\u01f2\u00fa\2\u0981\u0982\7\31\2\2\u0982\u0984\5\u01f4"+
		"\u00fb\2\u0983\u0981\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u09f1\3\2\2\2\u0985"+
		"\u0987\7&\2\2\u0986\u0985\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0988\3\2"+
		"\2\2\u0988\u0989\7\27\2\2\u0989\u098a\7\u0085\2\2\u098a\u098b\7\u03aa"+
		"\2\2\u098b\u098f\5\u01f2\u00fa\2\u098c\u098d\7\31\2\2\u098d\u098e\7\u03aa"+
		"\2\2\u098e\u0990\5\u01f4\u00fb\2\u098f\u098c\3\2\2\2\u098f\u0990\3\2\2"+
		"\2\u0990\u09f1\3\2\2\2\u0991\u0992\7\u012d\2\2\u0992\u09f1\7\u0205\2\2"+
		"\u0993\u0994\7\u015d\2\2\u0994\u09f1\7\u0205\2\2\u0995\u09f1\7:\2\2\u0996"+
		"\u0997\t\35\2\2\u0997\u09f1\7\u0217\2\2\u0998\u0999\7\7\2\2\u0999\u099a"+
		"\7o\2\2\u099a\u09f1\5h\65\2\u099b\u099c\7.\2\2\u099c\u099d\7o\2\2\u099d"+
		"\u09f1\5\u021e\u0110\2\u099e\u099f\7\u012d\2\2\u099f\u09a2\7o\2\2\u09a0"+
		"\u09a3\5\u021e\u0110\2\u09a1\u09a3\7\b\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a1"+
		"\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09f1\7\u0205\2\2\u09a5\u09a6\7\u015d"+
		"\2\2\u09a6\u09a9\7o\2\2\u09a7\u09aa\5\u021e\u0110\2\u09a8\u09aa\7\b\2"+
		"\2\u09a9\u09a7\3\2\2\2\u09a9\u09a8\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09f1"+
		"\7\u0205\2\2\u09ac\u09ad\7\u020c\2\2\u09ad\u09b0\7o\2\2\u09ae\u09b1\5"+
		"\u021e\u0110\2\u09af\u09b1\7\b\2\2\u09b0\u09ae\3\2\2\2\u09b0\u09af\3\2"+
		"\2\2\u09b1\u09f1\3\2\2\2\u09b2\u09b3\7\u0112\2\2\u09b3\u09b4\7o\2\2\u09b4"+
		"\u09f1\5\u0206\u0104\2\u09b5\u09b6\7\u01cb\2\2\u09b6\u09b7\7o\2\2\u09b7"+
		"\u09b8\5\u021e\u0110\2\u09b8\u09b9\7K\2\2\u09b9\u09ba\7\u03b3\2\2\u09ba"+
		"\u09bf\5h\65\2\u09bb\u09bc\7\u03b5\2\2\u09bc\u09be\5h\65\2\u09bd\u09bb"+
		"\3\2\2\2\u09be\u09c1\3\2\2\2\u09bf\u09bd\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0"+
		"\u09c2\3\2\2\2\u09c1\u09bf\3\2\2\2\u09c2\u09c3\7\u03b4\2\2\u09c3\u09f1"+
		"\3\2\2\2\u09c4\u09c5\7\u0140\2\2\u09c5\u09c6\7o\2\2\u09c6\u09c7\5\u0200"+
		"\u0101\2\u09c7\u09c8\7\u00a7\2\2\u09c8\u09c9\7\u0093\2\2\u09c9\u09cc\5"+
		"\u01e8\u00f5\2\u09ca\u09cb\t\35\2\2\u09cb\u09cd\7\u0217\2\2\u09cc\u09ca"+
		"\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09f1\3\2\2\2\u09ce\u09cf\7\n\2\2\u09cf"+
		"\u09d2\7o\2\2\u09d0\u09d3\5\u021e\u0110\2\u09d1\u09d3\7\b\2\2\u09d2\u09d0"+
		"\3\2\2\2\u09d2\u09d1\3\2\2\2\u09d3\u09f1\3\2\2\2\u09d4\u09d5\7\30\2\2"+
		"\u09d5\u09d8\7o\2\2\u09d6\u09d9\5\u021e\u0110\2\u09d7\u09d9\7\b\2\2\u09d8"+
		"\u09d6\3\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u09f1\3\2\2\2\u09da\u09db\7g"+
		"\2\2\u09db\u09de\7o\2\2\u09dc\u09df\5\u021e\u0110\2\u09dd\u09df\7\b\2"+
		"\2\u09de\u09dc\3\2\2\2\u09de\u09dd\3\2\2\2\u09df\u09f1\3\2\2\2\u09e0\u09e1"+
		"\7\u01c2\2\2\u09e1\u09e4\7o\2\2\u09e2\u09e5\5\u021e\u0110\2\u09e3\u09e5"+
		"\7\b\2\2\u09e4\u09e2\3\2\2\2\u09e4\u09e3\3\2\2\2\u09e5\u09f1\3\2\2\2\u09e6"+
		"\u09e7\7\u01cc\2\2\u09e7\u09ea\7o\2\2\u09e8\u09eb\5\u021e\u0110\2\u09e9"+
		"\u09eb\7\b\2\2\u09ea\u09e8\3\2\2\2\u09ea\u09e9\3\2\2\2\u09eb\u09f1\3\2"+
		"\2\2\u09ec\u09ed\7\u01ca\2\2\u09ed\u09f1\7\u01b0\2\2\u09ee\u09ef\7\u0213"+
		"\2\2\u09ef\u09f1\7\u01b0\2\2\u09f0\u08be\3\2\2\2\u09f0\u08bf\3\2\2\2\u09f0"+
		"\u08ca\3\2\2\2\u09f0\u08dc\3\2\2\2\u09f0\u08eb\3\2\2\2\u09f0\u08fe\3\2"+
		"\2\2\u09f0\u0916\3\2\2\2\u09f0\u0925\3\2\2\2\u09f0\u0934\3\2\2\2\u09f0"+
		"\u0939\3\2\2\2\u09f0\u0945\3\2\2\2\u09f0\u0951\3\2\2\2\u09f0\u0956\3\2"+
		"\2\2\u09f0\u0961\3\2\2\2\u09f0\u0966\3\2\2\2\u09f0\u0969\3\2\2\2\u09f0"+
		"\u096c\3\2\2\2\u09f0\u0970\3\2\2\2\u09f0\u0972\3\2\2\2\u09f0\u0974\3\2"+
		"\2\2\u09f0\u0979\3\2\2\2\u09f0\u097c\3\2\2\2\u09f0\u0986\3\2\2\2\u09f0"+
		"\u0991\3\2\2\2\u09f0\u0993\3\2\2\2\u09f0\u0995\3\2\2\2\u09f0\u0996\3\2"+
		"\2\2\u09f0\u0998\3\2\2\2\u09f0\u099b\3\2\2\2\u09f0\u099e\3\2\2\2\u09f0"+
		"\u09a5\3\2\2\2\u09f0\u09ac\3\2\2\2\u09f0\u09b2\3\2\2\2\u09f0\u09b5\3\2"+
		"\2\2\u09f0\u09c4\3\2\2\2\u09f0\u09ce\3\2\2\2\u09f0\u09d4\3\2\2\2\u09f0"+
		"\u09da\3\2\2\2\u09f0\u09e0\3\2\2\2\u09f0\u09e6\3\2\2\2\u09f0\u09ec\3\2"+
		"\2\2\u09f0\u09ee\3\2\2\2\u09f1\u0087\3\2\2\2\u09f2\u09f3\7.\2\2\u09f3"+
		"\u09f5\t\2\2\2\u09f4\u09f6\5\u0232\u011a\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6"+
		"\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\5\u0200\u0101\2\u09f8\u0089\3"+
		"\2\2\2\u09f9\u09fa\7.\2\2\u09fa\u09fc\7\u013d\2\2\u09fb\u09fd\5\u0232"+
		"\u011a\2\u09fc\u09fb\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09fe\3\2\2\2\u09fe"+
		"\u09ff\5\u01e6\u00f4\2\u09ff\u008b\3\2\2\2\u0a00\u0a01\7.\2\2\u0a01\u0a03"+
		"\7E\2\2\u0a02\u0a04\t\3\2\2\u0a03\u0a02\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04"+
		"\u0a05\3\2\2\2\u0a05\u0a06\5\u0200\u0101\2\u0a06\u0a07\7f\2\2\u0a07\u0a0d"+
		"\5\u01e8\u00f5\2\u0a08\u0a0a\7\u00fa\2\2\u0a09\u0a0b\7\u03aa\2\2\u0a0a"+
		"\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0e\t\5"+
		"\2\2\u0a0d\u0a08\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a14\3\2\2\2\u0a0f"+
		"\u0a11\7Z\2\2\u0a10\u0a12\7\u03aa\2\2\u0a11\u0a10\3\2\2\2\u0a11\u0a12"+
		"\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a15\t\6\2\2\u0a14\u0a0f\3\2\2\2\u0a14"+
		"\u0a15\3\2\2\2\u0a15\u008d\3\2\2\2\u0a16\u0a17\7.\2\2\u0a17\u0a18\7\u0173"+
		"\2\2\u0a18\u0a19\7?\2\2\u0a19\u0a1a\5\u0200\u0101\2\u0a1a\u0a1b\7\u0137"+
		"\2\2\u0a1b\u0a1c\7\u03aa\2\2\u0a1c\u0a1d\5\u01f6\u00fc\2\u0a1d\u008f\3"+
		"\2\2\2\u0a1e\u0a1f\7.\2\2\u0a1f\u0a21\7q\2\2\u0a20\u0a22\5\u0232\u011a"+
		"\2\u0a21\u0a20\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u0a24"+
		"\5\u01e6\u00f4\2\u0a24\u0091\3\2\2\2\u0a25\u0a26\7.\2\2\u0a26\u0a28\7"+
		"\u0151\2\2\u0a27\u0a29\5\u0232\u011a\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29"+
		"\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\5\u01e6\u00f4\2\u0a2b\u0093\3"+
		"\2\2\2\u0a2c\u0a2d\7.\2\2\u0a2d\u0a2f\7\u01e1\2\2\u0a2e\u0a30\5\u0232"+
		"\u011a\2\u0a2f\u0a2e\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31"+
		"\u0a32\5\u0200\u0101\2\u0a32\u0095\3\2\2\2\u0a33\u0a35\7.\2\2\u0a34\u0a36"+
		"\7\u0206\2\2\u0a35\u0a34\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a37\3\2\2"+
		"\2\u0a37\u0a39\7\u0093\2\2\u0a38\u0a3a\5\u0232\u011a\2\u0a39\u0a38\3\2"+
		"\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3d\5\u0220\u0111"+
		"\2\u0a3c\u0a3e\t\36\2\2\u0a3d\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e"+
		"\u0097\3\2\2\2\u0a3f\u0a40\7.\2\2\u0a40\u0a41\7\u0205\2\2\u0a41\u0a47"+
		"\5\u0200\u0101\2\u0a42\u0a44\7\u0137\2\2\u0a43\u0a45\7\u03aa\2\2\u0a44"+
		"\u0a43\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a48\5\u01f6"+
		"\u00fc\2\u0a47\u0a42\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0099\3\2\2\2\u0a49"+
		"\u0a4a\7.\2\2\u0a4a\u0a4c\7\u0098\2\2\u0a4b\u0a4d\5\u0232\u011a\2\u0a4c"+
		"\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a4f\5\u01e6"+
		"\u00f4\2\u0a4f\u009b\3\2\2\2\u0a50\u0a51\7.\2\2\u0a51\u0a53\7\u021a\2"+
		"\2\u0a52\u0a54\5\u0232\u011a\2\u0a53\u0a52\3\2\2\2\u0a53\u0a54\3\2\2\2"+
		"\u0a54\u0a55\3\2\2\2\u0a55\u0a5a\5\u01e6\u00f4\2\u0a56\u0a57\7\u03b5\2"+
		"\2\u0a57\u0a59\5\u01e6\u00f4\2\u0a58\u0a56\3\2\2\2\u0a59\u0a5c\3\2\2\2"+
		"\u0a5a\u0a58\3\2\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b\u0a5e\3\2\2\2\u0a5c\u0a5a"+
		"\3\2\2\2\u0a5d\u0a5f\t\36\2\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2"+
		"\u0a5f\u009d\3\2\2\2\u0a60\u0a61\7y\2\2\u0a61\u0a62\7\u0093\2\2\u0a62"+
		"\u0a67\5\u00a0Q\2\u0a63\u0a64\7\u03b5\2\2\u0a64\u0a66\5\u00a0Q\2\u0a65"+
		"\u0a63\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67\u0a65\3\2\2\2\u0a67\u0a68\3\2"+
		"\2\2\u0a68\u009f\3\2\2\2\u0a69\u0a67\3\2\2\2\u0a6a\u0a6b\5\u01e8\u00f5"+
		"\2\u0a6b\u0a6c\7\u0096\2\2\u0a6c\u0a6d\5\u01e8\u00f5\2\u0a6d\u00a1\3\2"+
		"\2\2\u0a6e\u0a70\7\u020c\2\2\u0a6f\u0a71\7\u0093\2\2\u0a70\u0a6f\3\2\2"+
		"\2\u0a70\u0a71\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a73\5\u01e8\u00f5\2"+
		"\u0a73\u00a3\3\2\2\2\u0a74\u0a75\7\22\2\2\u0a75\u0a7c\5\u01e6\u00f4\2"+
		"\u0a76\u0a79\7\u03b3\2\2\u0a77\u0a7a\5\u0228\u0115\2\u0a78\u0a7a\5\u0224"+
		"\u0113\2\u0a79\u0a77\3\2\2\2\u0a79\u0a78\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a"+
		"\u0a7b\3\2\2\2\u0a7b\u0a7d\7\u03b4\2\2\u0a7c\u0a76\3\2\2\2\u0a7c\u0a7d"+
		"\3\2\2\2\u0a7d\u00a5\3\2\2\2\u0a7e\u0a81\5\u00c0a\2\u0a7f\u0a81\5\u00c2"+
		"b\2\u0a80\u0a7e\3\2\2\2\u0a80\u0a7f\3\2\2\2\u0a81\u00a7\3\2\2\2\u0a82"+
		"\u0a83\7\u012f\2\2\u0a83\u0a84\5\u0224\u0113\2\u0a84\u00a9\3\2\2\2\u0a85"+
		"\u0a8a\5\u00c4c\2\u0a86\u0a8a\5\u00c6d\2\u0a87\u0a8a\5\u00c8e\2\u0a88"+
		"\u0a8a\5\u00caf\2\u0a89\u0a85\3\2\2\2\u0a89\u0a86\3\2\2\2\u0a89\u0a87"+
		"\3\2\2\2\u0a89\u0a88\3\2\2\2\u0a8a\u00ab\3\2\2\2\u0a8b\u0a8d\7I\2\2\u0a8c"+
		"\u0a8e\t\37\2\2\u0a8d\u0a8c\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a90\3"+
		"\2\2\2\u0a8f\u0a91\7C\2\2\u0a90\u0a8f\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91"+
		"\u0a93\3\2\2\2\u0a92\u0a94\7K\2\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94\3\2"+
		"\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a9b\5\u01e8\u00f5\2\u0a96\u0a97\7o\2"+
		"\2\u0a97\u0a98\7\u03b3\2\2\u0a98\u0a99\5\u021e\u0110\2\u0a99\u0a9a\7\u03b4"+
		"\2\2\u0a9a\u0a9c\3\2\2\2\u0a9b\u0a96\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c"+
		"\u0aad\3\2\2\2\u0a9d\u0a9e\7\u03b3\2\2\u0a9e\u0a9f\5\u021e\u0110\2\u0a9f"+
		"\u0aa0\7\u03b4\2\2\u0aa0\u0aa2\3\2\2\2\u0aa1\u0a9d\3\2\2\2\u0aa1\u0aa2"+
		"\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aae\5\u00b8]\2\u0aa4\u0aa5\7\u0085"+
		"\2\2\u0aa5\u0aaa\5\u00ba^\2\u0aa6\u0aa7\7\u03b5\2\2\u0aa7\u0aa9\5\u00ba"+
		"^\2\u0aa8\u0aa6\3\2\2\2\u0aa9\u0aac\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aaa"+
		"\u0aab\3\2\2\2\u0aab\u0aae\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aad\u0aa1\3\2"+
		"\2\2\u0aad\u0aa4\3\2\2\2\u0aae\u0abb\3\2\2\2\u0aaf\u0ab0\7f\2\2\u0ab0"+
		"\u0ab1\7\u0131\2\2\u0ab1\u0ab2\7O\2\2\u0ab2\u0ab3\7\u009f\2\2\u0ab3\u0ab8"+
		"\5\u00ba^\2\u0ab4\u0ab5\7\u03b5\2\2\u0ab5\u0ab7\5\u00ba^\2\u0ab6\u0ab4"+
		"\3\2\2\2\u0ab7\u0aba\3\2\2\2\u0ab8\u0ab6\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9"+
		"\u0abc\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0abb\u0aaf\3\2\2\2\u0abb\u0abc\3\2"+
		"\2\2\u0abc\u00ad\3\2\2\2\u0abd\u0abe\7Y\2\2\u0abe\u0ac0\7\u0124\2\2\u0abf"+
		"\u0ac1\t \2\2\u0ac0\u0abf\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac3\3\2"+
		"\2\2\u0ac2\u0ac4\7\u0172\2\2\u0ac3\u0ac2\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4"+
		"\u0ac5\3\2\2\2\u0ac5\u0ac6\7F\2\2\u0ac6\u0ac8\7\u03c2\2\2\u0ac7\u0ac9"+
		"\t\b\2\2\u0ac8\u0ac7\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca"+
		"\u0acb\7K\2\2\u0acb\u0acc\7\u0093\2\2\u0acc\u0ad2\5\u01e8\u00f5\2\u0acd"+
		"\u0ace\7o\2\2\u0ace\u0acf\7\u03b3\2\2\u0acf\u0ad0\5\u021e\u0110\2\u0ad0"+
		"\u0ad1\7\u03b4\2\2\u0ad1\u0ad3\3\2\2\2\u0ad2\u0acd\3\2\2\2\u0ad2\u0ad3"+
		"\3\2\2\2\u0ad3\u0ad7\3\2\2\2\u0ad4\u0ad5\7\27\2\2\u0ad5\u0ad6\7\u0085"+
		"\2\2\u0ad6\u0ad8\5\u01f2\u00fa\2\u0ad7\u0ad4\3\2\2\2\u0ad7\u0ad8\3\2\2"+
		"\2\u0ad8\u0adf\3\2\2\2\u0ad9\u0adb\t!\2\2\u0ada\u0adc\5\u00f4{\2\u0adb"+
		"\u0ada\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0adb\3\2\2\2\u0add\u0ade\3\2"+
		"\2\2\u0ade\u0ae0\3\2\2\2\u0adf\u0ad9\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0"+
		"\u0ae7\3\2\2\2\u0ae1\u0ae3\7X\2\2\u0ae2\u0ae4\5\u00f6|\2\u0ae3\u0ae2\3"+
		"\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6"+
		"\u0ae8\3\2\2\2\u0ae7\u0ae1\3\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0aed\3\2"+
		"\2\2\u0ae9\u0aea\7C\2\2\u0aea\u0aeb\5\u0206\u0104\2\u0aeb\u0aec\t\"\2"+
		"\2\u0aec\u0aee\3\2\2\2\u0aed\u0ae9\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0afa"+
		"\3\2\2\2\u0aef\u0af0\7\u03b3\2\2\u0af0\u0af5\5\u00bc_\2\u0af1\u0af2\7"+
		"\u03b5\2\2\u0af2\u0af4\5\u00bc_\2\u0af3\u0af1\3\2\2\2\u0af4\u0af7\3\2"+
		"\2\2\u0af5\u0af3\3\2\2\2\u0af5\u0af6\3\2\2\2\u0af6\u0af8\3\2\2\2\u0af7"+
		"\u0af5\3\2\2\2\u0af8\u0af9\7\u03b4\2\2\u0af9\u0afb\3\2\2\2\u0afa\u0aef"+
		"\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0b05\3\2\2\2\u0afc\u0afd\7\u0085\2"+
		"\2\u0afd\u0b02\5\u00ba^\2\u0afe\u0aff\7\u03b5\2\2\u0aff\u0b01\5\u00ba"+
		"^\2\u0b00\u0afe\3\2\2\2\u0b01\u0b04\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02"+
		"\u0b03\3\2\2\2\u0b03\u0b06\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b05\u0afc\3\2"+
		"\2\2\u0b05\u0b06\3\2\2\2\u0b06\u00af\3\2\2\2\u0b07\u0b08\7Y\2\2\u0b08"+
		"\u0b0a\7\u0222\2\2\u0b09\u0b0b\t \2\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b"+
		"\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b0e\7\u0172\2\2\u0b0d\u0b0c\3\2\2"+
		"\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\7F\2\2\u0b10\u0b12"+
		"\7\u03c2\2\2\u0b11\u0b13\t\b\2\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13\3\2\2"+
		"\2\u0b13\u0b14\3\2\2\2\u0b14\u0b15\7K\2\2\u0b15\u0b16\7\u0093\2\2\u0b16"+
		"\u0b1a\5\u01e8\u00f5\2\u0b17\u0b18\7\27\2\2\u0b18\u0b19\7\u0085\2\2\u0b19"+
		"\u0b1b\5\u01f2\u00fa\2\u0b1a\u0b17\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b22"+
		"\3\2\2\2\u0b1c\u0b1d\7\u01dc\2\2\u0b1d\u0b1e\7\u015b\2\2\u0b1e\u0b1f\7"+
		"\21\2\2\u0b1f\u0b20\7\u03ac\2\2\u0b20\u0b21\7\u03c2\2\2\u0b21\u0b23\7"+
		"\u03ab\2\2\u0b22\u0b1c\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b28\3\2\2\2"+
		"\u0b24\u0b25\7C\2\2\u0b25\u0b26\5\u0206\u0104\2\u0b26\u0b27\t\"\2\2\u0b27"+
		"\u0b29\3\2\2\2\u0b28\u0b24\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b35\3\2"+
		"\2\2\u0b2a\u0b2b\7\u03b3\2\2\u0b2b\u0b30\5\u00bc_\2\u0b2c\u0b2d\7\u03b5"+
		"\2\2\u0b2d\u0b2f\5\u00bc_\2\u0b2e\u0b2c\3\2\2\2\u0b2f\u0b32\3\2\2\2\u0b30"+
		"\u0b2e\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b33\3\2\2\2\u0b32\u0b30\3\2"+
		"\2\2\u0b33\u0b34\7\u03b4\2\2\u0b34\u0b36\3\2\2\2\u0b35\u0b2a\3\2\2\2\u0b35"+
		"\u0b36\3\2\2\2\u0b36\u0b40\3\2\2\2\u0b37\u0b38\7\u0085\2\2\u0b38\u0b3d"+
		"\5\u00ba^\2\u0b39\u0b3a\7\u03b5\2\2\u0b3a\u0b3c\5\u00ba^\2\u0b3b\u0b39"+
		"\3\2\2\2\u0b3c\u0b3f\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e"+
		"\u0b41\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b40\u0b37\3\2\2\2\u0b40\u0b41\3\2"+
		"\2\2\u0b41\u00b1\3\2\2\2\u0b42\u0b44\7{\2\2\u0b43\u0b45\t#\2\2\u0b44\u0b43"+
		"\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b47\3\2\2\2\u0b46\u0b48\7K\2\2\u0b47"+
		"\u0b46\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b4f\5\u01e8"+
		"\u00f5\2\u0b4a\u0b4b\7o\2\2\u0b4b\u0b4c\7\u03b3\2\2\u0b4c\u0b4d\5\u021e"+
		"\u0110\2\u0b4d\u0b4e\7\u03b4\2\2\u0b4e\u0b50\3\2\2\2\u0b4f\u0b4a\3\2\2"+
		"\2\u0b4f\u0b50\3\2\2\2\u0b50\u0b61\3\2\2\2\u0b51\u0b52\7\u03b3\2\2\u0b52"+
		"\u0b53\5\u021e\u0110\2\u0b53\u0b54\7\u03b4\2\2\u0b54\u0b56\3\2\2\2\u0b55"+
		"\u0b51\3\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b62\5\u00b8"+
		"]\2\u0b58\u0b59\7\u0085\2\2\u0b59\u0b5e\5\u00ba^\2\u0b5a\u0b5b\7\u03b5"+
		"\2\2\u0b5b\u0b5d\5\u00ba^\2\u0b5c\u0b5a\3\2\2\2\u0b5d\u0b60\3\2\2\2\u0b5e"+
		"\u0b5c\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b62\3\2\2\2\u0b60\u0b5e\3\2"+
		"\2\2\u0b61\u0b55\3\2\2\2\u0b61\u0b58\3\2\2\2\u0b62\u00b3\3\2\2\2\u0b63"+
		"\u0b65\5\u00e4s\2\u0b64\u0b66\5\u00be`\2\u0b65\u0b64\3\2\2\2\u0b65\u0b66"+
		"\3\2\2\2\u0b66\u0b9b\3\2\2\2\u0b67\u0b69\5\u00e0q\2\u0b68\u0b6a\5\u00be"+
		"`\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b9b\3\2\2\2\u0b6b"+
		"\u0b6d\5\u00e6t\2\u0b6c\u0b6e\5\u00eav\2\u0b6d\u0b6c\3\2\2\2\u0b6e\u0b6f"+
		"\3\2\2\2\u0b6f\u0b6d\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b79\3\2\2\2\u0b71"+
		"\u0b73\7\u009b\2\2\u0b72\u0b74\t$\2\2\u0b73\u0b72\3\2\2\2\u0b73\u0b74"+
		"\3\2\2\2\u0b74\u0b77\3\2\2\2\u0b75\u0b78\5\u00e4s\2\u0b76\u0b78\5\u00e0"+
		"q\2\u0b77\u0b75\3\2\2\2\u0b77\u0b76\3\2\2\2\u0b78\u0b7a\3\2\2\2\u0b79"+
		"\u0b71\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7c\3\2\2\2\u0b7b\u0b7d\5\u00d0"+
		"i\2\u0b7c\u0b7b\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7f\3\2\2\2\u0b7e"+
		"\u0b80\5\u00fc\177\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b82"+
		"\3\2\2\2\u0b81\u0b83\5\u00be`\2\u0b82\u0b81\3\2\2\2\u0b82\u0b83\3\2\2"+
		"\2\u0b83\u0b9b\3\2\2\2\u0b84\u0b86\5\u00e2r\2\u0b85\u0b87\5\u00e8u\2\u0b86"+
		"\u0b85\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b88\u0b89\3\2"+
		"\2\2\u0b89\u0b8f\3\2\2\2\u0b8a\u0b8c\7\u009b\2\2\u0b8b\u0b8d\t$\2\2\u0b8c"+
		"\u0b8b\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b90\5\u00e0"+
		"q\2\u0b8f\u0b8a\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b92\3\2\2\2\u0b91"+
		"\u0b93\5\u00d0i\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b95"+
		"\3\2\2\2\u0b94\u0b96\5\u00fc\177\2\u0b95\u0b94\3\2\2\2\u0b95\u0b96\3\2"+
		"\2\2\u0b96\u0b98\3\2\2\2\u0b97\u0b99\5\u00be`\2\u0b98\u0b97\3\2\2\2\u0b98"+
		"\u0b99\3\2\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b63\3\2\2\2\u0b9a\u0b67\3\2"+
		"\2\2\u0b9a\u0b6b\3\2\2\2\u0b9a\u0b84\3\2\2\2\u0b9b\u00b5\3\2\2\2\u0b9c"+
		"\u0b9f\5\u00ccg\2\u0b9d\u0b9f\5\u00ceh\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9d"+
		"\3\2\2\2\u0b9f\u00b7\3\2\2\2\u0ba0\u0bb0\5\u00b4[\2\u0ba1\u0ba2\t%\2\2"+
		"\u0ba2\u0ba3\7\u03b3\2\2\u0ba3\u0ba4\5\u0226\u0114\2\u0ba4\u0bac\7\u03b4"+
		"\2\2\u0ba5\u0ba6\7\u03b5\2\2\u0ba6\u0ba7\7\u03b3\2\2\u0ba7\u0ba8\5\u0226"+
		"\u0114\2\u0ba8\u0ba9\7\u03b4\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0ba5\3\2\2"+
		"\2\u0bab\u0bae\3\2\2\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bb0"+
		"\3\2\2\2\u0bae\u0bac\3\2\2\2\u0baf\u0ba0\3\2\2\2\u0baf\u0ba1\3\2\2\2\u0bb0"+
		"\u00b9\3\2\2\2\u0bb1\u0bb2\5\u01ea\u00f6\2\u0bb2\u0bb5\7\u03aa\2\2\u0bb3"+
		"\u0bb6\5\u024a\u0126\2\u0bb4\u0bb6\7&\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb4"+
		"\3\2\2\2\u0bb6\u00bb\3\2\2\2\u0bb7\u0bba\5\u0200\u0101\2\u0bb8\u0bba\7"+
		"\u03cd\2\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bb8\3\2\2\2\u0bba\u00bd\3\2\2\2"+
		"\u0bbb\u0bbc\79\2\2\u0bbc\u0bc2\7\u009f\2\2\u0bbd\u0bbe\7Z\2\2\u0bbe\u0bbf"+
		"\7D\2\2\u0bbf\u0bc0\7\u01e3\2\2\u0bc0\u0bc2\7\u0195\2\2\u0bc1\u0bbb\3"+
		"\2\2\2\u0bc1\u0bbd\3\2\2\2\u0bc2\u00bf\3\2\2\2\u0bc3\u0bc5\7(\2\2\u0bc4"+
		"\u0bc6\7\\\2\2\u0bc5\u0bc4\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc8\3\2"+
		"\2\2\u0bc7\u0bc9\7\u01c1\2\2\u0bc8\u0bc7\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9"+
		"\u0bcb\3\2\2\2\u0bca\u0bcc\7C\2\2\u0bcb\u0bca\3\2\2\2\u0bcb\u0bcc\3\2"+
		"\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bce\7<\2\2\u0bce\u0bd4\5\u01e8\u00f5"+
		"\2\u0bcf\u0bd0\7o\2\2\u0bd0\u0bd1\7\u03b3\2\2\u0bd1\u0bd2\5\u021e\u0110"+
		"\2\u0bd2\u0bd3\7\u03b4\2\2\u0bd3\u0bd5\3\2\2\2\u0bd4\u0bcf\3\2\2\2\u0bd4"+
		"\u0bd5\3\2\2\2\u0bd5\u0bd8\3\2\2\2\u0bd6\u0bd7\7\u00a5\2\2\u0bd7\u0bd9"+
		"\5\u024a\u0126\2\u0bd8\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdb\3"+
		"\2\2\2\u0bda\u0bdc\5\u00d0i\2\u0bdb\u0bda\3\2\2\2\u0bdb\u0bdc\3\2\2\2"+
		"\u0bdc\u0bdf\3\2\2\2\u0bdd\u0bde\7V\2\2\u0bde\u0be0\5\u0206\u0104\2\u0bdf"+
		"\u0bdd\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u00c1\3\2\2\2\u0be1\u0be3\7("+
		"\2\2\u0be2\u0be4\7\\\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4"+
		"\u0be6\3\2\2\2\u0be5\u0be7\7\u01c1\2\2\u0be6\u0be5\3\2\2\2\u0be6\u0be7"+
		"\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8\u0bea\7C\2\2\u0be9\u0be8\3\2\2\2\u0be9"+
		"\u0bea\3\2\2\2\u0bea\u0c12\3\2\2\2\u0beb\u0bee\5\u01e8\u00f5\2\u0bec\u0bed"+
		"\7\u03b2\2\2\u0bed\u0bef\7\u03a2\2\2\u0bee\u0bec\3\2\2\2\u0bee\u0bef\3"+
		"\2\2\2\u0bef\u0bf8\3\2\2\2\u0bf0\u0bf1\7\u03b5\2\2\u0bf1\u0bf4\5\u01e8"+
		"\u00f5\2\u0bf2\u0bf3\7\u03b2\2\2\u0bf3\u0bf5\7\u03a2\2\2\u0bf4\u0bf2\3"+
		"\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0bf7\3\2\2\2\u0bf6\u0bf0\3\2\2\2\u0bf7"+
		"\u0bfa\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfb\3\2"+
		"\2\2\u0bfa\u0bf8\3\2\2\2\u0bfb\u0bfc\7<\2\2\u0bfc\u0bfd\5\u00d4k\2\u0bfd"+
		"\u0c13\3\2\2\2\u0bfe\u0bff\7<\2\2\u0bff\u0c02\5\u01e8\u00f5\2\u0c00\u0c01"+
		"\7\u03b2\2\2\u0c01\u0c03\7\u03a2\2\2\u0c02\u0c00\3\2\2\2\u0c02\u0c03\3"+
		"\2\2\2\u0c03\u0c0c\3\2\2\2\u0c04\u0c05\7\u03b5\2\2\u0c05\u0c08\5\u01e8"+
		"\u00f5\2\u0c06\u0c07\7\u03b2\2\2\u0c07\u0c09\7\u03a2\2\2\u0c08\u0c06\3"+
		"\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c0b\3\2\2\2\u0c0a\u0c04\3\2\2\2\u0c0b"+
		"\u0c0e\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0f\3\2"+
		"\2\2\u0c0e\u0c0c\3\2\2\2\u0c0f\u0c10\7\u00a2\2\2\u0c10\u0c11\5\u00d4k"+
		"\2\u0c11\u0c13\3\2\2\2\u0c12\u0beb\3\2\2\2\u0c12\u0bfe\3\2\2\2\u0c13\u0c16"+
		"\3\2\2\2\u0c14\u0c15\7\u00a5\2\2\u0c15\u0c17\5\u024a\u0126\2\u0c16\u0c14"+
		"\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u00c3\3\2\2\2\u0c18\u0c19\7\u0156\2"+
		"\2\u0c19\u0c1a\5\u01e8\u00f5\2\u0c1a\u0c1f\7\u01a8\2\2\u0c1b\u0c1d\7\f"+
		"\2\2\u0c1c\u0c1b\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e"+
		"\u0c20\5\u0200\u0101\2\u0c1f\u0c1c\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u00c5"+
		"\3\2\2\2\u0c21\u0c22\7\u0156\2\2\u0c22\u0c23\5\u01e8\u00f5\2\u0c23\u0c24"+
		"\7t\2\2\u0c24\u0c2b\5\u0200\u0101\2\u0c25\u0c26\5\u0252\u012a\2\u0c26"+
		"\u0c27\7\u03b3\2\2\u0c27\u0c28\5\u0228\u0115\2\u0c28\u0c29\7\u03b4\2\2"+
		"\u0c29\u0c2c\3\2\2\2\u0c2a\u0c2c\t&\2\2\u0c2b\u0c25\3\2\2\2\u0c2b\u0c2a"+
		"\3\2\2\2\u0c2c\u0c2f\3\2\2\2\u0c2d\u0c2e\7\u00a5\2\2\u0c2e\u0c30\5\u024a"+
		"\u0126\2\u0c2f\u0c2d\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c33\3\2\2\2\u0c31"+
		"\u0c32\7V\2\2\u0c32\u0c34\5\u0206\u0104\2\u0c33\u0c31\3\2\2\2\u0c33\u0c34"+
		"\3\2\2\2\u0c34\u00c7\3\2\2\2\u0c35\u0c36\7\u0156\2\2\u0c36\u0c37\5\u01e8"+
		"\u00f5\2\u0c37\u0c38\7t\2\2\u0c38\u0c3b\t\'\2\2\u0c39\u0c3a\7\u00a5\2"+
		"\2\u0c3a\u0c3c\5\u024a\u0126\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3c\3\2\2\2"+
		"\u0c3c\u0c3f\3\2\2\2\u0c3d\u0c3e\7V\2\2\u0c3e\u0c40\5\u0206\u0104\2\u0c3f"+
		"\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u00c9\3\2\2\2\u0c41\u0c42\7\u0156"+
		"\2\2\u0c42\u0c43\5\u01e8\u00f5\2\u0c43\u0c44\7\u0111\2\2\u0c44\u00cb\3"+
		"\2\2\2\u0c45\u0c47\7\u009f\2\2\u0c46\u0c48\7\\\2\2\u0c47\u0c46\3\2\2\2"+
		"\u0c47\u0c48\3\2\2\2\u0c48\u0c4a\3\2\2\2\u0c49\u0c4b\7C\2\2\u0c4a\u0c49"+
		"\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c51\5\u01e8\u00f5"+
		"\2\u0c4d\u0c4f\7\f\2\2\u0c4e\u0c4d\3\2\2\2\u0c4e\u0c4f\3\2\2\2\u0c4f\u0c50"+
		"\3\2\2\2\u0c50\u0c52\5\u0200\u0101\2\u0c51\u0c4e\3\2\2\2\u0c51\u0c52\3"+
		"\2\2\2\u0c52\u0c53\3\2\2\2\u0c53\u0c54\7\u0085\2\2\u0c54\u0c59\5\u00ba"+
		"^\2\u0c55\u0c56\7\u03b5\2\2\u0c56\u0c58\5\u00ba^\2\u0c57\u0c55\3\2\2\2"+
		"\u0c58\u0c5b\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5e"+
		"\3\2\2\2\u0c5b\u0c59\3\2\2\2\u0c5c\u0c5d\7\u00a5\2\2\u0c5d\u0c5f\5\u024a"+
		"\u0126\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c61\3\2\2\2\u0c60"+
		"\u0c62\5\u00d0i\2\u0c61\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c64"+
		"\3\2\2\2\u0c63\u0c65\5\u00fc\177\2\u0c64\u0c63\3\2\2\2\u0c64\u0c65\3\2"+
		"\2\2\u0c65\u00cd\3\2\2\2\u0c66\u0c68\7\u009f\2\2\u0c67\u0c69\7\\\2\2\u0c68"+
		"\u0c67\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6b\3\2\2\2\u0c6a\u0c6c\7C"+
		"\2\2\u0c6b\u0c6a\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d"+
		"\u0c6e\5\u00d4k\2\u0c6e\u0c6f\7\u0085\2\2\u0c6f\u0c74\5\u00ba^\2\u0c70"+
		"\u0c71\7\u03b5\2\2\u0c71\u0c73\5\u00ba^\2\u0c72\u0c70\3\2\2\2\u0c73\u0c76"+
		"\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c79\3\2\2\2\u0c76"+
		"\u0c74\3\2\2\2\u0c77\u0c78\7\u00a5\2\2\u0c78\u0c7a\5\u024a\u0126\2\u0c79"+
		"\u0c77\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u00cf\3\2\2\2\u0c7b\u0c7c\7k"+
		"\2\2\u0c7c\u0c7d\7\21\2\2\u0c7d\u0c82\5\u00d2j\2\u0c7e\u0c7f\7\u03b5\2"+
		"\2\u0c7f\u0c81\5\u00d2j\2\u0c80\u0c7e\3\2\2\2\u0c81\u0c84\3\2\2\2\u0c82"+
		"\u0c80\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u00d1\3\2\2\2\u0c84\u0c82\3\2"+
		"\2\2\u0c85\u0c87\5\u024a\u0126\2\u0c86\u0c88\t(\2\2\u0c87\u0c86\3\2\2"+
		"\2\u0c87\u0c88\3\2\2\2\u0c88\u00d3\3\2\2\2\u0c89\u0c8e\5\u00d6l\2\u0c8a"+
		"\u0c8b\7\u03b5\2\2\u0c8b\u0c8d\5\u00d6l\2\u0c8c\u0c8a\3\2\2\2\u0c8d\u0c90"+
		"\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u00d5\3\2\2\2\u0c90"+
		"\u0c8e\3\2\2\2\u0c91\u0c95\5\u00d8m\2\u0c92\u0c94\5\u00dep\2\u0c93\u0c92"+
		"\3\2\2\2\u0c94\u0c97\3\2\2\2\u0c95\u0c93\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96"+
		"\u0ca3\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c98\u0c99\7\u03b3\2\2\u0c99\u0c9d"+
		"\5\u00d8m\2\u0c9a\u0c9c\5\u00dep\2\u0c9b\u0c9a\3\2\2\2\u0c9c\u0c9f\3\2"+
		"\2\2\u0c9d\u0c9b\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0ca0\3\2\2\2\u0c9f"+
		"\u0c9d\3\2\2\2\u0ca0\u0ca1\7\u03b4\2\2\u0ca1\u0ca3\3\2\2\2\u0ca2\u0c91"+
		"\3\2\2\2\u0ca2\u0c98\3\2\2\2\u0ca3\u00d7\3\2\2\2\u0ca4\u0caa\5\u01e8\u00f5"+
		"\2\u0ca5\u0ca6\7o\2\2\u0ca6\u0ca7\7\u03b3\2\2\u0ca7\u0ca8\5\u021e\u0110"+
		"\2\u0ca8\u0ca9\7\u03b4\2\2\u0ca9\u0cab\3\2\2\2\u0caa\u0ca5\3\2\2\2\u0caa"+
		"\u0cab\3\2\2\2\u0cab\u0cb0\3\2\2\2\u0cac\u0cae\7\f\2\2\u0cad\u0cac\3\2"+
		"\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cb1\5\u0200\u0101"+
		"\2\u0cb0\u0cad\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cba\3\2\2\2\u0cb2\u0cb7"+
		"\5\u00dan\2\u0cb3\u0cb4\7\u03b5\2\2\u0cb4\u0cb6\5\u00dan\2\u0cb5\u0cb3"+
		"\3\2\2\2\u0cb6\u0cb9\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8"+
		"\u0cbb\3\2\2\2\u0cb9\u0cb7\3\2\2\2\u0cba\u0cb2\3\2\2\2\u0cba\u0cbb\3\2"+
		"\2\2\u0cbb\u0ccd\3\2\2\2\u0cbc\u0cc2\5\u00b4[\2\u0cbd\u0cbe\7\u03b3\2"+
		"\2\u0cbe\u0cbf\5\u00b4[\2\u0cbf\u0cc0\7\u03b4\2\2\u0cc0\u0cc2\3\2\2\2"+
		"\u0cc1\u0cbc\3\2\2\2\u0cc1\u0cbd\3\2\2\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cc5"+
		"\7\f\2\2\u0cc4\u0cc3\3\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6"+
		"\u0cc7\5\u0200\u0101\2\u0cc7\u0ccd\3\2\2\2\u0cc8\u0cc9\7\u03b3\2\2\u0cc9"+
		"\u0cca\5\u00d4k\2\u0cca\u0ccb\7\u03b4\2\2\u0ccb\u0ccd\3\2\2\2\u0ccc\u0ca4"+
		"\3\2\2\2\u0ccc\u0cc1\3\2\2\2\u0ccc\u0cc8\3\2\2\2\u0ccd\u00d9\3\2\2\2\u0cce"+
		"\u0ccf\t)\2\2\u0ccf\u0cd2\t\23\2\2\u0cd0\u0cd1\79\2\2\u0cd1\u0cd3\5\u00dc"+
		"o\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd4\3\2\2\2\u0cd4"+
		"\u0cd5\7\u03b3\2\2\u0cd5\u0cd6\5\u021e\u0110\2\u0cd6\u0cd7\7\u03b4\2\2"+
		"\u0cd7\u00db\3\2\2\2\u0cd8\u0cde\7N\2\2\u0cd9\u0cda\7k\2\2\u0cda\u0cde"+
		"\7\21\2\2\u0cdb\u0cdc\7?\2\2\u0cdc\u0cde\7\21\2\2\u0cdd\u0cd8\3\2\2\2"+
		"\u0cdd\u0cd9\3\2\2\2\u0cdd\u0cdb\3\2\2\2\u0cde\u00dd\3\2\2\2\u0cdf\u0ce1"+
		"\t*\2\2\u0ce0\u0cdf\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2"+
		"\u0ce3\7N\2\2\u0ce3\u0ceb\5\u00d8m\2\u0ce4\u0ce5\7f\2\2\u0ce5\u0cec\5"+
		"\u024a\u0126\2\u0ce6\u0ce7\7\u00a2\2\2\u0ce7\u0ce8\7\u03b3\2\2\u0ce8\u0ce9"+
		"\5\u021e\u0110\2\u0ce9\u0cea\7\u03b4\2\2\u0cea\u0cec\3\2\2\2\u0ceb\u0ce4"+
		"\3\2\2\2\u0ceb\u0ce6\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0d0c\3\2\2\2\u0ced"+
		"\u0cee\7\u0092\2\2\u0cee\u0cf1\5\u00d8m\2\u0cef\u0cf0\7f\2\2\u0cf0\u0cf2"+
		"\5\u024a\u0126\2\u0cf1\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0d0c\3"+
		"\2\2\2\u0cf3\u0cf5\t+\2\2\u0cf4\u0cf6\7m\2\2\u0cf5\u0cf4\3\2\2\2\u0cf5"+
		"\u0cf6\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0cf8\7N\2\2\u0cf8\u0d00\5\u00d8"+
		"m\2\u0cf9\u0cfa\7f\2\2\u0cfa\u0d01\5\u024a\u0126\2\u0cfb\u0cfc\7\u00a2"+
		"\2\2\u0cfc\u0cfd\7\u03b3\2\2\u0cfd\u0cfe\5\u021e\u0110\2\u0cfe\u0cff\7"+
		"\u03b4\2\2\u0cff\u0d01\3\2\2\2\u0d00\u0cf9\3\2\2\2\u0d00\u0cfb\3\2\2\2"+
		"\u0d01\u0d0c\3\2\2\2\u0d02\u0d07\7b\2\2\u0d03\u0d05\t+\2\2\u0d04\u0d06"+
		"\7m\2\2\u0d05\u0d04\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d08\3\2\2\2\u0d07"+
		"\u0d03\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0a\7N"+
		"\2\2\u0d0a\u0d0c\5\u00d8m\2\u0d0b\u0ce0\3\2\2\2\u0d0b\u0ced\3\2\2\2\u0d0b"+
		"\u0cf3\3\2\2\2\u0d0b\u0d02\3\2\2\2\u0d0c\u00df\3\2\2\2\u0d0d\u0d0e\7\u03b3"+
		"\2\2\u0d0e\u0d0f\5\u00e4s\2\u0d0f\u0d10\7\u03b4\2\2\u0d10\u0d16\3\2\2"+
		"\2\u0d11\u0d12\7\u03b3\2\2\u0d12\u0d13\5\u00e0q\2\u0d13\u0d14\7\u03b4"+
		"\2\2\u0d14\u0d16\3\2\2\2\u0d15\u0d0d\3\2\2\2\u0d15\u0d11\3\2\2\2\u0d16"+
		"\u00e1\3\2\2\2\u0d17\u0d18\7\u03b3\2\2\u0d18\u0d19\5\u00e6t\2\u0d19\u0d1a"+
		"\7\u03b4\2\2\u0d1a\u0d20\3\2\2\2\u0d1b\u0d1c\7\u03b3\2\2\u0d1c\u0d1d\5"+
		"\u00e2r\2\u0d1d\u0d1e\7\u03b4\2\2\u0d1e\u0d20\3\2\2\2\u0d1f\u0d17\3\2"+
		"\2\2\u0d1f\u0d1b\3\2\2\2\u0d20\u00e3\3\2\2\2\u0d21\u0d25\7\u0084\2\2\u0d22"+
		"\u0d24\5\u00ecw\2\u0d23\u0d22\3\2\2\2\u0d24\u0d27\3\2\2\2\u0d25\u0d23"+
		"\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d28"+
		"\u0d2a\5\u00eex\2\u0d29\u0d2b\5\u00f2z\2\u0d2a\u0d29\3\2\2\2\u0d2a\u0d2b"+
		"\3\2\2\2\u0d2b\u0d2d\3\2\2\2\u0d2c\u0d2e\5\u00f8}\2\u0d2d\u0d2c\3\2\2"+
		"\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d30\3\2\2\2\u0d2f\u0d31\5\u00d0i\2\u0d30"+
		"\u0d2f\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d33\3\2\2\2\u0d32\u0d34\5\u00fc"+
		"\177\2\u0d33\u0d32\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d4a\3\2\2\2\u0d35"+
		"\u0d39\7\u0084\2\2\u0d36\u0d38\5\u00ecw\2\u0d37\u0d36\3\2\2\2\u0d38\u0d3b"+
		"\3\2\2\2\u0d39\u0d37\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3c\3\2\2\2\u0d3b"+
		"\u0d39\3\2\2\2\u0d3c\u0d3e\5\u00eex\2\u0d3d\u0d3f\5\u00f8}\2\u0d3e\u0d3d"+
		"\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d42\5\u00d0i"+
		"\2\u0d41\u0d40\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d44\3\2\2\2\u0d43\u0d45"+
		"\5\u00fc\177\2\u0d44\u0d43\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0d47\3\2"+
		"\2\2\u0d46\u0d48\5\u00f2z\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48"+
		"\u0d4a\3\2\2\2\u0d49\u0d21\3\2\2\2\u0d49\u0d35\3\2\2\2\u0d4a\u00e5\3\2"+
		"\2\2\u0d4b\u0d4f\7\u0084\2\2\u0d4c\u0d4e\5\u00ecw\2\u0d4d\u0d4c\3\2\2"+
		"\2\u0d4e\u0d51\3\2\2\2\u0d4f\u0d4d\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d52"+
		"\3\2\2\2\u0d51\u0d4f\3\2\2\2\u0d52\u0d54\5\u00eex\2\u0d53\u0d55\5\u00f8"+
		"}\2\u0d54\u0d53\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\3\2\2\2\u0d56"+
		"\u0d58\5\u00d0i\2\u0d57\u0d56\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d5a"+
		"\3\2\2\2\u0d59\u0d5b\5\u00fc\177\2\u0d5a\u0d59\3\2\2\2\u0d5a\u0d5b\3\2"+
		"\2\2\u0d5b\u00e7\3\2\2\2\u0d5c\u0d5e\7\u009b\2\2\u0d5d\u0d5f\t$\2\2\u0d5e"+
		"\u0d5d\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d61\5\u00e2"+
		"r\2\u0d61\u00e9\3\2\2\2\u0d62\u0d64\7\u009b\2\2\u0d63\u0d65\t$\2\2\u0d64"+
		"\u0d63\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d68\3\2\2\2\u0d66\u0d69\5\u00e6"+
		"t\2\u0d67\u0d69\5\u00e2r\2\u0d68\u0d66\3\2\2\2\u0d68\u0d67\3\2\2\2\u0d69"+
		"\u00eb\3\2\2\2\u0d6a\u0d73\t,\2\2\u0d6b\u0d73\7A\2\2\u0d6c\u0d73\7\u0092"+
		"\2\2\u0d6d\u0d73\7\u008f\2\2\u0d6e\u0d73\7\u008d\2\2\u0d6f\u0d73\7\u01f2"+
		"\2\2\u0d70\u0d73\t-\2\2\u0d71\u0d73\7\u008e\2\2\u0d72\u0d6a\3\2\2\2\u0d72"+
		"\u0d6b\3\2\2\2\u0d72\u0d6c\3\2\2\2\u0d72\u0d6d\3\2\2\2\u0d72\u0d6e\3\2"+
		"\2\2\u0d72\u0d6f\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d72\u0d71\3\2\2\2\u0d73"+
		"\u00ed\3\2\2\2\u0d74\u0d77\7\u03a2\2\2\u0d75\u0d77\5\u00f0y\2\u0d76\u0d74"+
		"\3\2\2\2\u0d76\u0d75\3\2\2\2\u0d77\u0d7c\3\2\2\2\u0d78\u0d79\7\u03b5\2"+
		"\2\u0d79\u0d7b\5\u00f0y\2\u0d7a\u0d78\3\2\2\2\u0d7b\u0d7e\3\2\2\2\u0d7c"+
		"\u0d7a\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u00ef\3\2\2\2\u0d7e\u0d7c\3\2"+
		"\2\2\u0d7f\u0d80\5\u01e6\u00f4\2\u0d80\u0d81\7\u03b2\2\2\u0d81\u0d82\7"+
		"\u03a2\2\2\u0d82\u0d9d\3\2\2\2\u0d83\u0d88\5\u01ea\u00f6\2\u0d84\u0d86"+
		"\7\f\2\2\u0d85\u0d84\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87"+
		"\u0d89\5\u0200\u0101\2\u0d88\u0d85\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d9d"+
		"\3\2\2\2\u0d8a\u0d8f\5\u0236\u011c\2\u0d8b\u0d8d\7\f\2\2\u0d8c\u0d8b\3"+
		"\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u0d90\5\u0200\u0101"+
		"\2\u0d8f\u0d8c\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d9d\3\2\2\2\u0d91\u0d92"+
		"\7\u03cd\2\2\u0d92\u0d94\7\u0399\2\2\u0d93\u0d91\3\2\2\2\u0d93\u0d94\3"+
		"\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d9a\5\u024a\u0126\2\u0d96\u0d98\7\f"+
		"\2\2\u0d97\u0d96\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9b\5\u0200\u0101\2\u0d9a\u0d97\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9d"+
		"\3\2\2\2\u0d9c\u0d7f\3\2\2\2\u0d9c\u0d83\3\2\2\2\u0d9c\u0d8a\3\2\2\2\u0d9c"+
		"\u0d93\3\2\2\2\u0d9d\u00f1\3\2\2\2\u0d9e\u0d9f\7K\2\2\u0d9f\u0da4\5\u00bc"+
		"_\2\u0da0\u0da1\7\u03b5\2\2\u0da1\u0da3\5\u00bc_\2\u0da2\u0da0\3\2\2\2"+
		"\u0da3\u0da6\3\2\2\2\u0da4\u0da2\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0dc3"+
		"\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da7\u0da8\7K\2\2\u0da8\u0da9\7\u0130\2"+
		"\2\u0da9\u0dc3\7\u03c2\2\2\u0daa\u0dab\7K\2\2\u0dab\u0dac\7n\2\2\u0dac"+
		"\u0db0\7\u03c2\2\2\u0dad\u0dae\7\27\2\2\u0dae\u0daf\7\u0085\2\2\u0daf"+
		"\u0db1\5\u01f2\u00fa\2\u0db0\u0dad\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0db8"+
		"\3\2\2\2\u0db2\u0db4\t!\2\2\u0db3\u0db5\5\u00f4{\2\u0db4\u0db3\3\2\2\2"+
		"\u0db5\u0db6\3\2\2\2\u0db6\u0db4\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db9"+
		"\3\2\2\2\u0db8\u0db2\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dc0\3\2\2\2\u0dba"+
		"\u0dbc\7X\2\2\u0dbb\u0dbd\5\u00f6|\2\u0dbc\u0dbb\3\2\2\2\u0dbd\u0dbe\3"+
		"\2\2\2\u0dbe\u0dbc\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dc1\3\2\2\2\u0dc0"+
		"\u0dba\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc3\3\2\2\2\u0dc2\u0d9e\3\2"+
		"\2\2\u0dc2\u0da7\3\2\2\2\u0dc2\u0daa\3\2\2\2\u0dc3\u00f3\3\2\2\2\u0dc4"+
		"\u0dc5\7\u0094\2\2\u0dc5\u0dc6\7\21\2\2\u0dc6\u0dd1\7\u03c2\2\2\u0dc7"+
		"\u0dc9\7i\2\2\u0dc8\u0dc7\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dca\3\2"+
		"\2\2\u0dca\u0dcb\7\62\2\2\u0dcb\u0dcc\7\21\2\2\u0dcc\u0dd1\7\u03c2\2\2"+
		"\u0dcd\u0dce\7\63\2\2\u0dce\u0dcf\7\21\2\2\u0dcf\u0dd1\7\u03c2\2\2\u0dd0"+
		"\u0dc4\3\2\2\2\u0dd0\u0dc8\3\2\2\2\u0dd0\u0dcd\3\2\2\2\u0dd1\u00f5\3\2"+
		"\2\2\u0dd2\u0dd3\7\u0091\2\2\u0dd3\u0dd4\7\21\2\2\u0dd4\u0dd9\7\u03c2"+
		"\2\2\u0dd5\u0dd6\7\u0094\2\2\u0dd6\u0dd7\7\21\2\2\u0dd7\u0dd9\7\u03c2"+
		"\2\2\u0dd8\u0dd2\3\2\2\2\u0dd8\u0dd5\3\2\2\2\u0dd9\u00f7\3\2\2\2\u0dda"+
		"\u0ddb\7<\2\2\u0ddb\u0dde\5\u00d4k\2\u0ddc\u0ddd\7\u00a5\2\2\u0ddd\u0ddf"+
		"\5\u024a\u0126\2\u0dde\u0ddc\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u0dee\3"+
		"\2\2\2\u0de0\u0de1\7?\2\2\u0de1\u0de2\7\21\2\2\u0de2\u0de7\5\u00fa~\2"+
		"\u0de3\u0de4\7\u03b5\2\2\u0de4\u0de6\5\u00fa~\2\u0de5\u0de3\3\2\2\2\u0de6"+
		"\u0de9\3\2\2\2\u0de7\u0de5\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0dec\3\2"+
		"\2\2\u0de9\u0de7\3\2\2\2\u0dea\u0deb\7\u00a7\2\2\u0deb\u0ded\7\u01d9\2"+
		"\2\u0dec\u0dea\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded\u0def\3\2\2\2\u0dee\u0de0"+
		"\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df2\3\2\2\2\u0df0\u0df1\7@\2\2\u0df1"+
		"\u0df3\5\u024a\u0126\2\u0df2\u0df0\3\2\2\2\u0df2\u0df3\3\2\2\2\u0df3\u00f9"+
		"\3\2\2\2\u0df4\u0df6\5\u024a\u0126\2\u0df5\u0df7\t(\2\2\u0df6\u0df5\3"+
		"\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u00fb\3\2\2\2\u0df8\u0e03\7V\2\2\u0df9"+
		"\u0dfa\5\u0206\u0104\2\u0dfa\u0dfb\7\u03b5\2\2\u0dfb\u0dfd\3\2\2\2\u0dfc"+
		"\u0df9\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u0dfe\3\2\2\2\u0dfe\u0e04\5\u0206"+
		"\u0104\2\u0dff\u0e00\5\u0206\u0104\2\u0e00\u0e01\7\u01a2\2\2\u0e01\u0e02"+
		"\5\u0206\u0104\2\u0e02\u0e04\3\2\2\2\u0e03\u0dfc\3\2\2\2\u0e03\u0dff\3"+
		"\2\2\2\u0e04\u00fd\3\2\2\2\u0e05\u0e06\7\u01f6\2\2\u0e06\u0e0f\7\u020a"+
		"\2\2\u0e07\u0e0c\5\u0114\u008b\2\u0e08\u0e09\7\u03b5\2\2\u0e09\u0e0b\5"+
		"\u0114\u008b\2\u0e0a\u0e08\3\2\2\2\u0e0b\u0e0e\3\2\2\2\u0e0c\u0e0a\3\2"+
		"\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e10\3\2\2\2\u0e0e\u0e0c\3\2\2\2\u0e0f"+
		"\u0e07\3\2\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u00ff\3\2\2\2\u0e11\u0e13\7\u0102"+
		"\2\2\u0e12\u0e14\7\u021e\2\2\u0e13\u0e12\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14"+
		"\u0101\3\2\2\2\u0e15\u0e17\7\u0117\2\2\u0e16\u0e18\7\u021e\2\2\u0e17\u0e16"+
		"\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e1e\3\2\2\2\u0e19\u0e1b\7\13\2\2"+
		"\u0e1a\u0e1c\7\u019e\2\2\u0e1b\u0e1a\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c"+
		"\u0e1d\3\2\2\2\u0e1d\u0e1f\7\u010b\2\2\u0e1e\u0e19\3\2\2\2\u0e1e\u0e1f"+
		"\3\2\2\2\u0e1f\u0e24\3\2\2\2\u0e20\u0e22\7\u019e\2\2\u0e21\u0e20\3\2\2"+
		"\2\u0e21\u0e22\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23\u0e25\7x\2\2\u0e24\u0e21"+
		"\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u0103\3\2\2\2\u0e26\u0e28\7\u01d8\2"+
		"\2\u0e27\u0e29\7\u021e\2\2\u0e28\u0e27\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29"+
		"\u0e2f\3\2\2\2\u0e2a\u0e2c\7\13\2\2\u0e2b\u0e2d\7\u019e\2\2\u0e2c\u0e2b"+
		"\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30\7\u010b\2"+
		"\2\u0e2f\u0e2a\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u0e35\3\2\2\2\u0e31\u0e33"+
		"\7\u019e\2\2\u0e32\u0e31\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e34\3\2\2"+
		"\2\u0e34\u0e36\7x\2\2\u0e35\u0e32\3\2\2\2\u0e35\u0e36\3\2\2\2\u0e36\u0105"+
		"\3\2\2\2\u0e37\u0e38\7\u01de\2\2\u0e38\u0e39\5\u0200\u0101\2\u0e39\u0107"+
		"\3\2\2\2\u0e3a\u0e3c\7\u01d8\2\2\u0e3b\u0e3d\7\u021e\2\2\u0e3c\u0e3b\3"+
		"\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e40\7\u0096\2\2"+
		"\u0e3f\u0e41\7\u01de\2\2\u0e40\u0e3f\3\2\2\2\u0e40\u0e41\3\2\2\2\u0e41"+
		"\u0e42\3\2\2\2\u0e42\u0e43\5\u0200\u0101\2\u0e43\u0109\3\2\2\2\u0e44\u0e45"+
		"\7x\2\2\u0e45\u0e46\7\u01de\2\2\u0e46\u0e47\5\u0200\u0101\2\u0e47\u010b"+
		"\3\2\2\2\u0e48\u0e49\7Z\2\2\u0e49\u0e4a\7\u0230\2\2\u0e4a\u0e4f\5\u0116"+
		"\u008c\2\u0e4b\u0e4c\7\u03b5\2\2\u0e4c\u0e4e\5\u0116\u008c\2\u0e4d\u0e4b"+
		"\3\2\2\2\u0e4e\u0e51\3\2\2\2\u0e4f\u0e4d\3\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50"+
		"\u010d\3\2\2\2\u0e51\u0e4f\3\2\2\2\u0e52\u0e53\7\u009d\2\2\u0e53\u0e54"+
		"\7\u0230\2\2\u0e54\u010f\3\2\2\2\u0e55\u0e56\7\u0085\2\2\u0e56\u0e57\7"+
		"\u00fe\2\2\u0e57\u0e58\7\u03aa\2\2\u0e58\u0e59\t\26\2\2\u0e59\u0111\3"+
		"\2\2\2\u0e5a\u0e5c\7\u0085\2\2\u0e5b\u0e5d\t.\2\2\u0e5c\u0e5b\3\2\2\2"+
		"\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e5f\7\u020a\2\2\u0e5f"+
		"\u0e64\5\u011a\u008e\2\u0e60\u0e61\7\u03b5\2\2\u0e61\u0e63\5\u011a\u008e"+
		"\2\u0e62\u0e60\3\2\2\2\u0e63\u0e66\3\2\2\2\u0e64\u0e62\3\2\2\2\u0e64\u0e65"+
		"\3\2\2\2\u0e65\u0113\3\2\2\2\u0e66\u0e64\3\2\2\2\u0e67\u0e68\7\u00a7\2"+
		"\2\u0e68\u0e69\7\u011e\2\2\u0e69\u0e6f\7\u01e9\2\2\u0e6a\u0e6b\7t\2\2"+
		"\u0e6b\u0e6f\7\u00a8\2\2\u0e6c\u0e6d\7t\2\2\u0e6d\u0e6f\7\u01a7\2\2\u0e6e"+
		"\u0e67\3\2\2\2\u0e6e\u0e6a\3\2\2\2\u0e6e\u0e6c\3\2\2\2\u0e6f\u0115\3\2"+
		"\2\2\u0e70\u0e75\5\u01e8\u00f5\2\u0e71\u0e73\7\f\2\2\u0e72\u0e71\3\2\2"+
		"\2\u0e72\u0e73\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e76\5\u0200\u0101\2"+
		"\u0e75\u0e72\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e78"+
		"\5\u0118\u008d\2\u0e78\u0117\3\2\2\2\u0e79\u0e7b\7t\2\2\u0e7a\u0e7c\7"+
		"\u0172\2\2\u0e7b\u0e7a\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e82\3\2\2\2"+
		"\u0e7d\u0e7f\7\\\2\2\u0e7e\u0e7d\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f\u0e80"+
		"\3\2\2\2\u0e80\u0e82\7\u00a8\2\2\u0e81\u0e79\3\2\2\2\u0e81\u0e7e\3\2\2"+
		"\2\u0e82\u0119\3\2\2\2\u0e83\u0e84\7\u0168\2\2\u0e84\u0e85\7\u0170\2\2"+
		"\u0e85\u0e8b\5\u011c\u008f\2\u0e86\u0e87\7t\2\2\u0e87\u0e8b\7\u00a8\2"+
		"\2\u0e88\u0e89\7t\2\2\u0e89\u0e8b\7\u01a7\2\2\u0e8a\u0e83\3\2\2\2\u0e8a"+
		"\u0e86\3\2\2\2\u0e8a\u0e88\3\2\2\2\u0e8b\u011b\3\2\2\2\u0e8c\u0e8d\7\u026c"+
		"\2\2\u0e8d\u0e94\7t\2\2\u0e8e\u0e8f\7t\2\2\u0e8f\u0e94\7\u026d\2\2\u0e90"+
		"\u0e91\7t\2\2\u0e91\u0e94\7\u026e\2\2\u0e92\u0e94\7\u026f\2\2\u0e93\u0e8c"+
		"\3\2\2\2\u0e93\u0e8e\3\2\2\2\u0e93\u0e90\3\2\2\2\u0e93\u0e92\3\2\2\2\u0e94"+
		"\u011d\3\2\2\2\u0e95\u0e96\7\26\2\2\u0e96\u0e97\7\u0175\2\2\u0e97\u0e98"+
		"\7\u0096\2\2\u0e98\u0e9d\5\u0130\u0099\2\u0e99\u0e9a\7\u03b5\2\2\u0e9a"+
		"\u0e9c\5\u0130\u0099\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e9f\3\2\2\2\u0e9d\u0e9b"+
		"\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0ea1\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0ea0"+
		"\u0ea2\5\u0138\u009d\2\u0ea1\u0ea0\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u011f"+
		"\3\2\2\2\u0ea3\u0ea4\7\26\2\2\u0ea4\u0ea5\7\u01d4\2\2\u0ea5\u0ea6\7\u014a"+
		"\2\2\u0ea6\u0eab\5\u013a\u009e\2\u0ea7\u0ea8\7\u03b5\2\2\u0ea8\u0eaa\5"+
		"\u013a\u009e\2\u0ea9\u0ea7\3\2\2\2\u0eaa\u0ead\3\2\2\2\u0eab\u0ea9\3\2"+
		"\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0121\3\2\2\2\u0ead\u0eab\3\2\2\2\u0eae"+
		"\u0eaf\7r\2\2\u0eaf\u0eb0\t/\2\2\u0eb0\u0eb5\7\u0174\2\2\u0eb1\u0eb2\7"+
		"\u0096\2\2\u0eb2\u0eb6\7\u03c2\2\2\u0eb3\u0eb4\7\16\2\2\u0eb4\u0eb6\7"+
		"\u03c2\2\2\u0eb5\u0eb1\3\2\2\2\u0eb5\u0eb3\3\2\2\2\u0eb6\u0123\3\2\2\2"+
		"\u0eb7\u0eb8\7\u01d5\2\2\u0eb8\u0eb9\7\u0175\2\2\u0eb9\u0125\3\2\2\2\u0eba"+
		"\u0ebb\7\u01d5\2\2\u0ebb\u0ebd\7\u01e7\2\2\u0ebc\u0ebe\7\b\2\2\u0ebd\u0ebc"+
		"\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ec0\3\2\2\2\u0ebf\u0ec1\5\u0138\u009d"+
		"\2\u0ec0\u0ebf\3\2\2\2\u0ec0\u0ec1\3\2\2\2\u0ec1\u0127\3\2\2\2\u0ec2\u0ec3"+
		"\7\u01f6\2\2\u0ec3\u0ecc\7\u01e7\2\2\u0ec4\u0ec9\5\u013e\u00a0\2\u0ec5"+
		"\u0ec6\7\u03b5\2\2\u0ec6\u0ec8\5\u013e\u00a0\2\u0ec7\u0ec5\3\2\2\2\u0ec8"+
		"\u0ecb\3\2\2\2\u0ec9\u0ec7\3\2\2\2\u0ec9\u0eca\3\2\2\2\u0eca\u0ecd\3\2"+
		"\2\2\u0ecb\u0ec9\3\2\2\2\u0ecc\u0ec4\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd"+
		"\u0ed0\3\2\2\2\u0ece\u0ecf\7\u0212\2\2\u0ecf\u0ed1\5\u0140\u00a1\2\u0ed0"+
		"\u0ece\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed5\3\2\2\2\u0ed2\u0ed4\5\u0142"+
		"\u00a2\2\u0ed3\u0ed2\3\2\2\2\u0ed4\u0ed7\3\2\2\2\u0ed5\u0ed3\3\2\2\2\u0ed5"+
		"\u0ed6\3\2\2\2\u0ed6\u0ed9\3\2\2\2\u0ed7\u0ed5\3\2\2\2\u0ed8\u0eda\5\u0138"+
		"\u009d\2\u0ed9\u0ed8\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0129\3\2\2\2\u0edb"+
		"\u0edc\7\u01fc\2\2\u0edc\u0ee5\7\u01e7\2\2\u0edd\u0ee2\5\u013e\u00a0\2"+
		"\u0ede\u0edf\7\u03b5\2\2\u0edf\u0ee1\5\u013e\u00a0\2\u0ee0\u0ede\3\2\2"+
		"\2\u0ee1\u0ee4\3\2\2\2\u0ee2\u0ee0\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee6"+
		"\3\2\2\2\u0ee4\u0ee2\3\2\2\2\u0ee5\u0edd\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6"+
		"\u012b\3\2\2\2\u0ee7\u0ee8\7\u01f6\2\2\u0ee8\u0ee9\7\u0155\2\2\u0ee9\u012d"+
		"\3\2\2\2\u0eea\u0eeb\7\u01fc\2\2\u0eeb\u0eec\7\u0155\2\2\u0eec\u012f\3"+
		"\2\2\2\u0eed\u0eee\5\u0132\u009a\2\u0eee\u0eef\7\u03aa\2\2\u0eef\u0ef0"+
		"\7\u03c2\2\2\u0ef0\u0f0b\3\2\2\2\u0ef1\u0ef2\5\u0134\u009b\2\u0ef2\u0ef3"+
		"\7\u03aa\2\2\u0ef3\u0ef4\5\u0206\u0104\2\u0ef4\u0f0b\3\2\2\2\u0ef5\u0ef6"+
		"\5\u0136\u009c\2\u0ef6\u0ef7\7\u03aa\2\2\u0ef7\u0ef8\t\26\2\2\u0ef8\u0f0b"+
		"\3\2\2\2\u0ef9\u0efa\7\u0179\2\2\u0efa\u0efb\7\u03aa\2\2\u0efb\u0f0b\7"+
		"\u03c5\2\2\u0efc\u0efd\7\u015c\2\2\u0efd\u0efe\7\u03aa\2\2\u0efe\u0f07"+
		"\7\u03b3\2\2\u0eff\u0f04\5\u0200\u0101\2\u0f00\u0f01\7\u03b5\2\2\u0f01"+
		"\u0f03\5\u0200\u0101\2\u0f02\u0f00\3\2\2\2\u0f03\u0f06\3\2\2\2\u0f04\u0f02"+
		"\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f08\3\2\2\2\u0f06\u0f04\3\2\2\2\u0f07"+
		"\u0eff\3\2\2\2\u0f07\u0f08\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0b\7\u03b4"+
		"\2\2\u0f0a\u0eed\3\2\2\2\u0f0a\u0ef1\3\2\2\2\u0f0a\u0ef5\3\2\2\2\u0f0a"+
		"\u0ef9\3\2\2\2\u0f0a\u0efc\3\2\2\2\u0f0b\u0131\3\2\2\2\u0f0c\u0f0d\t\60"+
		"\2\2\u0f0d\u0133\3\2\2\2\u0f0e\u0f0f\t\61\2\2\u0f0f\u0135\3\2\2\2\u0f10"+
		"\u0f11\t\62\2\2\u0f11\u0137\3\2\2\2\u0f12\u0f13\79\2\2\u0f13\u0f14\7\u010d"+
		"\2\2\u0f14\u0f15\7\u03c2\2\2\u0f15\u0139\3\2\2\2\u0f16\u0f17\7\u01cd\2"+
		"\2\u0f17\u0f18\7\u03aa\2\2\u0f18\u0f19\7\u03b3\2\2\u0f19\u0f1a\5\u021e"+
		"\u0110\2\u0f1a\u0f1b\7\u03b4\2\2\u0f1b\u0f48\3\2\2\2\u0f1c\u0f1d\7\u01cf"+
		"\2\2\u0f1d\u0f1e\7\u03aa\2\2\u0f1e\u0f1f\7\u03b3\2\2\u0f1f\u0f20\5\u021e"+
		"\u0110\2\u0f20\u0f21\7\u03b4\2\2\u0f21\u0f48\3\2\2\2\u0f22\u0f23\7\u01ce"+
		"\2\2\u0f23\u0f24\7\u03aa\2\2\u0f24\u0f25\7\u03b3\2\2\u0f25\u0f26\5\u0220"+
		"\u0111\2\u0f26\u0f27\7\u03b4\2\2\u0f27\u0f48\3\2\2\2\u0f28\u0f29\7\u01d0"+
		"\2\2\u0f29\u0f2a\7\u03aa\2\2\u0f2a\u0f2b\7\u03b3\2\2\u0f2b\u0f2c\5\u0220"+
		"\u0111\2\u0f2c\u0f2d\7\u03b4\2\2\u0f2d\u0f48\3\2\2\2\u0f2e\u0f2f\7\u01d2"+
		"\2\2\u0f2f\u0f30\7\u03aa\2\2\u0f30\u0f31\7\u03b3\2\2\u0f31\u0f32\5\u022a"+
		"\u0116\2\u0f32\u0f33\7\u03b4\2\2\u0f33\u0f48\3\2\2\2\u0f34\u0f35\7\u01d3"+
		"\2\2\u0f35\u0f36\7\u03aa\2\2\u0f36\u0f37\7\u03b3\2\2\u0f37\u0f38\5\u022a"+
		"\u0116\2\u0f38\u0f39\7\u03b4\2\2\u0f39\u0f48\3\2\2\2\u0f3a\u0f3b\7\u01d1"+
		"\2\2\u0f3b\u0f3c\7\u03aa\2\2\u0f3c\u0f3d\7\u03b3\2\2\u0f3d\u0f42\5\u013c"+
		"\u009f\2\u0f3e\u0f3f\7\u03b5\2\2\u0f3f\u0f41\5\u013c\u009f\2\u0f40\u0f3e"+
		"\3\2\2\2\u0f41\u0f44\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43"+
		"\u0f45\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f45\u0f46\7\u03b4\2\2\u0f46\u0f48"+
		"\3\2\2\2\u0f47\u0f16\3\2\2\2\u0f47\u0f1c\3\2\2\2\u0f47\u0f22\3\2\2\2\u0f47"+
		"\u0f28\3\2\2\2\u0f47\u0f2e\3\2\2\2\u0f47\u0f34\3\2\2\2\u0f47\u0f3a\3\2"+
		"\2\2\u0f48\u013b\3\2\2\2\u0f49\u0f4a\7\u03b3\2\2\u0f4a\u0f4b\5\u01e8\u00f5"+
		"\2\u0f4b\u0f4c\7\u03b5\2\2\u0f4c\u0f4d\5\u01e8\u00f5\2\u0f4d\u0f4e\7\u03b4"+
		"\2\2\u0f4e\u013d\3\2\2\2\u0f4f\u0f50\t\63\2\2\u0f50\u013f\3\2\2\2\u0f51"+
		"\u0f52\t\64\2\2\u0f52\u0f53\7\u03aa\2\2\u0f53\u0f64\5\u0144\u00a3\2\u0f54"+
		"\u0f55\7\u017b\2\2\u0f55\u0f56\7\u03aa\2\2\u0f56\u0f57\7\u03c2\2\2\u0f57"+
		"\u0f58\7\u03b5\2\2\u0f58\u0f59\7\u017c\2\2\u0f59\u0f5a\7\u03aa\2\2\u0f5a"+
		"\u0f64\5\u0206\u0104\2\u0f5b\u0f5c\7\u01c7\2\2\u0f5c\u0f5d\7\u03aa\2\2"+
		"\u0f5d\u0f5e\7\u03c2\2\2\u0f5e\u0f5f\7\u03b5\2\2\u0f5f\u0f60\7\u01c8\2"+
		"\2\u0f60\u0f61\7\u03aa\2\2\u0f61\u0f64\5\u0206\u0104\2\u0f62\u0f64\7\u01f0"+
		"\2\2\u0f63\u0f51\3\2\2\2\u0f63\u0f54\3\2\2\2\u0f63\u0f5b\3\2\2\2\u0f63"+
		"\u0f62\3\2\2\2\u0f64\u0141\3\2\2\2\u0f65\u0f66\7\u0214\2\2\u0f66\u0f67"+
		"\7\u03aa\2\2\u0f67\u0f72\7\u03c2\2\2\u0f68\u0f69\7\u01b2\2\2\u0f69\u0f6a"+
		"\7\u03aa\2\2\u0f6a\u0f72\7\u03c2\2\2\u0f6b\u0f6c\7\u0127\2\2\u0f6c\u0f6d"+
		"\7\u03aa\2\2\u0f6d\u0f72\7\u03c2\2\2\u0f6e\u0f6f\7\u01b5\2\2\u0f6f\u0f70"+
		"\7\u03aa\2\2\u0f70\u0f72\7\u03c2\2\2\u0f71\u0f65\3\2\2\2\u0f71\u0f68\3"+
		"\2\2\2\u0f71\u0f6b\3\2\2\2\u0f71\u0f6e\3\2\2\2\u0f72\u0143\3\2\2\2\u0f73"+
		"\u0f78\5\u01f8\u00fd\2\u0f74\u0f75\7\u03b5\2\2\u0f75\u0f77\5\u01f8\u00fd"+
		"\2\u0f76\u0f74\3\2\2\2\u0f77\u0f7a\3\2\2\2\u0f78\u0f76\3\2\2\2\u0f78\u0f79"+
		"\3\2\2\2\u0f79\u0f7d\3\2\2\2\u0f7a\u0f78\3\2\2\2\u0f7b\u0f7d\7\u03c2\2"+
		"\2\u0f7c\u0f73\3\2\2\2\u0f7c\u0f7b\3\2\2\2\u0f7d\u0145\3\2\2\2\u0f7e\u0f7f"+
		"\7\u0221\2\2\u0f7f\u0f80\t\65\2\2\u0f80\u0f82\5\u01fa\u00fe\2\u0f81\u0f83"+
		"\t\66\2\2\u0f82\u0f81\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83\u0147\3\2\2\2"+
		"\u0f84\u0f85\7\u0221\2\2\u0f85\u0f86\7\u0135\2\2\u0f86\u0f8c\5\u01fa\u00fe"+
		"\2\u0f87\u0f8a\7\u0202\2\2\u0f88\u0f89\79\2\2\u0f89\u0f8b\7\u0193\2\2"+
		"\u0f8a\u0f88\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8d\3\2\2\2\u0f8c\u0f87"+
		"\3\2\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u0149\3\2\2\2\u0f8e\u0f8f\7\u0221\2"+
		"\2\u0f8f\u0f90\7\u01b9\2\2\u0f90\u0f91\5\u01fa\u00fe\2\u0f91\u014b\3\2"+
		"\2\2\u0f92\u0f93\7\u0221\2\2\u0f93\u0f94\7\u0117\2\2\u0f94\u0f97\5\u01fa"+
		"\u00fe\2\u0f95\u0f96\7\u01a5\2\2\u0f96\u0f98\7\u01b3\2\2\u0f97\u0f95\3"+
		"\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u014d\3\2\2\2\u0f99\u0f9a\7\u0221\2\2"+
		"\u0f9a\u0f9b\7\u01d8\2\2\u0f9b\u0f9c\5\u01fa\u00fe\2\u0f9c\u014f\3\2\2"+
		"\2\u0f9d\u0f9e\7\u0221\2\2\u0f9e\u0fa1\7\u01c3\2\2\u0f9f\u0fa0\7\36\2"+
		"\2\u0fa0\u0fa2\5\u01fa\u00fe\2\u0fa1\u0f9f\3\2\2\2\u0fa1\u0fa2\3\2\2\2"+
		"\u0fa2\u0151\3\2\2\2\u0fa3\u0fa4\7\u01b9\2\2\u0fa4\u0fa5\5\u0200\u0101"+
		"\2\u0fa5\u0fa8\7<\2\2\u0fa6\u0fa9\7\u03c2\2\2\u0fa7\u0fa9\7\u03cd\2\2"+
		"\u0fa8\u0fa6\3\2\2\2\u0fa8\u0fa7\3\2\2\2\u0fa9\u0153\3\2\2\2\u0faa\u0fab"+
		"\7\u0232\2\2\u0fab\u0fae\5\u0200\u0101\2\u0fac\u0fad\7\u00a2\2\2\u0fad"+
		"\u0faf\5\u022c\u0117\2\u0fae\u0fac\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0155"+
		"\3\2\2\2\u0fb0\u0fb1\t\67\2\2\u0fb1\u0fb2\7\u01b9\2\2\u0fb2\u0fb3\5\u0200"+
		"\u0101\2\u0fb3\u0157\3\2\2\2\u0fb4\u0fb7\5\u015a\u00ae\2\u0fb5\u0fb7\5"+
		"\6\4\2\u0fb6\u0fb4\3\2\2\2\u0fb6\u0fb5\3\2\2\2\u0fb7\u0159\3\2\2\2\u0fb8"+
		"\u0fb9\5\u0200\u0101\2\u0fb9\u0fba\7\u03be\2\2\u0fba\u0fbc\3\2\2\2\u0fbb"+
		"\u0fb8\3\2\2\2\u0fbb\u0fbc\3\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0fe3\7\u0102"+
		"\2\2\u0fbe\u0fbf\5\u016e\u00b8\2\u0fbf\u0fc0\7\u03b6\2\2\u0fc0\u0fc2\3"+
		"\2\2\2\u0fc1\u0fbe\3\2\2\2\u0fc2\u0fc5\3\2\2\2\u0fc3\u0fc1\3\2\2\2\u0fc3"+
		"\u0fc4\3\2\2\2\u0fc4\u0fcb\3\2\2\2\u0fc5\u0fc3\3\2\2\2\u0fc6\u0fc7\5\u0170"+
		"\u00b9\2\u0fc7\u0fc8\7\u03b6\2\2\u0fc8\u0fca\3\2\2\2\u0fc9\u0fc6\3\2\2"+
		"\2\u0fca\u0fcd\3\2\2\2\u0fcb\u0fc9\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fd3"+
		"\3\2\2\2\u0fcd\u0fcb\3\2\2\2\u0fce\u0fcf\5\u0172\u00ba\2\u0fcf\u0fd0\7"+
		"\u03b6\2\2\u0fd0\u0fd2\3\2\2\2\u0fd1\u0fce\3\2\2\2\u0fd2\u0fd5\3\2\2\2"+
		"\u0fd3\u0fd1\3\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fdb\3\2\2\2\u0fd5\u0fd3"+
		"\3\2\2\2\u0fd6\u0fd7\5\u0174\u00bb\2\u0fd7\u0fd8\7\u03b6\2\2\u0fd8\u0fda"+
		"\3\2\2\2\u0fd9\u0fd6\3\2\2\2\u0fda\u0fdd\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdb"+
		"\u0fdc\3\2\2\2\u0fdc\u0fdf\3\2\2\2\u0fdd\u0fdb\3\2\2\2\u0fde\u0fe0\5\u0178"+
		"\u00bd\2\u0fdf\u0fde\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fdf\3\2\2\2\u0fe1"+
		"\u0fe2\3\2\2\2\u0fe2\u0fe4\3\2\2\2\u0fe3\u0fc3\3\2\2\2\u0fe3\u0fe4\3\2"+
		"\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0fe7\7\u0135\2\2\u0fe6\u0fe8\5\u0200\u0101"+
		"\2\u0fe7\u0fe6\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8\u015b\3\2\2\2\u0fe9\u0fec"+
		"\7\24\2\2\u0fea\u0fed\5\u0200\u0101\2\u0feb\u0fed\5\u024a\u0126\2\u0fec"+
		"\u0fea\3\2\2\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0fef\3\2"+
		"\2\2\u0fee\u0ff0\5\u017a\u00be\2\u0fef\u0fee\3\2\2\2\u0ff0\u0ff1\3\2\2"+
		"\2\u0ff1\u0fef\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff9\3\2\2\2\u0ff3\u0ff5"+
		"\7\60\2\2\u0ff4\u0ff6\5\u0178\u00bd\2\u0ff5\u0ff4\3\2\2\2\u0ff6\u0ff7"+
		"\3\2\2\2\u0ff7\u0ff5\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0ffa\3\2\2\2\u0ff9"+
		"\u0ff3\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb\u0ffc\7\u0135"+
		"\2\2\u0ffc\u0ffd\7\24\2\2\u0ffd\u015d\3\2\2\2\u0ffe\u0fff\7B\2\2\u0fff"+
		"\u1000\5\u024a\u0126\2\u1000\u1002\7\u0095\2\2\u1001\u1003\5\u0178\u00bd"+
		"\2\u1002\u1001\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u1002\3\2\2\2\u1004\u1005"+
		"\3\2\2\2\u1005\u1009\3\2\2\2\u1006\u1008\5\u017c\u00bf\2\u1007\u1006\3"+
		"\2\2\2\u1008\u100b\3\2\2\2\u1009\u1007\3\2\2\2\u1009\u100a\3\2\2\2\u100a"+
		"\u1012\3\2\2\2\u100b\u1009\3\2\2\2\u100c\u100e\7\60\2\2\u100d\u100f\5"+
		"\u0178\u00bd\2\u100e\u100d\3\2\2\2\u100f\u1010\3\2\2\2\u1010\u100e\3\2"+
		"\2\2\u1010\u1011\3\2\2\2\u1011\u1013\3\2\2\2\u1012\u100c\3\2\2\2\u1012"+
		"\u1013\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1015\7\u0135\2\2\u1015\u1016"+
		"\7B\2\2\u1016\u015f\3\2\2\2\u1017\u1018\7M\2\2\u1018\u1019\5\u0200\u0101"+
		"\2\u1019\u0161\3\2\2\2\u101a\u101b\7S\2\2\u101b\u101c\5\u0200\u0101\2"+
		"\u101c\u0163\3\2\2\2\u101d\u101e\5\u0200\u0101\2\u101e\u101f\7\u03be\2"+
		"\2\u101f\u1021\3\2\2\2\u1020\u101d\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1022"+
		"\3\2\2\2\u1022\u1024\7[\2\2\u1023\u1025\5\u0178\u00bd\2\u1024\u1023\3"+
		"\2\2\2\u1025\u1026\3\2\2\2\u1026\u1024\3\2\2\2\u1026\u1027\3\2\2\2\u1027"+
		"\u1028\3\2\2\2\u1028\u1029\7\u0135\2\2\u1029\u102b\7[\2\2\u102a\u102c"+
		"\5\u0200\u0101\2\u102b\u102a\3\2\2\2\u102b\u102c\3\2\2\2\u102c\u0165\3"+
		"\2\2\2\u102d\u102e\5\u0200\u0101\2\u102e\u102f\7\u03be\2\2\u102f\u1031"+
		"\3\2\2\2\u1030\u102d\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1032\3\2\2\2\u1032"+
		"\u1034\7z\2\2\u1033\u1035\5\u0178\u00bd\2\u1034\u1033\3\2\2\2\u1035\u1036"+
		"\3\2\2\2\u1036\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u1038\3\2\2\2\u1038"+
		"\u1039\7\u0212\2\2\u1039\u103a\5\u024a\u0126\2\u103a\u103b\7\u0135\2\2"+
		"\u103b\u103d\7z\2\2\u103c\u103e\5\u0200\u0101\2\u103d\u103c\3\2\2\2\u103d"+
		"\u103e\3\2\2\2\u103e\u0167\3\2\2\2\u103f\u1040\7~\2\2\u1040\u1041\5\u024a"+
		"\u0126\2\u1041\u0169\3\2\2\2\u1042\u1043\5\u0200\u0101\2\u1043\u1044\7"+
		"\u03be\2\2\u1044\u1046\3\2\2\2\u1045\u1042\3\2\2\2\u1045\u1046\3\2\2\2"+
		"\u1046\u1047\3\2\2\2\u1047\u1048\7\u00a6\2\2\u1048\u1049\5\u024a\u0126"+
		"\2\u1049\u104b\7\u012f\2\2\u104a\u104c\5\u0178\u00bd\2\u104b\u104a\3\2"+
		"\2\2\u104c\u104d\3\2\2\2\u104d\u104b\3\2\2\2\u104d\u104e\3\2\2\2\u104e"+
		"\u104f\3\2\2\2\u104f\u1050\7\u0135\2\2\u1050\u1052\7\u00a6\2\2\u1051\u1053"+
		"\5\u0200\u0101\2\u1052\u1051\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u016b\3"+
		"\2\2\2\u1054\u1055\7\u0111\2\2\u1055\u1064\5\u0200\u0101\2\u1056\u105b"+
		"\78\2\2\u1057\u1059\7\u019d\2\2\u1058\u1057\3\2\2\2\u1058\u1059\3\2\2"+
		"\2\u1059\u105a\3\2\2\2\u105a\u105c\7<\2\2\u105b\u1058\3\2\2\2\u105b\u105c"+
		"\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u105e\5\u0200\u0101\2\u105e\u105f\7"+
		"K\2\2\u105f\u1060\5\u021e\u0110\2\u1060\u1064\3\2\2\2\u1061\u1062\7\u01a8"+
		"\2\2\u1062\u1064\5\u0200\u0101\2\u1063\u1054\3\2\2\2\u1063\u1056\3\2\2"+
		"\2\u1063\u1061\3\2\2\2\u1064\u016d\3\2\2\2\u1065\u1066\7%\2\2\u1066\u1067"+
		"\5\u021e\u0110\2\u1067\u106a\5\u0214\u010b\2\u1068\u1069\7&\2\2\u1069"+
		"\u106b\5\u022e\u0118\2\u106a\u1068\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u016f"+
		"\3\2\2\2\u106c\u106d\7%\2\2\u106d\u106e\5\u0200\u0101\2\u106e\u106f\7"+
		"\33\2\2\u106f\u1076\79\2\2\u1070\u1077\5\u0206\u0104\2\u1071\u1073\7\u008b"+
		"\2\2\u1072\u1074\7\u0218\2\2\u1073\u1072\3\2\2\2\u1073\u1074\3\2\2\2\u1074"+
		"\u1075\3\2\2\2\u1075\u1077\7\u03c2\2\2\u1076\u1070\3\2\2\2\u1076\u1071"+
		"\3\2\2\2\u1077\u0171\3\2\2\2\u1078\u1079\7%\2\2\u1079\u107a\5\u0200\u0101"+
		"\2\u107a\u107b\7\"\2\2\u107b\u107c\79\2\2\u107c\u107d\5\u00b4[\2\u107d"+
		"\u0173\3\2\2\2\u107e\u107f\7%\2\2\u107f\u1080\t8\2\2\u1080\u1081\7\u0156"+
		"\2\2\u1081\u1082\79\2\2\u1082\u1087\5\u0176\u00bc\2\u1083\u1084\7\u03b5"+
		"\2\2\u1084\u1086\5\u0176\u00bc\2\u1085\u1083\3\2\2\2\u1086\u1089\3\2\2"+
		"\2\u1087\u1085\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u108a\3\2\2\2\u1089\u1087"+
		"\3\2\2\2\u108a\u108b\5\u0158\u00ad\2\u108b\u0175\3\2\2\2\u108c\u1098\5"+
		"\u0206\u0104\2\u108d\u108f\7\u008b\2\2\u108e\u1090\7\u0218\2\2\u108f\u108e"+
		"\3\2\2\2\u108f\u1090\3\2\2\2\u1090\u1091\3\2\2\2\u1091\u1098\7\u03c2\2"+
		"\2\u1092\u1098\5\u0200\u0101\2\u1093\u1098\7\u008c\2\2\u1094\u1095\7c"+
		"\2\2\u1095\u1098\7\u014f\2\2\u1096\u1098\7\u008a\2\2\u1097\u108c\3\2\2"+
		"\2\u1097\u108d\3\2\2\2\u1097\u1092\3\2\2\2\u1097\u1093\3\2\2\2\u1097\u1094"+
		"\3\2\2\2\u1097\u1096\3\2\2\2\u1098\u0177\3\2\2\2\u1099\u109c\5\24\13\2"+
		"\u109a\u109c\5\6\4\2\u109b\u1099\3\2\2\2\u109b\u109a\3\2\2\2\u109c\u109d"+
		"\3\2\2\2\u109d\u109e\7\u03b6\2\2\u109e\u0179\3\2\2\2\u109f\u10a2\7\u00a4"+
		"\2\2\u10a0\u10a3\5\u0212\u010a\2\u10a1\u10a3\5\u024a\u0126\2\u10a2\u10a0"+
		"\3\2\2\2\u10a2\u10a1\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a6\7\u0095\2"+
		"\2\u10a5\u10a7\5\u0178\u00bd\2\u10a6\u10a5\3\2\2\2\u10a7\u10a8\3\2\2\2"+
		"\u10a8\u10a6\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u017b\3\2\2\2\u10aa\u10ab"+
		"\7\61\2\2\u10ab\u10ac\5\u024a\u0126\2\u10ac\u10ae\7\u0095\2\2\u10ad\u10af"+
		"\5\u0178\u00bd\2\u10ae\u10ad\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10ae\3"+
		"\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u017d\3\2\2\2\u10b2\u10b3\7\t\2\2\u10b3"+
		"\u10b4\7\u0214\2\2\u10b4\u10b9\5\u0190\u00c9\2\u10b5\u10b6\7\u03b5\2\2"+
		"\u10b6\u10b8\5\u0190\u00c9\2\u10b7\u10b5\3\2\2\2\u10b8\u10bb\3\2\2\2\u10b9"+
		"\u10b7\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u10e9\3\2\2\2\u10bb\u10b9\3\2"+
		"\2\2\u10bc\u10bd\7\t\2\2\u10bd\u10bf\7\u0214\2\2\u10be\u10c0\5\u0232\u011a"+
		"\2\u10bf\u10be\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1\u10c6"+
		"\5\u0192\u00ca\2\u10c2\u10c3\7\u03b5\2\2\u10c3\u10c5\5\u0192\u00ca\2\u10c4"+
		"\u10c2\3\2\2\2\u10c5\u10c8\3\2\2\2\u10c6\u10c4\3\2\2\2\u10c6\u10c7\3\2"+
		"\2\2\u10c7\u10d7\3\2\2\2\u10c8\u10c6\3\2\2\2\u10c9\u10d5\7|\2\2\u10ca"+
		"\u10d6\7\u01a0\2\2\u10cb\u10d2\5\u0194\u00cb\2\u10cc\u10ce\7\13\2\2\u10cd"+
		"\u10cc\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u10d1\5\u0194"+
		"\u00cb\2\u10d0\u10cd\3\2\2\2\u10d1\u10d4\3\2\2\2\u10d2\u10d0\3\2\2\2\u10d2"+
		"\u10d3\3\2\2\2\u10d3\u10d6\3\2\2\2\u10d4\u10d2\3\2\2\2\u10d5\u10ca\3\2"+
		"\2\2\u10d5\u10cb\3\2\2\2\u10d6\u10d8\3\2\2\2\u10d7\u10c9\3\2\2\2\u10d7"+
		"\u10d8\3\2\2\2\u10d8\u10df\3\2\2\2\u10d9\u10db\7\u00a7\2\2\u10da\u10dc"+
		"\5\u0196\u00cc\2\u10db\u10da\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10db\3"+
		"\2\2\2\u10dd\u10de\3\2\2\2\u10de\u10e0\3\2\2\2\u10df\u10d9\3\2\2\2\u10df"+
		"\u10e0\3\2\2\2\u10e0\u10e5\3\2\2\2\u10e1\u10e4\5\u0198\u00cd\2\u10e2\u10e4"+
		"\5\u019a\u00ce\2\u10e3\u10e1\3\2\2\2\u10e3\u10e2\3\2\2\2\u10e4\u10e7\3"+
		"\2\2\2\u10e5\u10e3\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10e9\3\2\2\2\u10e7"+
		"\u10e5\3\2\2\2\u10e8\u10b2\3\2\2\2\u10e8\u10bc\3\2\2\2\u10e9\u017f\3\2"+
		"\2\2\u10ea\u10eb\7\37\2\2\u10eb\u10ec\7\u0214\2\2\u10ec\u10f1\5\u0192"+
		"\u00ca\2\u10ed\u10ee\7\u03b5\2\2\u10ee";
	private static final String _serializedATNSegment2 =
		"\u10f0\5\u0192\u00ca\2\u10ef\u10ed\3\2\2\2\u10f0\u10f3\3\2\2\2\u10f1\u10ef"+
		"\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u1121\3\2\2\2\u10f3\u10f1\3\2\2\2\u10f4"+
		"\u10f5\7\37\2\2\u10f5\u10f7\7\u0214\2\2\u10f6\u10f8\5\u0234\u011b\2\u10f7"+
		"\u10f6\3\2\2\2\u10f7\u10f8\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u10fe\5\u0192"+
		"\u00ca\2\u10fa\u10fb\7\u03b5\2\2\u10fb\u10fd\5\u0192\u00ca\2\u10fc\u10fa"+
		"\3\2\2\2\u10fd\u1100\3\2\2\2\u10fe\u10fc\3\2\2\2\u10fe\u10ff\3\2\2\2\u10ff"+
		"\u110f\3\2\2\2\u1100\u10fe\3\2\2\2\u1101\u110d\7|\2\2\u1102\u110e\7\u01a0"+
		"\2\2\u1103\u110a\5\u0194\u00cb\2\u1104\u1106\7\13\2\2\u1105\u1104\3\2"+
		"\2\2\u1105\u1106\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u1109\5\u0194\u00cb"+
		"\2\u1108\u1105\3\2\2\2\u1109\u110c\3\2\2\2\u110a\u1108\3\2\2\2\u110a\u110b"+
		"\3\2\2\2\u110b\u110e\3\2\2\2\u110c\u110a\3\2\2\2\u110d\u1102\3\2\2\2\u110d"+
		"\u1103\3\2\2\2\u110e\u1110\3\2\2\2\u110f\u1101\3\2\2\2\u110f\u1110\3\2"+
		"\2\2\u1110\u1117\3\2\2\2\u1111\u1113\7\u00a7\2\2\u1112\u1114\5\u0196\u00cc"+
		"\2\u1113\u1112\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1113\3\2\2\2\u1115\u1116"+
		"\3\2\2\2\u1116\u1118\3\2\2\2\u1117\u1111\3\2\2\2\u1117\u1118\3\2\2\2\u1118"+
		"\u111d\3\2\2\2\u1119\u111c\5\u0198\u00cd\2\u111a\u111c\5\u019a\u00ce\2"+
		"\u111b\u1119\3\2\2\2\u111b\u111a\3\2\2\2\u111c\u111f\3\2\2\2\u111d\u111b"+
		"\3\2\2\2\u111d\u111e\3\2\2\2\u111e\u1121\3\2\2\2\u111f\u111d\3\2\2\2\u1120"+
		"\u10ea\3\2\2\2\u1120\u10f4\3\2\2\2\u1121\u0181\3\2\2\2\u1122\u1123\7."+
		"\2\2\u1123\u1125\7\u0214\2\2\u1124\u1126\5\u0232\u011a\2\u1125\u1124\3"+
		"\2\2\2\u1125\u1126\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u112c\5\u01ee\u00f8"+
		"\2\u1128\u1129\7\u03b5\2\2\u1129\u112b\5\u01ee\u00f8\2\u112a\u1128\3\2"+
		"\2\2\u112b\u112e\3\2\2\2\u112c\u112a\3\2\2\2\u112c\u112d\3\2\2\2\u112d"+
		"\u0183\3\2\2\2\u112e\u112c\3\2\2\2\u112f\u1130\7>\2\2\u1130\u1135\5\u019c"+
		"\u00cf\2\u1131\u1132\7\u03b5\2\2\u1132\u1134\5\u019c\u00cf\2\u1133\u1131"+
		"\3\2\2\2\u1134\u1137\3\2\2\2\u1135\u1133\3\2\2\2\u1135\u1136\3\2\2\2\u1136"+
		"\u1138\3\2\2\2\u1137\u1135\3\2\2\2\u1138\u113a\7f\2\2\u1139\u113b\t9\2"+
		"\2\u113a\u1139\3\2\2\2\u113a\u113b\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u113d"+
		"\5\u01a0\u00d1\2\u113d\u113e\7\u0096\2\2\u113e\u1143\5\u0192\u00ca\2\u113f"+
		"\u1140\7\u03b5\2\2\u1140\u1142\5\u0192\u00ca\2\u1141\u113f\3\2\2\2\u1142"+
		"\u1145\3\2\2\2\u1143\u1141\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u1154\3\2"+
		"\2\2\u1145\u1143\3\2\2\2\u1146\u1152\7|\2\2\u1147\u1153\7\u01a0\2\2\u1148"+
		"\u114f\5\u0194\u00cb\2\u1149\u114b\7\13\2\2\u114a\u1149\3\2\2\2\u114a"+
		"\u114b\3\2\2\2\u114b\u114c\3\2\2\2\u114c\u114e\5\u0194\u00cb\2\u114d\u114a"+
		"\3\2\2\2\u114e\u1151\3\2\2\2\u114f\u114d\3\2\2\2\u114f\u1150\3\2\2\2\u1150"+
		"\u1153\3\2\2\2\u1151\u114f\3\2\2\2\u1152\u1147\3\2\2\2\u1152\u1148\3\2"+
		"\2\2\u1153\u1155\3\2\2\2\u1154\u1146\3\2\2\2\u1154\u1155\3\2\2\2\u1155"+
		"\u115f\3\2\2\2\u1156\u115c\7\u00a7\2\2\u1157\u1158\7>\2\2\u1158\u115b"+
		"\7h\2\2\u1159\u115b\5\u0196\u00cc\2\u115a\u1157\3\2\2\2\u115a\u1159\3"+
		"\2\2\2\u115b\u115e\3\2\2\2\u115c\u115a\3\2\2\2\u115c\u115d\3\2\2\2\u115d"+
		"\u1160\3\2\2\2\u115e\u115c\3\2\2\2\u115f\u1156\3\2\2\2\u115f\u1160\3\2"+
		"\2\2\u1160\u0185\3\2\2\2\u1161\u1162\7>\2\2\u1162\u1163\7\u01bf\2\2\u1163"+
		"\u1164\7f\2\2\u1164\u1165\5\u01ee\u00f8\2\u1165\u1166\7\u0096\2\2\u1166"+
		"\u116b\5\u01ee\u00f8\2\u1167\u1168\7\u03b5\2\2\u1168\u116a\5\u01ee\u00f8"+
		"\2\u1169\u1167\3\2\2\2\u116a\u116d\3\2\2\2\u116b\u1169\3\2\2\2\u116b\u116c"+
		"\3\2\2\2\u116c\u1171\3\2\2\2\u116d\u116b\3\2\2\2\u116e\u116f\7\u00a7\2"+
		"\2\u116f\u1170\7>\2\2\u1170\u1172\7h\2\2\u1171\u116e\3\2\2\2\u1171\u1172"+
		"\3\2\2\2\u1172\u0187\3\2\2\2\u1173\u1174\7y\2\2\u1174\u1175\7\u0214\2"+
		"\2\u1175\u117a\5\u01a2\u00d2\2\u1176\u1177\7\u03b5\2\2\u1177\u1179\5\u01a2"+
		"\u00d2\2\u1178\u1176\3\2\2\2\u1179\u117c\3\2\2\2\u117a\u1178\3\2\2\2\u117a"+
		"\u117b\3\2\2\2\u117b\u0189\3\2\2\2\u117c\u117a\3\2\2\2\u117d\u117e\7\177"+
		"\2\2\u117e\u1183\5\u019c\u00cf\2\u117f\u1180\7\u03b5\2\2\u1180\u1182\5"+
		"\u019c\u00cf\2\u1181\u117f\3\2\2\2\u1182\u1185\3\2\2\2\u1183\u1181\3\2"+
		"\2\2\u1183\u1184\3\2\2\2\u1184\u1186\3\2\2\2\u1185\u1183\3\2\2\2\u1186"+
		"\u1188\7f\2\2\u1187\u1189\t9\2\2\u1188\u1187\3\2\2\2\u1188\u1189\3\2\2"+
		"\2\u1189\u118a\3\2\2\2\u118a\u118b\5\u01a0\u00d1\2\u118b\u118c\7<\2\2"+
		"\u118c\u1191\5\u01ee\u00f8\2\u118d\u118e\7\u03b5\2\2\u118e\u1190\5\u01ee"+
		"\u00f8\2\u118f\u118d\3\2\2\2\u1190\u1193\3\2\2\2\u1191\u118f\3\2\2\2\u1191"+
		"\u1192\3\2\2\2\u1192\u11a6\3\2\2\2\u1193\u1191\3\2\2\2\u1194\u1195\7\177"+
		"\2\2\u1195\u1197\7\b\2\2\u1196\u1198\7\u0238\2\2\u1197\u1196\3\2\2\2\u1197"+
		"\u1198\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\7\u03b5\2\2\u119a\u119b"+
		"\7>\2\2\u119b\u119c\7h\2\2\u119c\u119d\7<\2\2\u119d\u11a2\5\u01ee\u00f8"+
		"\2\u119e\u119f\7\u03b5\2\2\u119f\u11a1\5\u01ee\u00f8\2\u11a0\u119e\3\2"+
		"\2\2\u11a1\u11a4\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3"+
		"\u11a6\3\2\2\2\u11a4\u11a2\3\2\2\2\u11a5\u117d\3\2\2\2\u11a5\u1194\3\2"+
		"\2\2\u11a6\u018b\3\2\2\2\u11a7\u11a8\7\177\2\2\u11a8\u11a9\7\u01bf\2\2"+
		"\u11a9\u11aa\7f\2\2\u11aa\u11ab\5\u01ee\u00f8\2\u11ab\u11ac\7<\2\2\u11ac"+
		"\u11b1\5\u01ee\u00f8\2\u11ad\u11ae\7\u03b5\2\2\u11ae\u11b0\5\u01ee\u00f8"+
		"\2\u11af\u11ad\3\2\2\2\u11b0\u11b3\3\2\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b2"+
		"\3\2\2\2\u11b2\u018d\3\2\2\2\u11b3\u11b1\3\2\2\2\u11b4\u11b5\7\u0085\2"+
		"\2\u11b5\u11b8\7\u01b2\2\2\u11b6\u11b7\79\2\2\u11b7\u11b9\5\u01ee\u00f8"+
		"\2\u11b8\u11b6\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba\u11bd"+
		"\7\u03aa\2\2\u11bb\u11be\5\u0244\u0123\2\u11bc\u11be\7\u03c2\2\2\u11bd"+
		"\u11bb\3\2\2\2\u11bd\u11bc\3\2\2\2\u11be\u018f\3\2\2\2\u11bf\u11c0\5\u01ee"+
		"\u00f8\2\u11c0\u11c1\5\u0198\u00cd\2\u11c1\u0191\3\2\2\2\u11c2\u11c3\5"+
		"\u01ee\u00f8\2\u11c3\u11c4\7\u015b\2\2\u11c4\u11c5\7\21\2\2\u11c5\u11c6"+
		"\7\u01b2\2\2\u11c6\u11c7\7\u03c2\2\2\u11c7\u11db\3\2\2\2\u11c8\u11c9\5"+
		"\u01ee\u00f8\2\u11c9\u11cc\7\u015b\2\2\u11ca\u11cb\7\u00a7\2\2\u11cb\u11cd"+
		"\5\u01fe\u0100\2\u11cc\u11ca\3\2\2\2\u11cc\u11cd\3\2\2\2\u11cd\u11ce\3"+
		"\2\2\2\u11ce\u11cf\7\21\2\2\u11cf\u11d0\7\u03c2\2\2\u11d0\u11db\3\2\2"+
		"\2\u11d1\u11d2\5\u01ee\u00f8\2\u11d2\u11d3\7\u015b\2\2\u11d3\u11d4\7\u00a7"+
		"\2\2\u11d4\u11d7\5\u01fe\u0100\2\u11d5\u11d6\7\f\2\2\u11d6\u11d8\7\u03c2"+
		"\2\2\u11d7\u11d5\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11db\3\2\2\2\u11d9"+
		"\u11db\5\u01ee\u00f8\2\u11da\u11c2\3\2\2\2\u11da\u11c8\3\2\2\2\u11da\u11d1"+
		"\3\2\2\2\u11da\u11d9\3\2\2\2\u11db\u0193\3\2\2\2\u11dc\u11e5\7\u0090\2"+
		"\2\u11dd\u11e5\7\u0220\2\2\u11de\u11df\7\u010f\2\2\u11df\u11e5\7\u03c2"+
		"\2\2\u11e0\u11e1\7\u0169\2\2\u11e1\u11e5\7\u03c2\2\2\u11e2\u11e3\7\u01ff"+
		"\2\2\u11e3\u11e5\7\u03c2\2\2\u11e4\u11dc\3\2\2\2\u11e4\u11dd\3\2\2\2\u11e4"+
		"\u11de\3\2\2\2\u11e4\u11e0\3\2\2\2\u11e4\u11e2\3\2\2\2\u11e5\u0195\3\2"+
		"\2\2\u11e6\u11e7\7\u018b\2\2\u11e7\u11ef\5\u0206\u0104\2\u11e8\u11e9\7"+
		"\u018e\2\2\u11e9\u11ef\5\u0206\u0104\2\u11ea\u11eb\7\u018a\2\2\u11eb\u11ef"+
		"\5\u0206\u0104\2\u11ec\u11ed\7\u018f\2\2\u11ed\u11ef\5\u0206\u0104\2\u11ee"+
		"\u11e6\3\2\2\2\u11ee\u11e8\3\2\2\2\u11ee\u11ea\3\2\2\2\u11ee\u11ec\3\2"+
		"\2\2\u11ef\u0197\3\2\2\2\u11f0\u11f1\7\u01b2\2\2\u11f1\u11f8\7\u0142\2"+
		"\2\u11f2\u11f9\7&\2\2\u11f3\u11f9\7\u019c\2\2\u11f4\u11f5\7J\2\2\u11f5"+
		"\u11f6\5\u0206\u0104\2\u11f6\u11f7\7\u022a\2\2\u11f7\u11f9\3\2\2\2\u11f8"+
		"\u11f2\3\2\2\2\u11f8\u11f3\3\2\2\2\u11f8\u11f4\3\2\2\2\u11f8\u11f9\3\2"+
		"\2\2\u11f9\u0199\3\2\2\2\u11fa\u11fb\7\u00f6\2\2\u11fb\u11fc\t:\2\2\u11fc"+
		"\u019b\3\2\2\2\u11fd\u1202\5\u019e\u00d0\2\u11fe\u11ff\7\u03b3\2\2\u11ff"+
		"\u1200\5\u021e\u0110\2\u1200\u1201\7\u03b4\2\2\u1201\u1203\3\2\2\2\u1202"+
		"\u11fe\3\2\2\2\u1202\u1203\3\2\2\2\u1203\u019d\3\2\2\2\u1204\u1206\7\b"+
		"\2\2\u1205\u1207\7\u0238\2\2\u1206\u1205\3\2\2\2\u1206\u1207\3\2\2\2\u1207"+
		"\u122f\3\2\2\2\u1208\u120a\7\t\2\2\u1209\u120b\7\u0231\2\2\u120a\u1209"+
		"\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u122f\3\2\2\2\u120c\u1213\7\37\2\2"+
		"\u120d\u120e\7\u0206\2\2\u120e\u1214\7\u0230\2\2\u120f\u1214\7\u0231\2"+
		"\2\u1210\u1214\7\u021a\2\2\u1211\u1214\7\u0214\2\2\u1212\u1214\7\u0205"+
		"\2\2\u1213\u120d\3\2\2\2\u1213\u120f\3\2\2\2\u1213\u1210\3\2\2\2\u1213"+
		"\u1211\3\2\2\2\u1213\u1212\3\2\2\2\u1213\u1214\3\2\2\2\u1214\u122f\3\2"+
		"\2\2\u1215\u122f\7(\2\2\u1216\u122f\7.\2\2\u1217\u122f\7\u013d\2\2\u1218"+
		"\u122f\7\u0232\2\2\u1219\u122f\7\u0233\2\2\u121a\u121b\7>\2\2\u121b\u122f"+
		"\7h\2\2\u121c\u122f\7E\2\2\u121d\u122f\7I\2\2\u121e\u121f\7Z\2\2\u121f"+
		"\u122f\7\u0230\2\2\u1220\u122f\7\u0234\2\2\u1221\u122f\7\u01bf\2\2\u1222"+
		"\u122f\7v\2\2\u1223\u122f\7\u0235\2\2\u1224\u1225\7\u01d4\2\2\u1225\u122f"+
		"\t;\2\2\u1226\u122f\7\u0084\2\2\u1227\u1228\7\u0087\2\2\u1228\u122f\t"+
		"<\2\2\u1229\u122f\7\u0236\2\2\u122a\u122f\7\u0237\2\2\u122b\u122f\7\u0098"+
		"\2\2\u122c\u122f\7\u009f\2\2\u122d\u122f\7\u00a0\2\2\u122e\u1204\3\2\2"+
		"\2\u122e\u1208\3\2\2\2\u122e\u120c\3\2\2\2\u122e\u1215\3\2\2\2\u122e\u1216"+
		"\3\2\2\2\u122e\u1217\3\2\2\2\u122e\u1218\3\2\2\2\u122e\u1219\3\2\2\2\u122e"+
		"\u121a\3\2\2\2\u122e\u121c\3\2\2\2\u122e\u121d\3\2\2\2\u122e\u121e\3\2"+
		"\2\2\u122e\u1220\3\2\2\2\u122e\u1221\3\2\2\2\u122e\u1222\3\2\2\2\u122e"+
		"\u1223\3\2\2\2\u122e\u1224\3\2\2\2\u122e\u1226\3\2\2\2\u122e\u1227\3\2"+
		"\2\2\u122e\u1229\3\2\2\2\u122e\u122a\3\2\2\2\u122e\u122b\3\2\2\2\u122e"+
		"\u122c\3\2\2\2\u122e\u122d\3\2\2\2\u122f\u019f\3\2\2\2\u1230\u123e\7\u03a2"+
		"\2\2\u1231\u1232\7\u03a2\2\2\u1232\u1233\7\u03b2\2\2\u1233\u123e\7\u03a2"+
		"\2\2\u1234\u1235\5\u0200\u0101\2\u1235\u1236\7\u03b2\2\2\u1236\u1237\7"+
		"\u03a2\2\2\u1237\u123e\3\2\2\2\u1238\u1239\5\u0200\u0101\2\u1239\u123a"+
		"\7\u03b2\2\2\u123a\u123b\5\u0200\u0101\2\u123b\u123e\3\2\2\2\u123c\u123e"+
		"\5\u0200\u0101\2\u123d\u1230\3\2\2\2\u123d\u1231\3\2\2\2\u123d\u1234\3"+
		"\2\2\2\u123d\u1238\3\2\2\2\u123d\u123c\3\2\2\2\u123e\u01a1\3\2\2\2\u123f"+
		"\u1240\5\u01ee\u00f8\2\u1240\u1241\7\u0096\2\2\u1241\u1242\5\u01ee\u00f8"+
		"\2\u1242\u01a3\3\2\2\2\u1243\u1245\7\n\2\2\u1244\u1246\t=\2\2\u1245\u1244"+
		"\3\2\2\2\u1245\u1246\3\2\2\2\u1246\u1247\3\2\2\2\u1247\u1248\7\u0093\2"+
		"\2\u1248\u1249\5\u0220\u0111\2\u1249\u01a5\3\2\2\2\u124a\u124b\7\30\2"+
		"\2\u124b\u124c\7\u0093\2\2\u124c\u1250\5\u0220\u0111\2\u124d\u124f\5\u01ae"+
		"\u00d8\2\u124e\u124d\3\2\2\2\u124f\u1252\3\2\2\2\u1250\u124e\3\2\2\2\u1250"+
		"\u1251\3\2\2\2\u1251\u01a7\3\2\2\2\u1252\u1250\3\2\2\2\u1253\u1254\7\u010e"+
		"\2\2\u1254\u1255\7\u0093\2\2\u1255\u1257\5\u0220\u0111\2\u1256\u1258\t"+
		">\2\2\u1257\u1256\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u01a9\3\2\2\2\u1259"+
		"\u125b\7g\2\2\u125a\u125c\t=\2\2\u125b\u125a\3\2\2\2\u125b\u125c\3\2\2"+
		"\2\u125c\u125d\3\2\2\2\u125d\u125e\7\u0093\2\2\u125e\u125f\5\u0220\u0111"+
		"\2\u125f\u01ab\3\2\2\2\u1260\u1262\7\u01cc\2\2\u1261\u1263\t=\2\2\u1262"+
		"\u1261\3\2\2\2\u1262\u1263\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265\7\u0093"+
		"\2\2\u1265\u1267\5\u0220\u0111\2\u1266\u1268\7\u01c1\2\2\u1267\u1266\3"+
		"\2\2\2\u1267\u1268\3\2\2\2\u1268\u126a\3\2\2\2\u1269\u126b\7\u0144\2\2"+
		"\u126a\u1269\3\2\2\2\u126a\u126b\3\2\2\2\u126b\u126d\3\2\2\2\u126c\u126e"+
		"\7\u0215\2\2\u126d\u126c\3\2\2\2\u126d\u126e\3\2\2\2\u126e\u01ad\3\2\2"+
		"\2\u126f\u1270\79\2\2\u1270\u1277\7\u0213\2\2\u1271\u1277\7\u01c1\2\2"+
		"\u1272\u1277\7\u0146\2\2\u1273\u1277\7\u0190\2\2\u1274\u1277\7\u0144\2"+
		"\2\u1275\u1277\7\u010c\2\2\u1276\u126f\3\2\2\2\u1276\u1271\3\2\2\2\u1276"+
		"\u1272\3\2\2\2\u1276\u1273\3\2\2\2\u1276\u1274\3\2\2\2\u1276\u1275\3\2"+
		"\2\2\u1277\u01af\3\2\2\2\u1278\u127a\7\37\2\2\u1279\u127b\7\u00f9\2\2"+
		"\u127a\u1279\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u127d"+
		"\7\u0151\2\2\u127d\u127e\5\u0200\u0101\2\u127e\u127f\7\u01d7\2\2\u127f"+
		"\u1280\t?\2\2\u1280\u1281\7\u01ec\2\2\u1281\u1282\7\u03c2\2\2\u1282\u01b1"+
		"\3\2\2\2\u1283\u1284\7\u0162\2\2\u1284\u1285\7\u01b4\2\2\u1285\u1286\5"+
		"\u0200\u0101\2\u1286\u1287\7\u01ec\2\2\u1287\u1288\7\u03c2\2\2\u1288\u01b3"+
		"\3\2\2\2\u1289\u128a\7\u0210\2\2\u128a\u128b\7\u01b4\2\2\u128b\u128c\5"+
		"\u0200\u0101\2\u128c\u01b5\3\2\2\2\u128d\u128e\7\u0085\2\2\u128e\u128f"+
		"\5\u01ba\u00de\2\u128f\u1290\7\u03aa\2\2\u1290\u1298\5\u024a\u0126\2\u1291"+
		"\u1292\7\u03b5\2\2\u1292\u1293\5\u01ba\u00de\2\u1293\u1294\7\u03aa\2\2"+
		"\u1294\u1295\5\u024a\u0126\2\u1295\u1297\3\2\2\2\u1296\u1291\3\2\2\2\u1297"+
		"\u129a\3\2\2\2\u1298\u1296\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u12b3\3\2"+
		"\2\2\u129a\u1298\3\2\2\2\u129b\u129f\7\u0085\2\2\u129c\u129d\7\27\2\2"+
		"\u129d\u12a0\7\u0085\2\2\u129e\u12a0\7\u0293\2\2\u129f\u129c\3\2\2\2\u129f"+
		"\u129e\3\2\2\2\u12a0\u12a3\3\2\2\2\u12a1\u12a4\5\u01f2\u00fa\2\u12a2\u12a4"+
		"\7&\2\2\u12a3\u12a1\3\2\2\2\u12a3\u12a2\3\2\2\2\u12a4\u12b3\3\2\2\2\u12a5"+
		"\u12a6\7\u0085\2\2\u12a6\u12ad\7\u019a\2\2\u12a7\u12aa\5\u01f2\u00fa\2"+
		"\u12a8\u12a9\7\31\2\2\u12a9\u12ab\5\u01f4\u00fb\2\u12aa\u12a8\3\2\2\2"+
		"\u12aa\u12ab\3\2\2\2\u12ab\u12ae\3\2\2\2\u12ac\u12ae\7&\2\2\u12ad\u12a7"+
		"\3\2\2\2\u12ad\u12ac\3\2\2\2\u12ae\u12b3\3\2\2\2\u12af\u12b3\5\u018e\u00c8"+
		"\2\u12b0\u12b3\5\u0112\u008a\2\u12b1\u12b3\5\u0110\u0089\2\u12b2\u128d"+
		"\3\2\2\2\u12b2\u129b\3\2\2\2\u12b2\u12a5\3\2\2\2\u12b2\u12af\3\2\2\2\u12b2"+
		"\u12b0\3\2\2\2\u12b2\u12b1\3\2\2\2\u12b3\u01b7\3\2\2\2\u12b4\u12b5\7\u0087"+
		"\2\2\u12b5\u12b6\t/\2\2\u12b6\u134c\7\u0174\2\2\u12b7\u12b8\7\u0087\2"+
		"\2\u12b8\u12b9\t@\2\2\u12b9\u12bc\7\u013e\2\2\u12ba\u12bb\7D\2\2\u12bb"+
		"\u12bd\7\u03c2\2\2\u12bc\u12ba\3\2\2\2\u12bc\u12bd\3\2\2\2\u12bd\u12c0"+
		"\3\2\2\2\u12be\u12bf\7<\2\2\u12bf\u12c1\5\u0206\u0104\2\u12c0\u12be\3"+
		"\2\2\2\u12c0\u12c1\3\2\2\2\u12c1\u12c9\3\2\2\2\u12c2\u12c6\7V\2\2\u12c3"+
		"\u12c4\5\u0206\u0104\2\u12c4\u12c5\7\u03b5\2\2\u12c5\u12c7\3\2\2\2\u12c6"+
		"\u12c3\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8\u12ca\5\u0206"+
		"\u0104\2\u12c9\u12c2\3\2\2\2\u12c9\u12ca\3\2\2\2\u12ca\u134c\3\2\2\2\u12cb"+
		"\u12cc\7\u0087\2\2\u12cc\u12ce\5\u01bc\u00df\2\u12cd\u12cf\5\u01be\u00e0"+
		"\2\u12ce\u12cd\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u134c\3\2\2\2\u12d0\u12d2"+
		"\7\u0087\2\2\u12d1\u12d3\7\u0150\2\2\u12d2\u12d1\3\2\2\2\u12d2\u12d3\3"+
		"\2\2\2\u12d3\u12d4\3\2\2\2\u12d4\u12d5\t!\2\2\u12d5\u12d6\tA\2\2\u12d6"+
		"\u12d9\5\u01e8\u00f5\2\u12d7\u12d8\tA\2\2\u12d8\u12da\5\u0200\u0101\2"+
		"\u12d9\u12d7\3\2\2\2\u12d9\u12da\3\2\2\2\u12da\u12dc\3\2\2\2\u12db\u12dd"+
		"\5\u01be\u00e0\2\u12dc\u12db\3\2\2\2\u12dc\u12dd\3\2\2\2\u12dd\u134c\3"+
		"\2\2\2\u12de\u12df\7\u0087\2\2\u12df\u12e0\7\37\2\2\u12e0\u12e2\t\2\2"+
		"\2\u12e1\u12e3\5\u0234\u011b\2\u12e2\u12e1\3\2\2\2\u12e2\u12e3\3\2\2\2"+
		"\u12e3\u12e4\3\2\2\2\u12e4\u134c\5\u0200\u0101\2\u12e5\u12e6\7\u0087\2"+
		"\2\u12e6\u12e7\7\37\2\2\u12e7\u12e8\tB\2\2\u12e8\u134c\5\u01e6\u00f4\2"+
		"\u12e9\u12ea\7\u0087\2\2\u12ea\u12eb\7\37\2\2\u12eb\u12ec\7\u0214\2\2"+
		"\u12ec\u134c\5\u01ee\u00f8\2\u12ed\u12ee\7\u0087\2\2\u12ee\u12ef\7\u0137"+
		"\2\2\u12ef\u12f0\5\u01f6\u00fc\2\u12f0\u12f1\tC\2\2\u12f1\u134c\3\2\2"+
		"\2\u12f2\u12f3\7\u0087\2\2\u12f3\u134c\5\u01c0\u00e1\2\u12f4\u12f5\7\u0087"+
		"\2\2\u12f5\u12f6\tD\2\2\u12f6\u12fa\7V\2\2\u12f7\u12f8\5\u0206\u0104\2"+
		"\u12f8\u12f9\7\u03b5\2\2\u12f9\u12fb\3\2\2\2\u12fa\u12f7\3\2\2\2\u12fa"+
		"\u12fb\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u134c\5\u0206\u0104\2\u12fd\u12fe"+
		"\7\u0087\2\2\u12fe\u12ff\7\u00d7\2\2\u12ff\u1300\7\u03b3\2\2\u1300\u1301"+
		"\7\u03a2\2\2\u1301\u1302\7\u03b4\2\2\u1302\u134c\tD\2\2\u1303\u1304\7"+
		"\u0087\2\2\u1304\u1307\5\u01c2\u00e2\2\u1305\u1306\tA\2\2\u1306\u1308"+
		"\5\u0200\u0101\2\u1307\u1305\3\2\2\2\u1307\u1308\3\2\2\2\u1308\u130a\3"+
		"\2\2\2\u1309\u130b\5\u01be\u00e0\2\u130a\u1309\3\2\2\2\u130a\u130b\3\2"+
		"\2\2\u130b\u134c\3\2\2\2\u130c\u130d\7\u0087\2\2\u130d\u130e\tE\2\2\u130e"+
		"\u130f\7\u0113\2\2\u130f\u134c\5\u01e6\u00f4\2\u1310\u1311\7\u0087\2\2"+
		"\u1311\u1314\7\u0154\2\2\u1312\u1313\79\2\2\u1313\u1315\5\u01ee\u00f8"+
		"\2\u1314\u1312\3\2\2\2\u1314\u1315\3\2\2\2\u1315\u134c\3\2\2\2\u1316\u1317"+
		"\7\u0087\2\2\u1317\u1318\tF\2\2\u1318\u1319\tA\2\2\u1319\u131c\5\u01e8"+
		"\u00f5\2\u131a\u131b\tA\2\2\u131b\u131d\5\u0200\u0101\2\u131c\u131a\3"+
		"\2\2\2\u131c\u131d\3\2\2\2\u131d\u1320\3\2\2\2\u131e\u131f\7\u00a5\2\2"+
		"\u131f\u1321\5\u024a\u0126\2\u1320\u131e\3\2\2\2\u1320\u1321\3\2\2\2\u1321"+
		"\u134c\3\2\2\2\u1322\u1323\7\u0087\2\2\u1323\u1324\7\u01a8\2\2\u1324\u1327"+
		"\7\u0230\2\2\u1325\u1326\tA\2\2\u1326\u1328\5\u0200\u0101\2\u1327\u1325"+
		"\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u132a\3\2\2\2\u1329\u132b\5\u01be\u00e0"+
		"\2\u132a\u1329\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u134c\3\2\2\2\u132c\u132d"+
		"\7\u0087\2\2\u132d\u132e\7\u01bd\2\2\u132e\u1333\5\u01c4\u00e3\2\u132f"+
		"\u1330\7\u03b5\2\2\u1330\u1332\5\u01c4\u00e3\2\u1331\u132f\3\2\2\2\u1332"+
		"\u1335\3\2\2\2\u1333\u1331\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u1339\3\2"+
		"\2\2\u1335\u1333\3\2\2\2\u1336\u1337\79\2\2\u1337\u1338\7\u01c0\2\2\u1338"+
		"\u133a\5\u0206\u0104\2\u1339\u1336\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u133b"+
		"\3\2\2\2\u133b\u133f\7V\2\2\u133c\u133d\5\u0206\u0104\2\u133d\u133e\7"+
		"\u03b5\2\2\u133e\u1340\3\2\2\2\u133f\u133c\3\2\2\2\u133f\u1340\3\2\2\2"+
		"\u1340\u1341\3\2\2\2\u1341\u1342\5\u0206\u0104\2\u1342\u134c\3\2\2\2\u1343"+
		"\u1344\7\u0087\2\2\u1344\u1345\7\u01e7\2\2\u1345\u1349\7\u01fb\2\2\u1346"+
		"\u1347\79\2\2\u1347\u1348\7\u010d\2\2\u1348\u134a\7\u03c2\2\2\u1349\u1346"+
		"\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134c\3\2\2\2\u134b\u12b4\3\2\2\2\u134b"+
		"\u12b7\3\2\2\2\u134b\u12cb\3\2\2\2\u134b\u12d0\3\2\2\2\u134b\u12de\3\2"+
		"\2\2\u134b\u12e5\3\2\2\2\u134b\u12e9\3\2\2\2\u134b\u12ed\3\2\2\2\u134b"+
		"\u12f2\3\2\2\2\u134b\u12f4\3\2\2\2\u134b\u12fd\3\2\2\2\u134b\u1303\3\2"+
		"\2\2\u134b\u130c\3\2\2\2\u134b\u1310\3\2\2\2\u134b\u1316\3\2\2\2\u134b"+
		"\u1322\3\2\2\2\u134b\u132c\3\2\2\2\u134b\u1343\3\2\2\2\u134c\u01b9\3\2"+
		"\2\2\u134d\u1358\7\u03cd\2\2\u134e\u1358\7\u03ce\2\2\u134f\u1350\7\u03b7"+
		"\2\2\u1350\u1352\7\u03b7\2\2\u1351\u134f\3\2\2\2\u1351\u1352\3\2\2\2\u1352"+
		"\u1353\3\2\2\2\u1353\u1355\t.\2\2\u1354\u1351\3\2\2\2\u1354\u1355\3\2"+
		"\2\2\u1355\u1356\3\2\2\2\u1356\u1358\5\u0200\u0101\2\u1357\u134d\3\2\2"+
		"\2\u1357\u134e\3\2\2\2\u1357\u1354\3\2\2\2\u1358\u01bb\3\2\2\2\u1359\u135a"+
		"\7\27\2\2\u135a\u1367\7\u0085\2\2\u135b\u1367\7\u0296\2\2\u135c\u1367"+
		"\7$\2\2\u135d\u1367\7\u0083\2\2\u135e\u135f\7\u0151\2\2\u135f\u1367\7"+
		"\u01fb\2\2\u1360\u1361\7q\2\2\u1361\u1367\7\u01fb\2\2\u1362\u1364\t.\2"+
		"\2\u1363\u1362\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1367"+
		"\tG\2\2\u1366\u1359\3\2\2\2\u1366\u135b\3\2\2\2\u1366\u135c\3\2\2\2\u1366"+
		"\u135d\3\2\2\2\u1366\u135e\3\2\2\2\u1366\u1360\3\2\2\2\u1366\u1363\3\2"+
		"\2\2\u1367\u01bd\3\2\2\2\u1368\u1369\7U\2\2\u1369\u136d\7\u03c2\2\2\u136a"+
		"\u136b\7\u00a5\2\2\u136b\u136d\5\u024a\u0126\2\u136c\u1368\3\2\2\2\u136c"+
		"\u136a\3\2\2\2\u136d\u01bf\3\2\2\2\u136e\u1370\7\u01fd\2\2\u136f\u136e"+
		"\3\2\2\2\u136f\u1370\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u1380\7\u0138\2"+
		"\2\u1372\u1373\7\u0175\2\2\u1373\u1380\7\u01fb\2\2\u1374\u1380\7\u01b6"+
		"\2\2\u1375\u1380\7\u0238\2\2\u1376\u1378\7\u0150\2\2\u1377\u1376\3\2\2"+
		"\2\u1377\u1378\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u1380\7\u01bc\2\2\u137a"+
		"\u1380\7\u01be\2\2\u137b\u137c\7\u01e7\2\2\u137c\u1380\7\u015a\2\2\u137d"+
		"\u1380\7\u00fd\2\2\u137e\u1380\7\u0121\2\2\u137f\u136f\3\2\2\2\u137f\u1372"+
		"\3\2\2\2\u137f\u1374\3\2\2\2\u137f\u1375\3\2\2\2\u137f\u1377\3\2\2\2\u137f"+
		"\u137a\3\2\2\2\u137f\u137b\3\2\2\2\u137f\u137d\3\2\2\2\u137f\u137e\3\2"+
		"\2\2\u1380\u01c1\3\2\2\2\u1381\u138a\7\u013e\2\2\u1382\u1383\7\u0093\2"+
		"\2\u1383\u138a\7\u01fb\2\2\u1384\u1386\7\u0150\2\2\u1385\u1384\3\2\2\2"+
		"\u1385\u1386\3\2\2\2\u1386\u1387\3\2\2\2\u1387\u138a\7\u0230\2\2\u1388"+
		"\u138a\7\u020b\2\2\u1389\u1381\3\2\2\2\u1389\u1382\3\2\2\2\u1389\u1385"+
		"\3\2\2\2\u1389\u1388\3\2\2\2\u138a\u01c3\3\2\2\2\u138b\u1398\7\b\2\2\u138c"+
		"\u138d\7\u0105\2\2\u138d\u1398\7\u0165\2\2\u138e\u138f\7\u0120\2\2\u138f"+
		"\u1398\7\u0204\2\2\u1390\u1398\7\u0123\2\2\u1391\u1398\7\u0167\2\2\u1392"+
		"\u1398\7\u0266\2\2\u1393\u1394\7\u01ad\2\2\u1394\u1398\7\u0147\2\2\u1395"+
		"\u1398\7\u01ee\2\2\u1396\u1398\7\u0203\2\2\u1397\u138b\3\2\2\2\u1397\u138c"+
		"\3\2\2\2\u1397\u138e\3\2\2\2\u1397\u1390\3\2\2\2\u1397\u1391\3\2\2\2\u1397"+
		"\u1392\3\2\2\2\u1397\u1393\3\2\2\2\u1397\u1395\3\2\2\2\u1397\u1396\3\2"+
		"\2\2\u1398\u01c5\3\2\2\2\u1399\u139a\7\u0103\2\2\u139a\u139b\7\u03c2\2"+
		"\2\u139b\u01c7\3\2\2\2\u139c\u139d\7\u0109\2\2\u139d\u139e\7E\2\2\u139e"+
		"\u13a3\5\u01d4\u00eb\2\u139f\u13a0\7\u03b5\2\2\u13a0\u13a2\5\u01d4\u00eb"+
		"\2\u13a1\u139f\3\2\2\2\u13a2\u13a5\3\2\2\2\u13a3\u13a1\3\2\2\2\u13a3\u13a4"+
		"\3\2\2\2\u13a4\u13ad\3\2\2\2\u13a5\u13a3\3\2\2\2\u13a6\u13a7\7o\2\2\u13a7"+
		"\u13aa\7\u03b3\2\2\u13a8\u13ab\5\u021e\u0110\2\u13a9\u13ab\7\b\2\2\u13aa"+
		"\u13a8\3\2\2\2\u13aa\u13a9\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ae\7\u03b4"+
		"\2\2\u13ad\u13a6\3\2\2\2\u13ad\u13ae\3\2\2\2\u13ae\u13af\3\2\2\2\u13af"+
		"\u13b0\7D\2\2\u13b0\u13b1\5\u0200\u0101\2\u13b1\u01c9\3\2\2\2\u13b2\u13b4"+
		"\7\u014d\2\2\u13b3\u13b5\t=\2\2\u13b4\u13b3\3\2\2\2\u13b4\u13b5\3\2\2"+
		"\2\u13b5\u13b6\3\2\2\2\u13b6\u13bb\5\u01d6\u00ec\2\u13b7\u13b8\7\u03b5"+
		"\2\2\u13b8\u13ba\5\u01d6\u00ec\2\u13b9\u13b7\3\2\2\2\u13ba\u13bd\3\2\2"+
		"\2\u13bb\u13b9\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u01cb\3\2\2\2\u13bd\u13bb"+
		"\3\2\2\2\u13be\u13c0\7Q\2\2\u13bf\u13c1\tH\2\2\u13c0\u13bf\3\2\2\2\u13c0"+
		"\u13c1\3\2\2\2\u13c1\u13c3\3\2\2\2\u13c2\u13c4\5\u0206\u0104\2\u13c3\u13c2"+
		"\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u13c3\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6"+
		"\u01cd\3\2\2\2\u13c7\u13c8\7Y\2\2\u13c8\u13c9\7E\2\2\u13c9\u13ca\7K\2"+
		"\2\u13ca\u13cb\7\u0109\2\2\u13cb\u13d0\5\u01da\u00ee\2\u13cc\u13cd\7\u03b5"+
		"\2\2\u13cd\u13cf\5\u01da\u00ee\2\u13ce\u13cc\3\2\2\2\u13cf\u13d2\3\2\2"+
		"\2\u13d0\u13ce\3\2\2\2\u13d0\u13d1\3\2\2\2\u13d1\u01cf\3\2\2\2\u13d2\u13d0"+
		"\3\2\2\2\u13d3\u13d4\7\u01d5\2\2\u13d4\u13d5\7\u01c0\2\2\u13d5\u13d6\7"+
		"\u0109\2\2\u13d6\u01d1\3\2\2\2\u13d7\u13d8\7\u0236\2\2\u13d8\u01d3\3\2"+
		"\2\2\u13d9\u13e1\5\u01e8\u00f5\2\u13da\u13dc\t\23\2\2\u13db\u13da\3\2"+
		"\2\2\u13db\u13dc\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd\u13de\7\u03b3\2\2\u13de"+
		"\u13df\5\u021e\u0110\2\u13df\u13e0\7\u03b4\2\2\u13e0\u13e2\3\2\2\2\u13e1"+
		"\u13db\3\2\2\2\u13e1\u13e2\3\2\2\2\u13e2\u01d5\3\2\2\2\u13e3\u13f6\7\u012a"+
		"\2\2\u13e4\u13f6\7\u015a\2\2\u13e5\u13e7\tI\2\2\u13e6\u13e5\3\2\2\2\u13e6"+
		"\u13e7\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u13f6\7\u0174\2\2\u13e9\u13f6"+
		"\7\u01a9\2\2\u13ea\u13f6\7\u0238\2\2\u13eb\u13ec\7\u01c0\2\2\u13ec\u13f6"+
		"\7\u0109\2\2\u13ed\u13f6\7\u01fb\2\2\u13ee\u13f6\7\u0216\2\2\u13ef\u13f3"+
		"\7\u0230\2\2\u13f0\u13f1\7\u00a7\2\2\u13f1\u13f2\7t\2\2\u13f2\u13f4\7"+
		"Z\2\2\u13f3\u13f0\3\2\2\2\u13f3\u13f4\3\2\2\2\u13f4\u13f6\3\2\2\2\u13f5"+
		"\u13e3\3\2\2\2\u13f5\u13e4\3\2\2\2\u13f5\u13e6\3\2\2\2\u13f5\u13e9\3\2"+
		"\2\2\u13f5\u13ea\3\2\2\2\u13f5\u13eb\3\2\2\2\u13f5\u13ed\3\2\2\2\u13f5"+
		"\u13ee\3\2\2\2\u13f5\u13ef\3\2\2\2\u13f6\u1402\3\2\2\2\u13f7\u13f8\7\u01c6"+
		"\2\2\u13f8\u13fa\7\u0174\2\2\u13f9\u13fb\5\u0138\u009d\2\u13fa\u13f9\3"+
		"\2\2\2\u13fa\u13fb\3\2\2\2\u13fb\u1402\3\2\2\2\u13fc\u13fd\7\u0230\2\2"+
		"\u13fd\u13ff\5\u0220\u0111\2\u13fe\u1400\5\u01d8\u00ed\2\u13ff\u13fe\3"+
		"\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1402\3\2\2\2\u1401\u13f5\3\2\2\2\u1401"+
		"\u13f7\3\2\2\2\u1401\u13fc\3\2\2\2\u1402\u01d7\3\2\2\2\u1403\u1404\7\u00a7"+
		"\2\2\u1404\u1405\7t\2\2\u1405\u1409\7Z\2\2\u1406\u1407\79\2\2\u1407\u1409"+
		"\7\u0143\2\2\u1408\u1403\3\2\2\2\u1408\u1406\3\2\2\2\u1409\u01d9\3\2\2"+
		"\2\u140a\u1412\5\u01e8\u00f5\2\u140b\u140c\7o\2\2\u140c\u140f\7\u03b3"+
		"\2\2\u140d\u1410\5\u021e\u0110\2\u140e\u1410\7\b\2\2\u140f\u140d\3\2\2"+
		"\2\u140f\u140e\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1413\7\u03b4\2\2\u1412"+
		"\u140b\3\2\2\2\u1412\u1413\3\2\2\2\u1413\u141b\3\2\2\2\u1414\u1416\t\23"+
		"\2\2\u1415\u1414\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1417\3\2\2\2\u1417"+
		"\u1418\7\u03b3\2\2\u1418\u1419\5\u021e\u0110\2\u1419\u141a\7\u03b4\2\2"+
		"\u141a\u141c\3\2\2\2\u141b\u1415\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u141f"+
		"\3\2\2\2\u141d\u141e\7C\2\2\u141e\u1420\7\u016e\2\2\u141f\u141d\3\2\2"+
		"\2\u141f\u1420\3\2\2\2\u1420\u01db\3\2\2\2\u1421\u1422\tJ\2\2\u1422\u1425"+
		"\5\u01e8\u00f5\2\u1423\u1426\5\u0200\u0101\2\u1424\u1426\7\u03c2\2\2\u1425"+
		"\u1423\3\2\2\2\u1425\u1424\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u01dd\3\2"+
		"\2\2\u1427\u142b\tJ\2\2\u1428\u1429\tK\2\2\u1429\u142a\7\u03aa\2\2\u142a"+
		"\u142c\tL\2\2\u142b\u1428\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142d\3\2"+
		"\2\2\u142d\u142e\5\u01e4\u00f3\2\u142e\u01df\3\2\2\2\u142f\u1430\7\u0158"+
		"\2\2\u1430\u1431\7\u03c2\2\2\u1431\u01e1\3\2\2\2\u1432\u1433\7\u00a1\2"+
		"\2\u1433\u1434\5\u0200\u0101\2\u1434\u01e3\3\2\2\2\u1435\u143b\5\u00b4"+
		"[\2\u1436\u143b\5\u00a6T\2\u1437\u143b\5\u00acW\2\u1438\u143b\5\u00b2"+
		"Z\2\u1439\u143b\5\u00b6\\\2\u143a\u1435\3\2\2\2\u143a\u1436\3\2\2\2\u143a"+
		"\u1437\3\2\2\2\u143a\u1438\3\2\2\2\u143a\u1439\3\2\2\2\u143b\u1440\3\2"+
		"\2\2\u143c\u143d\79\2\2\u143d\u143e\7\u011d\2\2\u143e\u1440\5\u0200\u0101"+
		"\2\u143f\u143a\3\2\2\2\u143f\u143c\3\2\2\2\u1440\u01e5\3\2\2\2\u1441\u1442"+
		"\5\u0200\u0101\2\u1442\u1449\b\u00f4\1\2\u1443\u1444\7\u03c9\2\2\u1444"+
		"\u144a\b\u00f4\1\2\u1445\u1446\7\u03b2\2\2\u1446\u1447\5\u0200\u0101\2"+
		"\u1447\u1448\b\u00f4\1\2\u1448\u144a\3\2\2\2\u1449\u1443\3\2\2\2\u1449"+
		"\u1445\3\2\2\2\u1449\u144a\3\2\2\2\u144a\u01e7\3\2\2\2\u144b\u144c\5\u01e6"+
		"\u00f4\2\u144c\u144d\b\u00f5\1\2\u144d\u01e9\3\2\2\2\u144e\u1453\5\u0200"+
		"\u0101\2\u144f\u1451\5\u0204\u0103\2\u1450\u1452\5\u0204\u0103\2\u1451"+
		"\u1450\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1454\3\2\2\2\u1453\u144f\3\2"+
		"\2\2\u1453\u1454\3\2\2\2\u1454\u01eb\3\2\2\2\u1455\u1456\5\u0200\u0101"+
		"\2\u1456\u145b\b\u00f7\1\2\u1457\u1458\7\u03b3\2\2\u1458\u1459\5\u0206"+
		"\u0104\2\u1459\u145a\7\u03b4\2\2\u145a\u145c\3\2\2\2\u145b\u1457\3\2\2"+
		"\2\u145b\u145c\3\2\2\2\u145c\u145e\3\2\2\2\u145d\u145f\t(\2\2\u145e\u145d"+
		"\3\2\2\2\u145e\u145f\3\2\2\2\u145f\u01ed\3\2\2\2\u1460\u1461\tM\2\2\u1461"+
		"\u01ef\3\2\2\2\u1462\u1463\tN\2\2\u1463\u01f1\3\2\2\2\u1464\u1465\7\u00bd"+
		"\2\2\u1465\u146e\b\u00fa\1\2\u1466\u1467\5\u025a\u012e\2\u1467\u1468\b"+
		"\u00fa\1\2\u1468\u146e\3\2\2\2\u1469\u146a\7\u03c2\2\2\u146a\u146e\b\u00fa"+
		"\1\2\u146b\u146c\7\u03bf\2\2\u146c\u146e\b\u00fa\1\2\u146d\u1464\3\2\2"+
		"\2\u146d\u1466\3\2\2\2\u146d\u1469\3\2\2\2\u146d\u146b\3\2\2\2\u146e\u01f3"+
		"\3\2\2\2\u146f\u1470\5\u0200\u0101\2\u1470\u1471\b\u00fb\1\2\u1471\u1475"+
		"\3\2\2\2\u1472\u1473\7\u03c2\2\2\u1473\u1475\b\u00fb\1\2\u1474\u146f\3"+
		"\2\2\2\u1474\u1472\3\2\2\2\u1475\u01f5\3\2\2\2\u1476\u1477\tO\2\2\u1477"+
		"\u1478\b\u00fc\1\2\u1478\u01f7\3\2\2\2\u1479\u147a\5\u0206\u0104\2\u147a"+
		"\u147b\7\u03a7\2\2\u147b\u147c\5\u0206\u0104\2\u147c\u147d\7\u03a7\2\2"+
		"\u147d\u147e\5\u0206\u0104\2\u147e\u147f\7\u03a7\2\2\u147f\u1480\5\u0206"+
		"\u0104\2\u1480\u1481\7\u03a7\2\2\u1481\u1487\5\u0206\u0104\2\u1482\u1483"+
		"\7\u03be\2\2\u1483\u1484\5\u0206\u0104\2\u1484\u1485\7\u03a7\2\2\u1485"+
		"\u1486\5\u0206\u0104\2\u1486\u1488\3\2\2\2\u1487\u1482\3\2\2\2\u1488\u1489"+
		"\3\2\2\2\u1489\u1487\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u01f9\3\2\2\2\u148b"+
		"\u1492\5\u01fc\u00ff\2\u148c\u148d\7\u03b5\2\2\u148d\u1490\5\u01fc\u00ff"+
		"\2\u148e\u148f\7\u03b5\2\2\u148f\u1491\5\u0206\u0104\2\u1490\u148e\3\2"+
		"\2\2\u1490\u1491\3\2\2\2\u1491\u1493\3\2\2\2\u1492\u148c\3\2\2\2\u1492"+
		"\u1493\3\2\2\2\u1493\u01fb\3\2\2\2\u1494\u149c\7\u03c2\2\2\u1495\u149c"+
		"\7\u03c7\2\2\u1496\u1498\7\u03c4\2\2\u1497\u1496\3\2\2\2\u1498\u1499\3"+
		"\2\2\2\u1499\u1497\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u149c\3\2\2\2\u149b"+
		"\u1494\3\2\2\2\u149b\u1495\3\2\2\2\u149b\u1497\3\2\2\2\u149c\u01fd\3\2"+
		"\2\2\u149d\u14a0\5\u0200\u0101\2\u149e\u14a0\7\u03c2\2\2\u149f\u149d\3"+
		"\2\2\2\u149f\u149e\3\2\2\2\u14a0\u01ff\3\2\2\2\u14a1\u14a2\5\u0202\u0102"+
		"\2\u14a2\u14a3\b\u0101\1\2\u14a3\u14a8\3\2\2\2\u14a4\u14a5\7\u03cb\2\2"+
		"\u14a5\u14a8\b\u0101\1\2\u14a6\u14a8\7\u03bf\2\2\u14a7\u14a1\3\2\2\2\u14a7"+
		"\u14a4\3\2\2\2\u14a7\u14a6\3\2\2\2\u14a8\u0201\3\2\2\2\u14a9\u14aa\7\u03ca"+
		"\2\2\u14aa\u14b4\b\u0102\1\2\u14ab\u14b4\5\u025a\u012e\2\u14ac\u14b4\5"+
		"\u025c\u012f\2\u14ad\u14b4\5\u01f6\u00fc\2\u14ae\u14b4\5\u025e\u0130\2"+
		"\u14af\u14b4\5\u0260\u0131\2\u14b0\u14b4\5\u0262\u0132\2\u14b1\u14b4\5"+
		"\u0264\u0133\2\u14b2\u14b4\5\u0266\u0134\2\u14b3\u14a9\3\2\2\2\u14b3\u14ab"+
		"\3\2\2\2\u14b3\u14ac\3\2\2\2\u14b3\u14ad\3\2\2\2\u14b3\u14ae\3\2\2\2\u14b3"+
		"\u14af\3\2\2\2\u14b3\u14b0\3\2\2\2\u14b3\u14b1\3\2\2\2\u14b3\u14b2\3\2"+
		"\2\2\u14b4\u0203\3\2\2\2\u14b5\u14b9\7\u03c9\2\2\u14b6\u14b7\7\u03b2\2"+
		"\2\u14b7\u14b9\5\u0200\u0101\2\u14b8\u14b5\3\2\2\2\u14b8\u14b6\3\2\2\2"+
		"\u14b9\u0205\3\2\2\2\u14ba\u14bb\tP\2\2\u14bb\u14bc\b\u0104\1\2\u14bc"+
		"\u0207\3\2\2\2\u14bd\u14c2\7\u03c0\2\2\u14be\u14bf\5\u0206\u0104\2\u14bf"+
		"\u14c0\b\u0105\1\2\u14c0\u14c2\3\2\2\2\u14c1\u14bd\3\2\2\2\u14c1\u14be"+
		"\3\2\2\2\u14c2\u0209\3\2\2\2\u14c3\u14c5\7\u03c8\2\2\u14c4\u14c3\3\2\2"+
		"\2\u14c4\u14c5\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14c9\7\u03c2\2\2\u14c7"+
		"\u14c9\7\u03c1\2\2\u14c8\u14c4\3\2\2\2\u14c8\u14c7\3\2\2\2\u14c9\u14cb"+
		"\3\2\2\2\u14ca\u14cc\7\u03c2\2\2\u14cb\u14ca\3\2\2\2\u14cc\u14cd\3\2\2"+
		"\2\u14cd\u14cb\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14db\3\2\2\2\u14cf\u14d1"+
		"\7\u03c8\2\2\u14d0\u14cf\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u14d2\3\2\2"+
		"\2\u14d2\u14d5\7\u03c2\2\2\u14d3\u14d5\7\u03c1\2\2\u14d4\u14d0\3\2\2\2"+
		"\u14d4\u14d3\3\2\2\2\u14d5\u14d8\3\2\2\2\u14d6\u14d7\7\31\2\2\u14d7\u14d9"+
		"\5\u01f4\u00fb\2\u14d8\u14d6\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u14db\3"+
		"\2\2\2\u14da\u14c8\3\2\2\2\u14da\u14d4\3\2\2\2\u14db\u020b\3\2\2\2\u14dc"+
		"\u14dd\tQ\2\2\u14dd\u020d\3\2\2\2\u14de\u14e0\7\u03c8\2\2\u14df\u14de"+
		"\3\2\2\2\u14df\u14e0\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u14e2\7\u03c4\2"+
		"\2\u14e2\u020f\3\2\2\2\u14e3\u14e5\7c\2\2\u14e4\u14e3\3\2\2\2\u14e4\u14e5"+
		"\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14e7\tR\2\2\u14e7\u0211\3\2\2\2\u14e8"+
		"\u14f3\5\u020a\u0106\2\u14e9\u14f3\5\u0206\u0104\2\u14ea\u14f3\5\u020e"+
		"\u0108\2\u14eb\u14f3\5\u020c\u0107\2\u14ec\u14f3\7\u03c5\2\2\u14ed\u14f3"+
		"\7\u03c7\2\2\u14ee\u14f0\7c\2\2\u14ef\u14ee\3\2\2\2\u14ef\u14f0\3\2\2"+
		"\2\u14f0\u14f1\3\2\2\2\u14f1\u14f3\tR\2\2\u14f2\u14e8\3\2\2\2\u14f2\u14e9"+
		"\3\2\2\2\u14f2\u14ea\3\2\2\2\u14f2\u14eb\3\2\2\2\u14f2\u14ec\3\2\2\2\u14f2"+
		"\u14ed\3\2\2\2\u14f2\u14ef\3\2\2\2\u14f3\u0213\3\2\2\2\u14f4\u14f6\tS"+
		"\2\2\u14f5\u14f7\5\u0218\u010d\2\u14f6\u14f5\3\2\2\2\u14f6\u14f7\3\2\2"+
		"\2\u14f7\u14f9\3\2\2\2\u14f8\u14fa\7\u00bd\2\2\u14f9\u14f8\3\2\2\2\u14f9"+
		"\u14fa\3\2\2\2\u14fa\u14fe\3\2\2\2\u14fb\u14fc\7\27\2\2\u14fc\u14fd\7"+
		"\u0085\2\2\u14fd\u14ff\5\u01f2\u00fa\2\u14fe\u14fb\3\2\2\2\u14fe\u14ff"+
		"\3\2\2\2\u14ff\u1502\3\2\2\2\u1500\u1501\7\31\2\2\u1501\u1503\5\u01f4"+
		"\u00fb\2\u1502\u1500\3\2\2\2\u1502\u1503\3\2\2\2\u1503\u1541\3\2\2\2\u1504"+
		"\u1505\tT\2\2\u1505\u1507\b\u010b\1\2\u1506\u1508\5\u0218\u010d\2\u1507"+
		"\u1506\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u150a\3\2\2\2\u1509\u150b\7\u009e"+
		"\2\2\u150a\u1509\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150d\3\2\2\2\u150c"+
		"\u150e\7\u00aa\2\2\u150d\u150c\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u1541"+
		"\3\2\2\2\u150f\u1511\tU\2\2\u1510\u1512\5\u021a\u010e\2\u1511\u1510\3"+
		"\2\2\2\u1511\u1512\3\2\2\2\u1512\u1514\3\2\2\2\u1513\u1515\7\u009e\2\2"+
		"\u1514\u1513\3\2\2\2\u1514\u1515\3\2\2\2\u1515\u1517\3\2\2\2\u1516\u1518"+
		"\7\u00aa\2\2\u1517\u1516\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1541\3\2\2"+
		"\2\u1519\u151b\tV\2\2\u151a\u151c\5\u021c\u010f\2\u151b\u151a\3\2\2\2"+
		"\u151b\u151c\3\2\2\2\u151c\u151e\3\2\2\2\u151d\u151f\7\u009e\2\2\u151e"+
		"\u151d\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u1521\3\2\2\2\u1520\u1522\7\u00aa"+
		"\2\2\u1521\u1520\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1541\3\2\2\2\u1523"+
		"\u1541\tW\2\2\u1524\u1526\tX\2\2\u1525\u1527\5\u0218\u010d\2\u1526\u1525"+
		"\3\2\2\2\u1526\u1527\3\2\2\2\u1527\u1541\3\2\2\2\u1528\u1529\tY\2\2\u1529"+
		"\u152a\7\u03b3\2\2\u152a\u152f\7\u03c2\2\2\u152b\u152c\7\u03b5\2\2\u152c"+
		"\u152e\7\u03c2\2\2\u152d\u152b\3\2\2\2\u152e\u1531\3\2\2\2\u152f\u152d"+
		"\3\2\2\2\u152f\u1530\3\2\2\2\u1530\u1532\3\2\2\2\u1531\u152f\3\2\2\2\u1532"+
		"\u1534\7\u03b4\2\2\u1533\u1535\7\u00bd\2\2\u1534\u1533\3\2\2\2\u1534\u1535"+
		"\3\2\2\2\u1535\u1539\3\2\2\2\u1536\u1537\7\27\2\2\u1537\u1538\7\u0085"+
		"\2\2\u1538\u153a\5\u01f2\u00fa\2\u1539\u1536\3\2\2\2\u1539\u153a\3\2\2"+
		"\2\u153a\u153d\3\2\2\2\u153b\u153c\7\31\2\2\u153c\u153e\5\u01f4\u00fb"+
		"\2\u153d\u153b\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u1541\3\2\2\2\u153f\u1541"+
		"\tZ\2\2\u1540\u14f4\3\2\2\2\u1540\u1504\3\2\2\2\u1540\u150f\3\2\2\2\u1540"+
		"\u1519\3\2\2\2\u1540\u1523\3\2\2\2\u1540\u1524\3\2\2\2\u1540\u1528\3\2"+
		"\2\2\u1540\u153f\3\2\2\2\u1541\u0215\3\2\2\2\u1542\u1544\t[\2\2\u1543"+
		"\u1545\5\u0218\u010d\2\u1544\u1543\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u1559"+
		"\3\2\2\2\u1546\u1548\7\u00bb\2\2\u1547\u1549\5\u0218\u010d\2\u1548\u1547"+
		"\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u154d\3\2\2\2\u154a\u154b\7\27\2\2"+
		"\u154b\u154c\7\u0085\2\2\u154c\u154e\5\u01f2\u00fa\2\u154d\u154a\3\2\2"+
		"\2\u154d\u154e\3\2\2\2\u154e\u1559\3\2\2\2\u154f\u1559\t\\\2\2\u1550\u1552"+
		"\7\u00b4\2\2\u1551\u1553\5\u021a\u010e\2\u1552\u1551\3\2\2\2\u1552\u1553"+
		"\3\2\2\2\u1553\u1559\3\2\2\2\u1554\u1556\t]\2\2\u1555\u1557\7\u00af\2"+
		"\2\u1556\u1555\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u1559\3\2\2\2\u1558\u1542"+
		"\3\2\2\2\u1558\u1546\3\2\2\2\u1558\u154f\3\2\2\2\u1558\u1550\3\2\2\2\u1558"+
		"\u1554\3\2\2\2\u1559\u0217\3\2\2\2\u155a\u155b\7\u03b3\2\2\u155b\u155c"+
		"\5\u0206\u0104\2\u155c\u155d\7\u03b4\2\2\u155d\u0219\3\2\2\2\u155e\u155f"+
		"\7\u03b3\2\2\u155f\u1560\5\u0206\u0104\2\u1560\u1561\7\u03b5\2\2\u1561"+
		"\u1562\5\u0206\u0104\2\u1562\u1563\7\u03b4\2\2\u1563\u021b\3\2\2\2\u1564"+
		"\u1565\7\u03b3\2\2\u1565\u1568\5\u0206\u0104\2\u1566\u1567\7\u03b5\2\2"+
		"\u1567\u1569\5\u0206\u0104\2\u1568\u1566\3\2\2\2\u1568\u1569\3\2\2\2\u1569"+
		"\u156a\3\2\2\2\u156a\u156b\7\u03b4\2\2\u156b\u021d\3\2\2\2\u156c\u1571"+
		"\5\u0200\u0101\2\u156d\u156e\7\u03b5\2\2\u156e\u1570\5\u0200\u0101\2\u156f"+
		"\u156d\3\2\2\2\u1570\u1573\3\2\2\2\u1571\u156f\3\2\2\2\u1571\u1572\3\2"+
		"\2\2\u1572\u021f\3\2\2\2\u1573\u1571\3\2\2\2\u1574\u1579\5\u01e8\u00f5"+
		"\2\u1575\u1576\7\u03b5\2\2\u1576\u1578\5\u01e8\u00f5\2\u1577\u1575\3\2"+
		"\2\2\u1578\u157b\3\2\2\2\u1579\u1577\3\2\2\2\u1579\u157a\3\2\2\2\u157a"+
		"\u0221\3\2\2\2\u157b\u1579\3\2\2\2\u157c\u157d\7\u03b3\2\2\u157d\u157e"+
		"\5\u01ec\u00f7\2\u157e\u1585\b\u0112\1\2\u157f\u1580\7\u03b5\2\2\u1580"+
		"\u1581\5\u01ec\u00f7\2\u1581\u1582\b\u0112\1\2\u1582\u1584\3\2\2\2\u1583"+
		"\u157f\3\2\2\2\u1584\u1587\3\2\2\2\u1585\u1583\3\2\2\2\u1585\u1586\3\2"+
		"\2\2\u1586\u1588\3\2\2\2\u1587\u1585\3\2\2\2\u1588\u1589\7\u03b4\2\2\u1589"+
		"\u0223\3\2\2\2\u158a\u158f\5\u024a\u0126\2\u158b\u158c\7\u03b5\2\2\u158c"+
		"\u158e\5\u024a\u0126\2\u158d\u158b\3\2\2\2\u158e\u1591\3\2\2\2\u158f\u158d"+
		"\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u0225\3\2\2\2\u1591\u158f\3\2\2\2\u1592"+
		"\u1597\5\u0230\u0119\2\u1593\u1594\7\u03b5\2\2\u1594\u1596\5\u0230\u0119"+
		"\2\u1595\u1593\3\2\2\2\u1596\u1599\3\2\2\2\u1597\u1595\3\2\2\2\u1597\u1598"+
		"\3\2\2\2\u1598\u0227\3\2\2\2\u1599\u1597\3\2\2\2\u159a\u159f\5\u0212\u010a"+
		"\2\u159b\u159c\7\u03b5\2\2\u159c\u159e\5\u0212\u010a\2\u159d\u159b\3\2"+
		"\2\2\u159e\u15a1\3\2\2\2\u159f\u159d\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0"+
		"\u0229\3\2\2\2\u15a1\u159f\3\2\2\2\u15a2\u15a7\7\u03c2\2\2\u15a3\u15a4"+
		"\7\u03b5\2\2\u15a4\u15a6\7\u03c2\2\2\u15a5\u15a3\3\2\2\2\u15a6\u15a9\3"+
		"\2\2\2\u15a7\u15a5\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u022b\3\2\2\2\u15a9"+
		"\u15a7\3\2\2\2\u15aa\u15af\7\u03cd\2\2\u15ab\u15ac\7\u03b5\2\2\u15ac\u15ae"+
		"\7\u03cd\2\2\u15ad\u15ab\3\2\2\2\u15ae\u15b1\3\2\2\2\u15af\u15ad\3\2\2"+
		"\2\u15af\u15b0\3\2\2\2\u15b0\u022d\3\2\2\2\u15b1\u15af\3\2\2\2\u15b2\u15bb"+
		"\7e\2\2\u15b3\u15bb\5\u0212\u010a\2\u15b4\u15b8\7\u00e5\2\2\u15b5\u15b6"+
		"\7f\2\2\u15b6\u15b7\7\u009f\2\2\u15b7\u15b9\7\u00ec\2\2\u15b8\u15b5\3"+
		"\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15bb\3\2\2\2\u15ba\u15b2\3\2\2\2\u15ba"+
		"\u15b3\3\2\2\2\u15ba\u15b4\3\2\2\2\u15bb\u022f\3\2\2\2\u15bc\u15bf\5\u024a"+
		"\u0126\2\u15bd\u15bf\7&\2\2\u15be\u15bc\3\2\2\2\u15be\u15bd\3\2\2\2\u15bf"+
		"\u0231\3\2\2\2\u15c0\u15c1\7B\2\2\u15c1\u15c2\7\64\2\2\u15c2\u0233\3\2"+
		"\2\2\u15c3\u15c4\7B\2\2\u15c4\u15c5\7c\2\2\u15c5\u15c6\7\64\2\2\u15c6"+
		"\u0235\3\2\2\2\u15c7\u15d9\5\u0238\u011d\2\u15c8\u15d9\5\u0240\u0121\2"+
		"\u15c9\u15ca\5\u0242\u0122\2\u15ca\u15cc\7\u03b3\2\2\u15cb\u15cd\5\u0246"+
		"\u0124\2\u15cc\u15cb\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce"+
		"\u15cf\7\u03b4\2\2\u15cf\u15d9\3\2\2\2\u15d0\u15d1\5\u01e6\u00f4\2\u15d1"+
		"\u15d3\7\u03b3\2\2\u15d2\u15d4\5\u0246\u0124\2\u15d3\u15d2\3\2\2\2\u15d3"+
		"\u15d4\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d6\7\u03b4\2\2\u15d6\u15d9"+
		"\3\2\2\2\u15d7\u15d9\5\u0244\u0123\2\u15d8\u15c7\3\2\2\2\u15d8\u15c8\3"+
		"\2\2\2\u15d8\u15c9\3\2\2\2\u15d8\u15d0\3\2\2\2\u15d8\u15d7\3\2\2\2\u15d9"+
		"\u0237\3\2\2\2\u15da\u1678\t^\2\2\u15db\u15dc\7\36\2\2\u15dc\u15dd\7\u03b3"+
		"\2\2\u15dd\u15de\5\u024a\u0126\2\u15de\u15df\7\u03b5\2\2\u15df\u15e0\5"+
		"\u0216\u010c\2\u15e0\u15e1\7\u03b4\2\2\u15e1\u1678\3\2\2\2\u15e2\u15e3"+
		"\7\36\2\2\u15e3\u15e4\7\u03b3\2\2\u15e4\u15e5\5\u024a\u0126\2\u15e5\u15e6"+
		"\7\u00a2\2\2\u15e6\u15e7\5\u01f2\u00fa\2\u15e7\u15e8\7\u03b4\2\2\u15e8"+
		"\u1678\3\2\2\2\u15e9\u15ea\7\25\2\2\u15ea\u15eb\7\u03b3\2\2\u15eb\u15ec"+
		"\5\u024a\u0126\2\u15ec\u15ed\7\f\2\2\u15ed\u15ee\5\u0216\u010c\2\u15ee"+
		"\u15ef\7\u03b4\2\2\u15ef\u1678\3\2\2\2\u15f0\u15f1\7\u00a3\2\2\u15f1\u15f2"+
		"\7\u03b3\2\2\u15f2\u15f3\5\u01ea\u00f6\2\u15f3\u15f4\7\u03b4\2\2\u15f4"+
		"\u1678\3\2\2\2\u15f5\u15f6\7\24\2\2\u15f6\u15f8\5\u024a\u0126\2\u15f7"+
		"\u15f9\5\u023a\u011e\2\u15f8\u15f7\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u15f8"+
		"\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u15fe\3\2\2\2\u15fc\u15fd\7\60\2\2"+
		"\u15fd\u15ff\5\u0248\u0125\2\u15fe\u15fc\3\2\2\2\u15fe\u15ff\3\2\2\2\u15ff"+
		"\u1600\3\2\2\2\u1600\u1601\7\u0135\2\2\u1601\u1678\3\2\2\2\u1602\u1604"+
		"\7\24\2\2\u1603\u1605\5\u023a\u011e\2\u1604\u1603\3\2\2\2\u1605\u1606"+
		"\3\2\2\2\u1606\u1604\3\2\2\2\u1606\u1607\3\2\2\2\u1607\u160a\3\2\2\2\u1608"+
		"\u1609\7\60\2\2\u1609\u160b\5\u0248\u0125\2\u160a\u1608\3\2\2\2\u160a"+
		"\u160b\3\2\2\2\u160b\u160c\3\2\2\2\u160c\u160d\7\u0135\2\2\u160d\u1678"+
		"\3\2\2\2\u160e\u160f\7\u00bb\2\2\u160f\u1610\7\u03b3\2\2\u1610\u1613\5"+
		"\u0246\u0124\2\u1611\u1612\7\u00a2\2\2\u1612\u1614\5\u01f2\u00fa\2\u1613"+
		"\u1611\3\2\2\2\u1613\u1614\3\2\2\2\u1614\u1615\3\2\2\2\u1615\u1616\7\u03b4"+
		"\2\2\u1616\u1678\3\2\2\2\u1617\u1618\7\u00ee\2\2\u1618\u161b\7\u03b3\2"+
		"\2\u1619\u161c\5\u020a\u0106\2\u161a\u161c\5\u024a\u0126\2\u161b\u1619"+
		"\3\2\2\2\u161b\u161a\3\2\2\2\u161c\u161d\3\2\2\2\u161d\u1620\7D\2\2\u161e"+
		"\u1621\5\u020a\u0106\2\u161f\u1621\5\u024a\u0126\2\u1620\u161e\3\2\2\2"+
		"\u1620\u161f\3\2\2\2\u1621\u1622\3\2\2\2\u1622\u1623\7\u03b4\2\2\u1623"+
		"\u1678\3\2\2\2\u1624\u1625\t_\2\2\u1625\u1628\7\u03b3\2\2\u1626\u1629"+
		"\5\u020a\u0106\2\u1627\u1629\5\u024a\u0126\2\u1628\u1626\3\2\2\2\u1628"+
		"\u1627\3\2\2\2\u1629\u162a\3\2\2\2\u162a\u162d\7<\2\2\u162b\u162e\5\u0206"+
		"\u0104\2\u162c\u162e\5\u024a\u0126\2\u162d\u162b\3\2\2\2\u162d\u162c\3"+
		"\2\2\2\u162e\u1634\3\2\2\2\u162f\u1632\79\2\2\u1630\u1633\5\u0206\u0104"+
		"\2\u1631\u1633\5\u024a\u0126\2\u1632\u1630\3\2\2\2\u1632\u1631\3\2\2\2"+
		"\u1633\u1635\3\2\2\2\u1634\u162f\3\2\2\2\u1634\u1635\3\2\2\2\u1635\u1636"+
		"\3\2\2\2\u1636\u1637\7\u03b4\2\2\u1637\u1678\3\2\2\2\u1638\u1639\7\u00f2"+
		"\2\2\u1639\u163a\7\u03b3\2\2\u163a\u163d\t`\2\2\u163b\u163e\5\u020a\u0106"+
		"\2\u163c\u163e\5\u024a\u0126\2\u163d\u163b\3\2\2\2\u163d\u163c\3\2\2\2"+
		"\u163d\u163e\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1642\7<\2\2\u1640\u1643"+
		"\5\u020a\u0106\2\u1641\u1643\5\u024a\u0126\2\u1642\u1640\3\2\2\2\u1642"+
		"\u1641\3\2\2\2\u1643\u1644\3\2\2\2\u1644\u1645\7\u03b4\2\2\u1645\u1678"+
		"\3\2\2\2\u1646\u1647\7\u00f2\2\2\u1647\u164a\7\u03b3\2\2\u1648\u164b\5"+
		"\u020a\u0106\2\u1649\u164b\5\u024a\u0126\2\u164a\u1648\3\2\2\2\u164a\u1649"+
		"\3\2\2\2\u164b\u164c\3\2\2\2\u164c\u164f\7<\2\2\u164d\u1650\5\u020a\u0106"+
		"\2\u164e\u1650\5\u024a\u0126\2\u164f\u164d\3\2\2\2\u164f\u164e\3\2\2\2"+
		"\u1650\u1651\3\2\2\2\u1651\u1652\7\u03b4\2\2\u1652\u1678\3\2\2\2\u1653"+
		"\u1654\7\u0394\2\2\u1654\u1657\7\u03b3\2\2\u1655\u1658\5\u020a\u0106\2"+
		"\u1656\u1658\5\u024a\u0126\2\u1657\u1655\3\2\2\2\u1657\u1656\3\2\2\2\u1658"+
		"\u165f\3\2\2\2\u1659\u165a\7\f\2\2\u165a\u165b\ta\2\2\u165b\u165c\7\u03b3"+
		"\2\2\u165c\u165d\5\u0206\u0104\2\u165d\u165e\7\u03b4\2\2\u165e\u1660\3"+
		"\2\2\2\u165f\u1659\3\2\2\2\u165f\u1660\3\2\2\2\u1660\u1662\3\2\2\2\u1661"+
		"\u1663\5\u023c\u011f\2\u1662\u1661\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u1664"+
		"\3\2\2\2\u1664\u1665\7\u03b4\2\2\u1665\u1678\3\2\2\2\u1666\u1667\7\u00eb"+
		"\2\2\u1667\u1668\7\u03b3\2\2\u1668\u1669\5<\37\2\u1669\u166c\7<\2\2\u166a"+
		"\u166d\5\u020a\u0106\2\u166b\u166d\5\u024a\u0126\2\u166c\u166a\3\2\2\2"+
		"\u166c\u166b\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u166f\7\u03b4\2\2\u166f"+
		"\u1678\3\2\2\2\u1670\u1671\7\u02cd\2\2\u1671\u1672\7\u03b3\2\2\u1672\u1673"+
		"\t\\\2\2\u1673\u1674\7\u03b5\2\2\u1674\u1675\5\u020a\u0106\2\u1675\u1676"+
		"\7\u03b4\2\2\u1676\u1678\3\2\2\2\u1677\u15da\3\2\2\2\u1677\u15db\3\2\2"+
		"\2\u1677\u15e2\3\2\2\2\u1677\u15e9\3\2\2\2\u1677\u15f0\3\2\2\2\u1677\u15f5"+
		"\3\2\2\2\u1677\u1602\3\2\2\2\u1677\u160e\3\2\2\2\u1677\u1617\3\2\2\2\u1677"+
		"\u1624\3\2\2\2\u1677\u1638\3\2\2\2\u1677\u1646\3\2\2\2\u1677\u1653\3\2"+
		"\2\2\u1677\u1666\3\2\2\2\u1677\u1670\3\2\2\2\u1678\u0239\3\2\2\2\u1679"+
		"\u167a\7\u00a4\2\2\u167a\u167b\5\u0248\u0125\2\u167b\u167c\7\u0095\2\2"+
		"\u167c\u167d\5\u0248\u0125\2\u167d\u023b\3\2\2\2\u167e\u167f\7\u0170\2"+
		"\2\u167f\u1684\5\u023e\u0120\2\u1680\u1681\7\u03b5\2\2\u1681\u1683\5\u023e"+
		"\u0120\2\u1682\u1680\3\2\2\2\u1683\u1686\3\2\2\2\u1684\u1682\3\2\2\2\u1684"+
		"\u1685\3\2\2\2\u1685\u168d\3\2\2\2\u1686\u1684\3\2\2\2\u1687\u1688\7\u0170"+
		"\2\2\u1688\u1689\5\u0206\u0104\2\u1689\u168a\7\u03a7\2\2\u168a\u168b\5"+
		"\u0206\u0104\2\u168b\u168d\3\2\2\2\u168c\u167e\3\2\2\2\u168c\u1687\3\2"+
		"\2\2\u168d\u023d\3\2\2\2\u168e\u1690\5\u0206\u0104\2\u168f\u1691\tb\2"+
		"\2\u1690\u168f\3\2\2\2\u1690\u1691\3\2\2\2\u1691\u023f\3\2\2\2\u1692\u1693"+
		"\tc\2\2\u1693\u1695\7\u03b3\2\2\u1694\u1696\t$\2\2\u1695\u1694\3\2\2\2"+
		"\u1695\u1696\3\2\2\2\u1696\u1697\3\2\2\2\u1697\u1698\5\u0248\u0125\2\u1698"+
		"\u1699\7\u03b4\2\2\u1699\u16cb\3\2\2\2\u169a\u169b\7\u00d7\2\2\u169b\u16a1"+
		"\7\u03b3\2\2\u169c\u16a2\7\u03a2\2\2\u169d\u169f\7\b\2\2\u169e\u169d\3"+
		"\2\2\2\u169e\u169f\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16a2\5\u0248\u0125"+
		"\2\u16a1\u169c\3\2\2\2\u16a1\u169e\3\2\2\2\u16a2\u16a3\3\2\2\2\u16a3\u16cb"+
		"\7\u03b4\2\2\u16a4\u16a5\7\u00d7\2\2\u16a5\u16a6\7\u03b3\2\2\u16a6\u16a7"+
		"\7,\2\2\u16a7\u16a8\5\u0246\u0124\2\u16a8\u16a9\7\u03b4\2\2\u16a9\u16cb"+
		"\3\2\2\2\u16aa\u16ab\td\2\2\u16ab\u16ad\7\u03b3\2\2\u16ac\u16ae\7\b\2"+
		"\2\u16ad\u16ac\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16af\3\2\2\2\u16af\u16b0"+
		"\5\u0248\u0125\2\u16b0\u16b1\7\u03b4\2\2\u16b1\u16cb\3\2\2\2\u16b2\u16b3"+
		"\7\u00d8\2\2\u16b3\u16b5\7\u03b3\2\2\u16b4\u16b6\7,\2\2\u16b5\u16b4\3"+
		"\2\2\2\u16b5\u16b6\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16c2\5\u0246\u0124"+
		"\2\u16b8\u16b9\7k\2\2\u16b9\u16ba\7\21\2\2\u16ba\u16bf\5\u00d2j\2\u16bb"+
		"\u16bc\7\u03b5\2\2\u16bc\u16be\5\u00d2j\2\u16bd\u16bb\3\2\2\2\u16be\u16c1"+
		"\3\2\2\2\u16bf\u16bd\3\2\2\2\u16bf\u16c0\3\2\2\2\u16c0\u16c3\3\2\2\2\u16c1"+
		"\u16bf\3\2\2\2\u16c2\u16b8\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c6\3\2"+
		"\2\2\u16c4\u16c5\7\u0086\2\2\u16c5\u16c7\7\u03c2\2\2\u16c6\u16c4\3\2\2"+
		"\2\u16c6\u16c7\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16c9\7\u03b4\2\2\u16c9"+
		"\u16cb\3\2\2\2\u16ca\u1692\3\2\2\2\u16ca\u169a\3\2\2\2\u16ca\u16a4\3\2"+
		"\2\2\u16ca\u16aa\3\2\2\2\u16ca\u16b2\3\2\2\2\u16cb\u0241\3\2\2\2\u16cc"+
		"\u16e4\5\u0266\u0134\2\u16cd\u16e4\7\u023a\2\2\u16ce\u16e4\7\u00e7\2\2"+
		"\u16cf\u16e4\7\u00e3\2\2\u16d0\u16e4\7\u00e4\2\2\u16d1\u16e4\7\u00e5\2"+
		"\2\u16d2\u16e4\7\u00e8\2\2\u16d3\u16e4\7\u00e9\2\2\u16d4\u16e4\7\u00ea"+
		"\2\2\u16d5\u16e4\7B\2\2\u16d6\u16e4\7I\2\2\u16d7\u16e4\7\u00e6\2\2\u16d8"+
		"\u16e4\7\u00ec\2\2\u16d9\u16e4\7\u0192\2\2\u16da\u16e4\7\u00ed\2\2\u16db"+
		"\u16e4\7{\2\2\u16dc\u16e4\7\u00ef\2\2\u16dd\u16e4\7\u00f0\2\2\u16de\u16e4"+
		"\7\u00f1\2\2\u16df\u16e4\7\u00f2\2\2\u16e0\u16e4\7\u00f3\2\2\u16e1\u16e4"+
		"\7\u00f4\2\2\u16e2\u16e4\7\u00f5\2\2\u16e3\u16cc\3\2\2\2\u16e3\u16cd\3"+
		"\2\2\2\u16e3\u16ce\3\2\2\2\u16e3\u16cf\3\2\2\2\u16e3\u16d0\3\2\2\2\u16e3"+
		"\u16d1\3\2\2\2\u16e3\u16d2\3\2\2\2\u16e3\u16d3\3\2\2\2\u16e3\u16d4\3\2"+
		"\2\2\u16e3\u16d5\3\2\2\2\u16e3\u16d6\3\2\2\2\u16e3\u16d7\3\2\2\2\u16e3"+
		"\u16d8\3\2\2\2\u16e3\u16d9\3\2\2\2\u16e3\u16da\3\2\2\2\u16e3\u16db\3\2"+
		"\2\2\u16e3\u16dc\3\2\2\2\u16e3\u16dd\3\2\2\2\u16e3\u16de\3\2\2\2\u16e3"+
		"\u16df\3\2\2\2\u16e3\u16e0\3\2\2\2\u16e3\u16e1\3\2\2\2\u16e3\u16e2\3\2"+
		"\2\2\u16e4\u0243\3\2\2\2\u16e5\u16e6\te\2\2\u16e6\u16e7\7\u03b3\2\2\u16e7"+
		"\u16e8\5\u0248\u0125\2\u16e8\u16e9\7\u03b4\2\2\u16e9\u0245\3\2\2\2\u16ea"+
		"\u16ef\5\u0212\u010a\2\u16eb\u16ef\5\u01ea\u00f6\2\u16ec\u16ef\5\u0236"+
		"\u011c\2\u16ed\u16ef\5\u024a\u0126\2\u16ee\u16ea\3\2\2\2\u16ee\u16eb\3"+
		"\2\2\2\u16ee\u16ec\3\2\2\2\u16ee\u16ed\3\2\2\2\u16ef\u16f9\3\2\2\2\u16f0"+
		"\u16f5\7\u03b5\2\2\u16f1\u16f6\5\u0212\u010a\2\u16f2\u16f6\5\u01ea\u00f6"+
		"\2\u16f3\u16f6\5\u0236\u011c\2\u16f4\u16f6\5\u024a\u0126\2\u16f5\u16f1"+
		"\3\2\2\2\u16f5\u16f2\3\2\2\2\u16f5\u16f3\3\2\2\2\u16f5\u16f4\3\2\2\2\u16f6"+
		"\u16f8\3\2\2\2\u16f7\u16f0\3\2\2\2\u16f8\u16fb\3\2\2\2\u16f9\u16f7\3\2"+
		"\2\2\u16f9\u16fa\3\2\2\2\u16fa\u0247\3\2\2\2\u16fb\u16f9\3\2\2\2\u16fc"+
		"\u1701\5\u0212\u010a\2\u16fd\u1701\5\u01ea\u00f6\2\u16fe\u1701\5\u0236"+
		"\u011c\2\u16ff\u1701\5\u024a\u0126\2\u1700\u16fc\3\2\2\2\u1700\u16fd\3"+
		"\2\2\2\u1700\u16fe\3\2\2\2\u1700\u16ff\3\2\2\2\u1701\u0249\3\2\2\2\u1702"+
		"\u1703\b\u0126\1\2\u1703\u1704\tf\2\2\u1704\u170e\5\u024a\u0126\6\u1705"+
		"\u1706\5\u024c\u0127\2\u1706\u1708\7L\2\2\u1707\u1709\7c\2\2\u1708\u1707"+
		"\3\2\2\2\u1708\u1709\3\2\2\2\u1709\u170a\3\2\2\2\u170a\u170b\tg\2\2\u170b"+
		"\u170e\3\2\2\2\u170c\u170e\5\u024c\u0127\2\u170d\u1702\3\2\2\2\u170d\u1705"+
		"\3\2\2\2\u170d\u170c\3\2\2\2\u170e\u1715\3\2\2\2\u170f\u1710\f\5\2\2\u1710"+
		"\u1711\5\u0254\u012b\2\u1711\u1712\5\u024a\u0126\6\u1712\u1714\3\2\2\2"+
		"\u1713\u170f\3\2\2\2\u1714\u1717\3\2\2\2\u1715\u1713\3\2\2\2\u1715\u1716"+
		"\3\2\2\2\u1716\u024b\3\2\2\2\u1717\u1715\3\2\2\2\u1718\u171b\b\u0127\1"+
		"\2\u1719\u171a\7\u03cd\2\2\u171a\u171c\7\u0399\2\2\u171b\u1719\3\2\2\2"+
		"\u171b\u171c\3\2\2\2\u171c\u171d\3\2\2\2\u171d\u171e\5\u024e\u0128\2\u171e"+
		"\u1758\3\2\2\2\u171f\u1720\f\t\2\2\u1720\u1721\5\u0252\u012a\2\u1721\u1722"+
		"\5\u024c\u0127\n\u1722\u1757\3\2\2\2\u1723\u1725\f\7\2\2\u1724\u1726\7"+
		"c\2\2\u1725\u1724\3\2\2\2\u1725\u1726\3\2\2\2\u1726\u1727\3\2\2\2\u1727"+
		"\u1728\7\17\2\2\u1728\u1729\5\u024c\u0127\2\u1729\u172a\7\13\2\2\u172a"+
		"\u172b\5\u024c\u0127\b\u172b\u1757\3\2\2\2\u172c\u172d\f\6\2\2\u172d\u172e"+
		"\7\u01ed\2\2\u172e\u172f\7U\2\2\u172f\u1757\5\u024c\u0127\7\u1730\u1732"+
		"\f\4\2\2\u1731\u1733\7c\2\2\u1732\u1731\3\2\2\2\u1732\u1733\3\2\2\2\u1733"+
		"\u1734\3\2\2\2\u1734\u1735\th\2\2\u1735\u1757\5\u024c\u0127\5\u1736\u1738"+
		"\f\13\2\2\u1737\u1739\7c\2\2\u1738\u1737\3\2\2\2\u1738\u1739\3\2\2\2\u1739"+
		"\u173a\3\2\2\2\u173a\u173b\7D\2\2\u173b\u173e\7\u03b3\2\2\u173c\u173f"+
		"\5\u00b4[\2\u173d\u173f\5\u0224\u0113\2\u173e\u173c\3\2\2\2\u173e\u173d"+
		"\3\2\2\2\u173f\u1740\3\2\2\2\u1740\u1741\7\u03b4\2\2\u1741\u1757\3\2\2"+
		"\2\u1742\u1743\f\n\2\2\u1743\u1744\7L\2\2\u1744\u1757\5\u0210\u0109\2"+
		"\u1745\u1746\f\b\2\2\u1746\u1747\5\u0252\u012a\2\u1747\u1748\ti\2\2\u1748"+
		"\u1749\7\u03b3\2\2\u1749\u174a\5\u00b4[\2\u174a\u174b\7\u03b4\2\2\u174b"+
		"\u1757\3\2\2\2\u174c\u174e\f\5\2\2\u174d\u174f\7c\2\2\u174e\u174d\3\2"+
		"\2\2\u174e\u174f\3\2\2\2\u174f\u1750\3\2\2\2\u1750\u1751\7U\2\2\u1751"+
		"\u1754\5\u024c\u0127\2\u1752\u1753\7\u013b\2\2\u1753\u1755\7\u03c2\2\2"+
		"\u1754\u1752\3\2\2\2\u1754\u1755\3\2\2\2\u1755\u1757\3\2\2\2\u1756\u171f"+
		"\3\2\2\2\u1756\u1723\3\2\2\2\u1756\u172c\3\2\2\2\u1756\u1730\3\2\2\2\u1756"+
		"\u1736\3\2\2\2\u1756\u1742\3\2\2\2\u1756\u1745\3\2\2\2\u1756\u174c\3\2"+
		"\2\2\u1757\u175a\3\2\2\2\u1758\u1756\3\2\2\2\u1758\u1759\3\2\2\2\u1759"+
		"\u024d\3\2\2\2\u175a\u1758\3\2\2\2\u175b\u175c\b\u0128\1\2\u175c\u175d"+
		"\5\u0250\u0129\2\u175d\u175e\5\u024e\u0128\13\u175e\u1789\3\2\2\2\u175f"+
		"\u1760\7\u00bd\2\2\u1760\u1789\5\u024e\u0128\n\u1761\u1789\5\u0212\u010a"+
		"\2\u1762\u1789\5\u01ea\u00f6\2\u1763\u1789\5\u0236\u011c\2\u1764\u1789"+
		"\5\u01f0\u00f9\2\u1765\u1766\7\u03b3\2\2\u1766\u176b\5\u024a\u0126\2\u1767"+
		"\u1768\7\u03b5\2\2\u1768\u176a\5\u024a\u0126\2\u1769\u1767\3\2\2\2\u176a"+
		"\u176d\3\2\2\2\u176b\u1769\3\2\2\2\u176b\u176c\3\2\2\2\u176c\u176e\3\2"+
		"\2\2\u176d\u176b\3\2\2\2\u176e\u176f\7\u03b4\2\2\u176f\u1789\3\2\2\2\u1770"+
		"\u1771\7\u01db\2\2\u1771\u1772\7\u03b3\2\2\u1772\u1775\5\u024a\u0126\2"+
		"\u1773\u1774\7\u03b5\2\2\u1774\u1776\5\u024a\u0126\2\u1775\u1773\3\2\2"+
		"\2\u1776\u1777\3\2\2\2\u1777\u1775\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u1779"+
		"\3\2\2\2\u1779\u177a\7\u03b4\2\2\u177a\u1789\3\2\2\2\u177b\u177c\7\64"+
		"\2\2\u177c\u177d\7\u03b3\2\2\u177d\u177e\5\u00b4[\2\u177e\u177f\7\u03b4"+
		"\2\2\u177f\u1789\3\2\2\2\u1780\u1781\7\u03b3\2\2\u1781\u1782\5\u00b4["+
		"\2\u1782\u1783\7\u03b4\2\2\u1783\u1789\3\2\2\2\u1784\u1785\7J\2\2\u1785"+
		"\u1786\5\u024a\u0126\2\u1786\u1787\5<\37\2\u1787\u1789\3\2\2\2\u1788\u175b"+
		"\3\2\2\2\u1788\u175f\3\2\2\2\u1788\u1761\3\2\2\2\u1788\u1762\3\2\2\2\u1788"+
		"\u1763\3\2\2\2\u1788\u1764\3\2\2\2\u1788\u1765\3\2\2\2\u1788\u1770\3\2"+
		"\2\2\u1788\u177b\3\2\2\2\u1788\u1780\3\2\2\2\u1788\u1784\3\2\2\2\u1789"+
		"\u1797\3\2\2\2\u178a\u178b\f\4\2\2\u178b\u178c\5\u0256\u012c\2\u178c\u178d"+
		"\5\u024e\u0128\5\u178d\u1796\3\2\2\2\u178e\u178f\f\3\2\2\u178f\u1790\5"+
		"\u0258\u012d\2\u1790\u1791\5\u024e\u0128\4\u1791\u1796\3\2\2\2\u1792\u1793"+
		"\f\r\2\2\u1793\u1794\7\31\2\2\u1794\u1796\5\u01f4\u00fb\2\u1795\u178a"+
		"\3\2\2\2\u1795\u178e\3\2\2\2\u1795\u1792\3\2\2\2\u1796\u1799\3\2\2\2\u1797"+
		"\u1795\3\2\2\2\u1797\u1798\3\2\2\2\u1798\u024f\3\2\2\2\u1799\u1797\3\2"+
		"\2\2\u179a\u179b\tj\2\2\u179b\u0251\3\2\2\2\u179c\u17ab\7\u03aa\2\2\u179d"+
		"\u17ab\7\u03ab\2\2\u179e\u17ab\7\u03ac\2\2\u179f\u17a0\7\u03ac\2\2\u17a0"+
		"\u17ab\7\u03aa\2\2\u17a1\u17a2\7\u03ab\2\2\u17a2\u17ab\7\u03aa\2\2\u17a3"+
		"\u17a4\7\u03ac\2\2\u17a4\u17ab\7\u03ab\2\2\u17a5\u17a6\7\u03ad\2\2\u17a6"+
		"\u17ab\7\u03aa\2\2\u17a7\u17a8\7\u03ac\2\2\u17a8\u17a9\7\u03aa\2\2\u17a9"+
		"\u17ab\7\u03ab\2\2\u17aa\u179c\3\2\2\2\u17aa\u179d\3\2\2\2\u17aa\u179e"+
		"\3\2\2\2\u17aa\u179f\3\2\2\2\u17aa\u17a1\3\2\2\2\u17aa\u17a3\3\2\2\2\u17aa"+
		"\u17a5\3\2\2\2\u17aa\u17a7\3\2\2\2\u17ab\u0253\3\2\2\2\u17ac\u17b4\7\13"+
		"\2\2\u17ad\u17ae\7\u03b0\2\2\u17ae\u17b4\7\u03b0\2\2\u17af\u17b4\7\u00a9"+
		"\2\2\u17b0\u17b4\7j\2\2\u17b1\u17b2\7\u03af\2\2\u17b2\u17b4\7\u03af\2"+
		"\2\u17b3\u17ac\3\2\2\2\u17b3\u17ad\3\2\2\2\u17b3\u17af\3\2\2\2\u17b3\u17b0"+
		"\3\2\2\2\u17b3\u17b1\3\2\2\2\u17b4\u0255\3\2\2\2\u17b5\u17b6\7\u03ac\2"+
		"\2\u17b6\u17bd\7\u03ac\2\2\u17b7\u17b8\7\u03ab\2\2\u17b8\u17bd\7\u03ab"+
		"\2\2\u17b9\u17bd\7\u03b0\2\2\u17ba\u17bd\7\u03b1\2\2\u17bb\u17bd\7\u03af"+
		"\2\2\u17bc\u17b5\3\2\2\2\u17bc\u17b7\3\2\2\2\u17bc\u17b9\3\2\2\2\u17bc"+
		"\u17ba\3\2\2\2\u17bc\u17bb\3\2\2\2\u17bd\u0257\3\2\2\2\u17be\u17bf\tk"+
		"\2\2\u17bf\u0259\3\2\2\2\u17c0\u17c1\tl\2\2\u17c1\u17c2\b\u012e\1\2\u17c2"+
		"\u025b\3\2\2\2\u17c3\u17c4\tm\2\2\u17c4\u025d\3\2\2\2\u17c5\u17c6\tn\2"+
		"\2\u17c6\u025f\3\2\2\2\u17c7\u17c8\to\2\2\u17c8\u0261\3\2\2\2\u17c9\u17ca"+
		"\tp\2\2\u17ca\u0263\3\2\2\2\u17cb\u17cc\tq\2\2\u17cc\u0265\3\2\2\2\u17cd"+
		"\u17ce\tr\2\2\u17ce\u0267\3\2\2\2\u035b\u0269\u026c\u0273\u0278\u027a"+
		"\u0280\u0283\u0286\u028f\u02b6\u02c2\u02cd\u02de\u02e3\u02ef\u030a\u0310"+
		"\u0315\u031b\u0320\u0324\u032d\u0330\u0333\u0337\u033e\u0341\u0346\u034e"+
		"\u0353\u0358\u035b\u0366\u0369\u036d\u0370\u0374\u0377\u037b\u037e\u0381"+
		"\u0385\u0388\u038c\u0392\u0398\u039e\u03a5\u03ac\u03b2\u03b8\u03c1\u03d4"+
		"\u03dc\u03e2\u03ef\u03f6\u03fc\u0403\u0408\u040f\u0412\u0415\u0418\u041b"+
		"\u0423\u0429\u0432\u0439\u043c\u043f\u0443\u044e\u0452\u0455\u0463\u0466"+
		"\u046a\u046d\u0471\u0474\u0478\u047b\u047f\u0482\u0485\u0489\u048c\u0490"+
		"\u0496\u04a3\u04aa\u04af\u04b2\u04b7\u04bf\u04c5\u04c9\u04cc\u04d1\u04d5"+
		"\u04d9\u04dc\u04e4\u04e6\u04ed\u04f3\u04fb\u04fe\u0505\u0508\u050a\u0510"+
		"\u0516\u0527\u052e\u0535\u053e\u054c\u0559\u055e\u056e\u0579\u0589\u0591"+
		"\u059b\u05a3\u05ac\u05b0\u05b2\u05b8\u05bf\u05c4\u05c6\u05ca\u05ce\u05d1"+
		"\u05d8\u05dd\u05df\u05e4\u05ee\u05f5\u05f8\u0600\u0608\u060a\u0612\u0617"+
		"\u061a\u0621\u0626\u0629\u062f\u0632\u0636\u063d\u0644\u064a\u064f\u0652"+
		"\u0659\u065e\u0662\u0669\u066f\u0675\u067c\u0682\u0688\u068f\u0695\u069b"+
		"\u06a2\u06a9\u06b0\u06b6\u06bc\u06c2\u06c8\u06ce\u06d6\u06dc\u06e3\u06ed"+
		"\u06f4\u06f6\u06fe\u0703\u0706\u070e\u0714\u0724\u0730\u0732\u0735\u073d"+
		"\u0743\u0749\u0756\u075d\u0765\u0768\u0774\u077b\u0783\u0786\u0792\u0799"+
		"\u07a1\u07a4\u07ab\u07b3\u07b6\u07b8\u07bd\u07c5\u07ce\u07d2\u07d6\u07db"+
		"\u07e1\u07e7\u07ec\u07f1\u07f6\u07fb\u07fe\u0803\u0808\u0812\u0816\u081d"+
		"\u0822\u0825\u082a\u082d\u0831\u0835\u083d\u0850\u0853\u0856\u085a\u0864"+
		"\u0871\u0878\u087b\u0884\u0888\u0893\u0896\u089a\u08a2\u08a5\u08aa\u08b2"+
		"\u08b8\u08bc\u08c1\u08c8\u08cc\u08d7\u08df\u08e2\u08e8\u08ee\u08f0\u08f5"+
		"\u08fb\u0901\u0903\u0907\u090a\u090d\u0913\u0919\u091c\u0922\u0928\u092a"+
		"\u092f\u0936\u093b\u0943\u0947\u094f\u0953\u0958\u095f\u0963\u0976\u0983"+
		"\u0986\u098f\u09a2\u09a9\u09b0\u09bf\u09cc\u09d2\u09d8\u09de\u09e4\u09ea"+
		"\u09f0\u09f5\u09fc\u0a03\u0a0a\u0a0d\u0a11\u0a14\u0a21\u0a28\u0a2f\u0a35"+
		"\u0a39\u0a3d\u0a44\u0a47\u0a4c\u0a53\u0a5a\u0a5e\u0a67\u0a70\u0a79\u0a7c"+
		"\u0a80\u0a89\u0a8d\u0a90\u0a93\u0a9b\u0aa1\u0aaa\u0aad\u0ab8\u0abb\u0ac0"+
		"\u0ac3\u0ac8\u0ad2\u0ad7\u0add\u0adf\u0ae5\u0ae7\u0aed\u0af5\u0afa\u0b02"+
		"\u0b05\u0b0a\u0b0d\u0b12\u0b1a\u0b22\u0b28\u0b30\u0b35\u0b3d\u0b40\u0b44"+
		"\u0b47\u0b4f\u0b55\u0b5e\u0b61\u0b65\u0b69\u0b6f\u0b73\u0b77\u0b79\u0b7c"+
		"\u0b7f\u0b82\u0b88\u0b8c\u0b8f\u0b92\u0b95\u0b98\u0b9a\u0b9e\u0bac\u0baf"+
		"\u0bb5\u0bb9\u0bc1\u0bc5\u0bc8\u0bcb\u0bd4\u0bd8\u0bdb\u0bdf\u0be3\u0be6"+
		"\u0be9\u0bee\u0bf4\u0bf8\u0c02\u0c08\u0c0c\u0c12\u0c16\u0c1c\u0c1f\u0c2b"+
		"\u0c2f\u0c33\u0c3b\u0c3f\u0c47\u0c4a\u0c4e\u0c51\u0c59\u0c5e\u0c61\u0c64"+
		"\u0c68\u0c6b\u0c74\u0c79\u0c82\u0c87\u0c8e\u0c95\u0c9d\u0ca2\u0caa\u0cad"+
		"\u0cb0\u0cb7\u0cba\u0cc1\u0cc4\u0ccc\u0cd2\u0cdd\u0ce0\u0ceb\u0cf1\u0cf5"+
		"\u0d00\u0d05\u0d07\u0d0b\u0d15\u0d1f\u0d25\u0d2a\u0d2d\u0d30\u0d33\u0d39"+
		"\u0d3e\u0d41\u0d44\u0d47\u0d49\u0d4f\u0d54\u0d57\u0d5a\u0d5e\u0d64\u0d68"+
		"\u0d72\u0d76\u0d7c\u0d85\u0d88\u0d8c\u0d8f\u0d93\u0d97\u0d9a\u0d9c\u0da4"+
		"\u0db0\u0db6\u0db8\u0dbe\u0dc0\u0dc2\u0dc8\u0dd0\u0dd8\u0dde\u0de7\u0dec"+
		"\u0dee\u0df2\u0df6\u0dfc\u0e03\u0e0c\u0e0f\u0e13\u0e17\u0e1b\u0e1e\u0e21"+
		"\u0e24\u0e28\u0e2c\u0e2f\u0e32\u0e35\u0e3c\u0e40\u0e4f\u0e5c\u0e64\u0e6e"+
		"\u0e72\u0e75\u0e7b\u0e7e\u0e81\u0e8a\u0e93\u0e9d\u0ea1\u0eab\u0eb5\u0ebd"+
		"\u0ec0\u0ec9\u0ecc\u0ed0\u0ed5\u0ed9\u0ee2\u0ee5\u0f04\u0f07\u0f0a\u0f42"+
		"\u0f47\u0f63\u0f71\u0f78\u0f7c\u0f82\u0f8a\u0f8c\u0f97\u0fa1\u0fa8\u0fae"+
		"\u0fb6\u0fbb\u0fc3\u0fcb\u0fd3\u0fdb\u0fe1\u0fe3\u0fe7\u0fec\u0ff1\u0ff7"+
		"\u0ff9\u1004\u1009\u1010\u1012\u1020\u1026\u102b\u1030\u1036\u103d\u1045"+
		"\u104d\u1052\u1058\u105b\u1063\u106a\u1073\u1076\u1087\u108f\u1097\u109b"+
		"\u10a2\u10a8\u10b0\u10b9\u10bf\u10c6\u10cd\u10d2\u10d5\u10d7\u10dd\u10df"+
		"\u10e3\u10e5\u10e8\u10f1\u10f7\u10fe\u1105\u110a\u110d\u110f\u1115\u1117"+
		"\u111b\u111d\u1120\u1125\u112c\u1135\u113a\u1143\u114a\u114f\u1152\u1154"+
		"\u115a\u115c\u115f\u116b\u1171\u117a\u1183\u1188\u1191\u1197\u11a2\u11a5"+
		"\u11b1\u11b8\u11bd\u11cc\u11d7\u11da\u11e4\u11ee\u11f8\u1202\u1206\u120a"+
		"\u1213\u122e\u123d\u1245\u1250\u1257\u125b\u1262\u1267\u126a\u126d\u1276"+
		"\u127a\u1298\u129f\u12a3\u12aa\u12ad\u12b2\u12bc\u12c0\u12c6\u12c9\u12ce"+
		"\u12d2\u12d9\u12dc\u12e2\u12fa\u1307\u130a\u1314\u131c\u1320\u1327\u132a"+
		"\u1333\u1339\u133f\u1349\u134b\u1351\u1354\u1357\u1363\u1366\u136c\u136f"+
		"\u1377\u137f\u1385\u1389\u1397\u13a3\u13aa\u13ad\u13b4\u13bb\u13c0\u13c5"+
		"\u13d0\u13db\u13e1\u13e6\u13f3\u13f5\u13fa\u13ff\u1401\u1408\u140f\u1412"+
		"\u1415\u141b\u141f\u1425\u142b\u143a\u143f\u1449\u1451\u1453\u145b\u145e"+
		"\u146d\u1474\u1489\u1490\u1492\u1499\u149b\u149f\u14a7\u14b3\u14b8\u14c1"+
		"\u14c4\u14c8\u14cd\u14d0\u14d4\u14d8\u14da\u14df\u14e4\u14ef\u14f2\u14f6"+
		"\u14f9\u14fe\u1502\u1507\u150a\u150d\u1511\u1514\u1517\u151b\u151e\u1521"+
		"\u1526\u152f\u1534\u1539\u153d\u1540\u1544\u1548\u154d\u1552\u1556\u1558"+
		"\u1568\u1571\u1579\u1585\u158f\u1597\u159f\u15a7\u15af\u15b8\u15ba\u15be"+
		"\u15cc\u15d3\u15d8\u15fa\u15fe\u1606\u160a\u1613\u161b\u1620\u1628\u162d"+
		"\u1632\u1634\u163d\u1642\u164a\u164f\u1657\u165f\u1662\u166c\u1677\u1684"+
		"\u168c\u1690\u1695\u169e\u16a1\u16ad\u16b5\u16bf\u16c2\u16c6\u16ca\u16e3"+
		"\u16ee\u16f5\u16f9\u1700\u1708\u170d\u1715\u171b\u1725\u1732\u1738\u173e"+
		"\u174e\u1754\u1756\u1758\u176b\u1777\u1788\u1795\u1797\u17aa\u17b3\u17bc";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}